//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.85;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.85] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x45d586=_0x442c;(function(_0x433a74,_0xa16084){const _0x482167=_0x442c,_0x1575fc=_0x433a74();while(!![]){try{const _0x4f9893=parseInt(_0x482167(0x878))/0x1*(-parseInt(_0x482167(0x236))/0x2)+parseInt(_0x482167(0x198))/0x3+parseInt(_0x482167(0x949))/0x4*(parseInt(_0x482167(0xad6))/0x5)+-parseInt(_0x482167(0x4d9))/0x6*(parseInt(_0x482167(0x36d))/0x7)+parseInt(_0x482167(0x26c))/0x8*(parseInt(_0x482167(0x927))/0x9)+parseInt(_0x482167(0x5d2))/0xa+parseInt(_0x482167(0xaaa))/0xb;if(_0x4f9893===_0xa16084)break;else _0x1575fc['push'](_0x1575fc['shift']());}catch(_0x5d3fae){_0x1575fc['push'](_0x1575fc['shift']());}}}(_0x455f,0xf1c17));var label=_0x45d586(0x6fe),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x45d586(0x229)](function(_0xcb2060){const _0x2869a0=_0x45d586;return _0xcb2060[_0x2869a0(0xa91)]&&_0xcb2060['description'][_0x2869a0(0x840)]('['+label+']');})[0x0];VisuMZ[label][_0x45d586(0xa41)]=VisuMZ[label][_0x45d586(0xa41)]||{},VisuMZ['ConvertParams']=function(_0x315c93,_0x3d5d1d){const _0x1bad4e=_0x45d586;for(const _0xf8b31c in _0x3d5d1d){if(_0xf8b31c[_0x1bad4e(0x95f)](/(.*):(.*)/i)){const _0x478891=String(RegExp['$1']),_0x38258b=String(RegExp['$2'])['toUpperCase']()['trim']();let _0x13a81b,_0x28e363,_0x21c02b;switch(_0x38258b){case'NUM':_0x13a81b=_0x3d5d1d[_0xf8b31c]!==''?Number(_0x3d5d1d[_0xf8b31c]):0x0;break;case _0x1bad4e(0x9c2):_0x28e363=_0x3d5d1d[_0xf8b31c]!==''?JSON[_0x1bad4e(0x7d4)](_0x3d5d1d[_0xf8b31c]):[],_0x13a81b=_0x28e363[_0x1bad4e(0x7a1)](_0x32e973=>Number(_0x32e973));break;case'EVAL':_0x13a81b=_0x3d5d1d[_0xf8b31c]!==''?eval(_0x3d5d1d[_0xf8b31c]):null;break;case _0x1bad4e(0x23b):_0x28e363=_0x3d5d1d[_0xf8b31c]!==''?JSON[_0x1bad4e(0x7d4)](_0x3d5d1d[_0xf8b31c]):[],_0x13a81b=_0x28e363[_0x1bad4e(0x7a1)](_0x34b7a9=>eval(_0x34b7a9));break;case _0x1bad4e(0x4b3):_0x13a81b=_0x3d5d1d[_0xf8b31c]!==''?JSON[_0x1bad4e(0x7d4)](_0x3d5d1d[_0xf8b31c]):'';break;case'ARRAYJSON':_0x28e363=_0x3d5d1d[_0xf8b31c]!==''?JSON['parse'](_0x3d5d1d[_0xf8b31c]):[],_0x13a81b=_0x28e363['map'](_0x3ae9bb=>JSON['parse'](_0x3ae9bb));break;case _0x1bad4e(0x1ea):_0x13a81b=_0x3d5d1d[_0xf8b31c]!==''?new Function(JSON[_0x1bad4e(0x7d4)](_0x3d5d1d[_0xf8b31c])):new Function(_0x1bad4e(0x978));break;case _0x1bad4e(0x395):_0x28e363=_0x3d5d1d[_0xf8b31c]!==''?JSON['parse'](_0x3d5d1d[_0xf8b31c]):[],_0x13a81b=_0x28e363['map'](_0x10d1b2=>new Function(JSON['parse'](_0x10d1b2)));break;case _0x1bad4e(0x64d):_0x13a81b=_0x3d5d1d[_0xf8b31c]!==''?String(_0x3d5d1d[_0xf8b31c]):'';break;case'ARRAYSTR':_0x28e363=_0x3d5d1d[_0xf8b31c]!==''?JSON[_0x1bad4e(0x7d4)](_0x3d5d1d[_0xf8b31c]):[],_0x13a81b=_0x28e363[_0x1bad4e(0x7a1)](_0x356512=>String(_0x356512));break;case'STRUCT':_0x21c02b=_0x3d5d1d[_0xf8b31c]!==''?JSON[_0x1bad4e(0x7d4)](_0x3d5d1d[_0xf8b31c]):{},_0x315c93[_0x478891]={},VisuMZ[_0x1bad4e(0x536)](_0x315c93[_0x478891],_0x21c02b);continue;case _0x1bad4e(0x455):_0x28e363=_0x3d5d1d[_0xf8b31c]!==''?JSON[_0x1bad4e(0x7d4)](_0x3d5d1d[_0xf8b31c]):[],_0x13a81b=_0x28e363[_0x1bad4e(0x7a1)](_0x25b36a=>VisuMZ[_0x1bad4e(0x536)]({},JSON[_0x1bad4e(0x7d4)](_0x25b36a)));break;default:continue;}_0x315c93[_0x478891]=_0x13a81b;}}return _0x315c93;},(_0x5f3d97=>{const _0x898afd=_0x45d586,_0x33461d=_0x5f3d97['name'];for(const _0x1bad33 of dependencies){if(!Imported[_0x1bad33]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x898afd(0x534)](_0x33461d,_0x1bad33)),SceneManager[_0x898afd(0x16f)]();break;}}const _0x254fae=_0x5f3d97[_0x898afd(0x30c)];if(_0x254fae[_0x898afd(0x95f)](/\[Version[ ](.*?)\]/i)){const _0x74f8ce=Number(RegExp['$1']);_0x74f8ce!==VisuMZ[label][_0x898afd(0x23e)]&&(alert(_0x898afd(0x7eb)['format'](_0x33461d,_0x74f8ce)),SceneManager[_0x898afd(0x16f)]());}if(_0x254fae[_0x898afd(0x95f)](/\[Tier[ ](\d+)\]/i)){const _0x553ee8=Number(RegExp['$1']);_0x553ee8<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x898afd(0x534)](_0x33461d,_0x553ee8,tier)),SceneManager[_0x898afd(0x16f)]()):tier=Math[_0x898afd(0x61a)](_0x553ee8,tier);}VisuMZ['ConvertParams'](VisuMZ[label]['Settings'],_0x5f3d97[_0x898afd(0x8e0)]);})(pluginData),VisuMZ[_0x45d586(0x552)]=function(_0x3b0350){const _0x59e75a=_0x45d586;let _0x234138=[];for(const _0x26f8ba of _0x3b0350){_0x234138=_0x234138[_0x59e75a(0xb10)](VisuMZ[_0x59e75a(0x44f)](_0x26f8ba));}return _0x234138[_0x59e75a(0x229)](_0x14d8c9=>_0x14d8c9);},VisuMZ['ConvertActionSequenceTarget']=function(_0x125808){const _0x1a629b=_0x45d586,_0x32b5b0=BattleManager['allBattleMembers']()[_0x1a629b(0x229)](_0x259c90=>_0x259c90&&_0x259c90[_0x1a629b(0x2bd)]()),_0x3f318c=BattleManager[_0x1a629b(0x1ce)],_0x360382=BattleManager[_0x1a629b(0x798)],_0x299b49=BattleManager[_0x1a629b(0x424)]?BattleManager[_0x1a629b(0x424)][_0x1a629b(0x25a)](0x0):_0x32b5b0;_0x125808=_0x125808[_0x1a629b(0x2ab)]()['trim']();if(_0x125808===_0x1a629b(0xa02))return[_0x3f318c];else{if(_0x125808===_0x1a629b(0xbad))return[_0x360382];else{if(_0x125808===_0x1a629b(0x748)){if(_0x360382){const _0x2b4f96=_0x299b49[_0x1a629b(0xa63)](_0x360382);return _0x2b4f96>=0x0?[_0x299b49[_0x2b4f96-0x1]||_0x360382]:[_0x360382];}}else{if(_0x125808===_0x1a629b(0x6ce)){if(_0x360382){const _0x8ef4bc=_0x299b49[_0x1a629b(0xa63)](_0x360382);return _0x8ef4bc>=0x0?[_0x299b49[_0x8ef4bc+0x1]||_0x360382]:[_0x360382];}}else{if(_0x125808===_0x1a629b(0x388))return _0x299b49;else{if(_0x125808===_0x1a629b(0x422))return[_0x3f318c][_0x1a629b(0xb10)](_0x299b49);else{if(_0x125808===_0x1a629b(0x37a))return _0x32b5b0[_0x1a629b(0x229)](_0x323748=>_0x323748!==_0x3f318c&&!_0x299b49['includes'](_0x323748)&&_0x323748[_0x1a629b(0x654)]());else{if(_0x125808===_0x1a629b(0x98f))return[VisuMZ['GetActionSequenceSpecialTarget']()];else{if(_0x125808[_0x1a629b(0x95f)](/SPECIAL (.*)>/i)){const _0x2a5312=String(RegExp['$1'])['split'](',')[_0x1a629b(0x7a1)](_0x58a225=>_0x58a225[_0x1a629b(0x379)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x2a5312)];}}}}}}}}}if(_0x3f318c){if(_0x125808===_0x1a629b(0x9c5))return _0x3f318c['friendsUnit']()['aliveMembers']();else{if(_0x125808==='alive\x20friends\x20not\x20user')return _0x3f318c[_0x1a629b(0x904)]()[_0x1a629b(0x60c)]()[_0x1a629b(0x229)](_0xab938f=>_0xab938f!==_0x3f318c);else{if(_0x125808===_0x1a629b(0x242))return _0x3f318c[_0x1a629b(0x904)]()[_0x1a629b(0x60c)]()[_0x1a629b(0x229)](_0x5668db=>_0x5668db!==_0x360382);else{if(_0x125808==='dead\x20friends')return _0x3f318c[_0x1a629b(0x904)]()['deadMembers']();else{if(_0x125808[_0x1a629b(0x95f)](/FRIEND INDEX (\d+)/i)){const _0x47a77e=Number(RegExp['$1']);return[_0x3f318c['friendsUnit']()[_0x1a629b(0xad5)]()[_0x47a77e]];}}}}}if(_0x125808==='alive\x20opponents')return _0x3f318c[_0x1a629b(0x276)]()[_0x1a629b(0x60c)]();else{if(_0x125808===_0x1a629b(0x3e9))return _0x3f318c[_0x1a629b(0x276)]()['aliveMembers']()['filter'](_0x28c681=>_0x28c681!==_0x360382);else{if(_0x125808===_0x1a629b(0x181))return _0x3f318c['opponentsUnit']()[_0x1a629b(0x99f)]();else{if(_0x125808[_0x1a629b(0x95f)](/OPPONENT INDEX (\d+)/i)){const _0x3d5379=Number(RegExp['$1']);return[_0x3f318c['opponentsUnit']()[_0x1a629b(0xad5)]()[_0x3d5379]];}}}}}if(_0x125808==='alive\x20actors')return $gameParty[_0x1a629b(0x60c)]();else{if(_0x125808===_0x1a629b(0xa09))return $gameParty[_0x1a629b(0x60c)]()[_0x1a629b(0x229)](_0x5a61e4=>_0x5a61e4!==_0x3f318c);else{if(_0x125808==='alive\x20actors\x20not\x20target')return $gameParty['aliveMembers']()[_0x1a629b(0x229)](_0x12e5de=>_0x12e5de!==_0x360382);else{if(_0x125808===_0x1a629b(0xbd9))return $gameParty[_0x1a629b(0x99f)]();else{if(_0x125808['match'](/ACTOR INDEX (\d+)/i)){const _0x623acc=Number(RegExp['$1']);return[$gameParty[_0x1a629b(0xad5)]()[_0x623acc]];}else{if(_0x125808[_0x1a629b(0x95f)](/ACTOR ID (\d+)/i)){const _0x3b1e7f=Number(RegExp['$1']);return[$gameActors[_0x1a629b(0xb77)](_0x3b1e7f)];}}}}}}if(_0x125808===_0x1a629b(0x195))return $gameTroop['aliveMembers']();else{if(_0x125808===_0x1a629b(0x864))return $gameTroop[_0x1a629b(0x60c)]()['filter'](_0x1ffc42=>_0x1ffc42!==_0x3f318c);else{if(_0x125808==='alive\x20enemies\x20not\x20target')return $gameTroop['aliveMembers']()[_0x1a629b(0x229)](_0x182cd8=>_0x182cd8!==_0x360382);else{if(_0x125808===_0x1a629b(0x78f))return $gameTroop[_0x1a629b(0x99f)]();else{if(_0x125808[_0x1a629b(0x95f)](/ENEMY INDEX (\d+)/i)){const _0x186249=Number(RegExp['$1']);return[$gameTroop[_0x1a629b(0xad5)]()[_0x186249]];}else{if(_0x125808[_0x1a629b(0x95f)](/ENEMY ID (\d+)/i)){const _0x59e4ef=Number(RegExp['$1']);return $gameTroop[_0x1a629b(0x60c)]()['filter'](_0x223d15=>_0x223d15[_0x1a629b(0x4a5)]()===_0x59e4ef);}}}}}}if(_0x125808==='alive\x20battlers')return _0x32b5b0[_0x1a629b(0x229)](_0x22abea=>_0x22abea[_0x1a629b(0x45d)]());else{if(_0x125808===_0x1a629b(0xa07))return _0x32b5b0[_0x1a629b(0x229)](_0x2b1443=>_0x2b1443[_0x1a629b(0x45d)]()&&_0x2b1443!==_0x3f318c);else{if(_0x125808===_0x1a629b(0x265))return _0x32b5b0[_0x1a629b(0x229)](_0x57b2ab=>_0x57b2ab[_0x1a629b(0x45d)]()&&_0x57b2ab!==_0x360382);else{if(_0x125808==='dead\x20battlers')return _0x32b5b0['filter'](_0x198fa1=>_0x198fa1[_0x1a629b(0x1e3)]());}}}return[];},VisuMZ['GetActionSequenceSpecialTarget']=function(){const _0x9bee6e=_0x45d586;return BattleManager[_0x9bee6e(0x798)];},VisuMZ[_0x45d586(0x500)]=function(_0x1e5be9){const _0x48a260=_0x45d586;return BattleManager[_0x48a260(0x798)];},PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x6e4),_0x46e37e=>{const _0x3a0d32=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3a0d32(0x536)](_0x46e37e,_0x46e37e);const _0x17ed81=$gameTemp['getLastPluginCommandInterpreter'](),_0x217339=BattleManager[_0x3a0d32(0x9e9)],_0x5c461a=BattleManager['_subject'],_0x91d17b=BattleManager[_0x3a0d32(0x424)]?BattleManager[_0x3a0d32(0x424)][_0x3a0d32(0x25a)](0x0):[],_0x48ab6c=BattleManager[_0x3a0d32(0x936)];if(!_0x17ed81||!_0x217339||!_0x5c461a)return;if(!_0x217339[_0x3a0d32(0xba9)]())return;if(_0x46e37e['DisplayAction'])_0x48ab6c[_0x3a0d32(0x950)](_0x5c461a,_0x217339[_0x3a0d32(0xba9)]());_0x46e37e['ApplyImmortal']&&_0x48ab6c[_0x3a0d32(0x119)](_0x3a0d32(0x52b),_0x5c461a,_0x91d17b,!![]);if(_0x46e37e['ActionStart'])_0x48ab6c[_0x3a0d32(0x119)](_0x3a0d32(0x4dd),_0x5c461a,_0x217339);if(_0x46e37e[_0x3a0d32(0x9c0)])_0x48ab6c[_0x3a0d32(0x119)](_0x3a0d32(0x2c7));if(_0x46e37e[_0x3a0d32(0x50b)])_0x48ab6c['push'](_0x3a0d32(0x3a3),_0x5c461a,_0x217339);if(_0x46e37e['WaitForAnimation'])_0x48ab6c['push'](_0x3a0d32(0x16a));_0x17ed81[_0x3a0d32(0x9c6)]('battlelog');}),PluginManager[_0x45d586(0xb11)](pluginData['name'],'ActSeq_Set_WholeActionSet',_0x5a39ed=>{const _0x5c916b=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5c916b(0x536)](_0x5a39ed,_0x5a39ed);const _0xa185d3=$gameTemp[_0x5c916b(0x421)](),_0x2be6aa=BattleManager['_action'],_0xe2f15=BattleManager[_0x5c916b(0x1ce)],_0x210410=BattleManager[_0x5c916b(0x424)]?BattleManager[_0x5c916b(0x424)][_0x5c916b(0x25a)](0x0):[],_0x463c31=BattleManager[_0x5c916b(0x936)],_0x5b467b=_0x5a39ed['DualWield']??![];if(!_0xa185d3||!_0x2be6aa||!_0xe2f15)return;if(!_0x2be6aa['item']())return;let _0x309847=_0x5b467b?_0x463c31[_0x5c916b(0x7fa)](_0xe2f15):0x1;for(let _0x14e5ba=0x0;_0x14e5ba<_0x309847;_0x14e5ba++){_0x5b467b&&_0xe2f15[_0x5c916b(0x7f0)]()&&_0x463c31[_0x5c916b(0x119)](_0x5c916b(0xb66),_0xe2f15,_0x14e5ba);if(_0x5a39ed[_0x5c916b(0x3ba)])_0x463c31[_0x5c916b(0x119)]('performAction',_0xe2f15,_0x2be6aa);if(_0x5a39ed[_0x5c916b(0xb13)]>0x0)_0x463c31[_0x5c916b(0x119)](_0x5c916b(0xae4),_0x5a39ed[_0x5c916b(0xb13)]);if(_0x5a39ed[_0x5c916b(0xaa6)])_0x463c31[_0x5c916b(0x119)](_0x5c916b(0x7d3),_0xe2f15,_0x210410,_0x2be6aa['item']()[_0x5c916b(0x71b)]);if(_0x5a39ed[_0x5c916b(0x6eb)])_0x463c31['push'](_0x5c916b(0x16a));for(const _0x8064a3 of _0x210410){if(!_0x8064a3)continue;if(_0x5a39ed['ActionEffect'])_0x463c31['push'](_0x5c916b(0x2b7),_0xe2f15,_0x8064a3);}}_0x5b467b&&_0xe2f15[_0x5c916b(0x7f0)]()&&_0x463c31['push'](_0x5c916b(0x6db),_0xe2f15);if(_0x5a39ed[_0x5c916b(0x2c2)])_0x463c31[_0x5c916b(0x119)]('applyImmortal',_0xe2f15,_0x210410,![]);_0xa185d3[_0x5c916b(0x9c6)](_0x5c916b(0x9d8));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x255),_0xd088ae=>{const _0x4c77a3=_0x45d586;if(!SceneManager[_0x4c77a3(0x81a)]())return;VisuMZ[_0x4c77a3(0x536)](_0xd088ae,_0xd088ae);const _0x58f2e0=$gameTemp[_0x4c77a3(0x421)](),_0x2f4683=BattleManager['_action'],_0x24fc1c=BattleManager[_0x4c77a3(0x1ce)],_0x5627d3=BattleManager['_allTargets']?BattleManager['_allTargets']['slice'](0x0):[],_0x4ecbef=BattleManager[_0x4c77a3(0x936)],_0x31567a=_0xd088ae['DualWield']??![];if(!_0x58f2e0||!_0x2f4683||!_0x24fc1c)return;if(!_0x2f4683['item']())return;let _0x4c605b=_0x31567a?_0x4ecbef[_0x4c77a3(0x7fa)](_0x24fc1c):0x1;for(let _0x3bcdbe=0x0;_0x3bcdbe<_0x4c605b;_0x3bcdbe++){for(const _0x3e8563 of _0x5627d3){if(!_0x3e8563)continue;_0x31567a&&_0x24fc1c[_0x4c77a3(0x7f0)]()&&_0x4ecbef['push'](_0x4c77a3(0xb66),_0x24fc1c,_0x3bcdbe);if(_0xd088ae['PerformAction'])_0x4ecbef['push'](_0x4c77a3(0xa5e),_0x24fc1c,_0x2f4683);if(_0xd088ae['WaitCount1']>0x0)_0x4ecbef[_0x4c77a3(0x119)](_0x4c77a3(0xae4),_0xd088ae['WaitCount1']);if(_0xd088ae['ActionAnimation'])_0x4ecbef[_0x4c77a3(0x119)](_0x4c77a3(0x7d3),_0x24fc1c,[_0x3e8563],_0x2f4683[_0x4c77a3(0xba9)]()[_0x4c77a3(0x71b)]);if(_0xd088ae[_0x4c77a3(0x2ad)]>0x0)_0x4ecbef[_0x4c77a3(0x119)]('waitCount',_0xd088ae[_0x4c77a3(0x2ad)]);if(_0xd088ae[_0x4c77a3(0x75f)])_0x4ecbef[_0x4c77a3(0x119)](_0x4c77a3(0x2b7),_0x24fc1c,_0x3e8563);}}_0x31567a&&_0x24fc1c[_0x4c77a3(0x7f0)]()&&_0x4ecbef[_0x4c77a3(0x119)](_0x4c77a3(0x6db),_0x24fc1c);if(_0xd088ae['ApplyImmortal'])_0x4ecbef[_0x4c77a3(0x119)](_0x4c77a3(0x52b),_0x24fc1c,_0x5627d3,![]);_0x58f2e0[_0x4c77a3(0x9c6)](_0x4c77a3(0x9d8));}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x432),_0x2d1d40=>{const _0x28f827=_0x45d586;if(!SceneManager[_0x28f827(0x81a)]())return;VisuMZ['ConvertParams'](_0x2d1d40,_0x2d1d40);const _0x53099a=$gameTemp['getLastPluginCommandInterpreter'](),_0x288cc3=BattleManager[_0x28f827(0x9e9)],_0x7c6a08=BattleManager['_subject'],_0x3f1105=BattleManager[_0x28f827(0x424)]?BattleManager[_0x28f827(0x424)][_0x28f827(0x25a)](0x0):[],_0x3d0ca2=BattleManager[_0x28f827(0x936)];if(!_0x53099a||!_0x288cc3||!_0x7c6a08)return;if(!_0x288cc3[_0x28f827(0xba9)]())return;if(_0x2d1d40[_0x28f827(0x2c2)])_0x3d0ca2[_0x28f827(0x119)](_0x28f827(0x52b),_0x7c6a08,_0x3f1105,![]);if(_0x2d1d40['WaitForNewLine'])_0x3d0ca2[_0x28f827(0x119)](_0x28f827(0x572));if(_0x2d1d40['WaitForEffect'])_0x3d0ca2[_0x28f827(0x119)](_0x28f827(0x399));if(_0x2d1d40['ClearBattleLog'])_0x3d0ca2[_0x28f827(0x119)]('clear');if(_0x2d1d40[_0x28f827(0x1ac)])_0x3d0ca2[_0x28f827(0x119)](_0x28f827(0x822),_0x7c6a08);if(_0x2d1d40[_0x28f827(0x9c0)])_0x3d0ca2['push']('waitForMovement');_0x53099a[_0x28f827(0x9c6)]('battlelog');}),PluginManager[_0x45d586(0xb11)](pluginData['name'],'ActSeq_ChangeAngle',_0x4b1902=>{const _0x1e203e=_0x45d586;if(!SceneManager[_0x1e203e(0x81a)]())return;if(!Imported[_0x1e203e(0x2ff)])return;VisuMZ[_0x1e203e(0x536)](_0x4b1902,_0x4b1902);const _0x77f72b=$gameTemp['getLastPluginCommandInterpreter'](),_0x20a851=_0x4b1902[_0x1e203e(0x85b)];if(!_0x77f72b)return;$gameScreen[_0x1e203e(0x336)](_0x4b1902[_0x1e203e(0xbde)],_0x4b1902[_0x1e203e(0x7de)],_0x4b1902[_0x1e203e(0xb1d)]);if(_0x20a851)_0x77f72b['setWaitMode'](_0x1e203e(0xbf1));}),PluginManager['registerCommand'](pluginData['name'],_0x45d586(0x47f),_0x38d450=>{const _0x1ed81a=_0x45d586;if(!SceneManager[_0x1ed81a(0x81a)]())return;if(!Imported[_0x1ed81a(0x2ff)])return;VisuMZ[_0x1ed81a(0x536)](_0x38d450,_0x38d450);const _0x31e372=$gameTemp[_0x1ed81a(0x421)](),_0x127895=_0x38d450[_0x1ed81a(0x85b)];if(!_0x31e372)return;$gameScreen[_0x1ed81a(0x336)](0x0,_0x38d450[_0x1ed81a(0x7de)],_0x38d450[_0x1ed81a(0xb1d)]);if(_0x127895)_0x31e372[_0x1ed81a(0x9c6)](_0x1ed81a(0xbf1));}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x6f9),_0x7ee33e=>{const _0x3c45c1=_0x45d586;if(!SceneManager[_0x3c45c1(0x81a)]())return;if(!Imported[_0x3c45c1(0x2ff)])return;const _0x26532f=$gameTemp[_0x3c45c1(0x421)]();if(!_0x26532f)return;_0x26532f[_0x3c45c1(0x9c6)](_0x3c45c1(0xbf1));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x696),_0x157b49=>{const _0x365746=_0x45d586;if(!SceneManager[_0x365746(0x81a)]())return;VisuMZ[_0x365746(0x536)](_0x157b49,_0x157b49);const _0x53f0de=$gameTemp[_0x365746(0x421)](),_0x5ca45f=BattleManager[_0x365746(0x9e9)],_0x55858a=BattleManager[_0x365746(0x1ce)],_0x3a829d=VisuMZ['CreateActionSequenceTargets'](_0x157b49['Targets']),_0x4949a9=_0x157b49['Mirror'],_0x186567=BattleManager[_0x365746(0x936)];if(!_0x53f0de||!_0x5ca45f||!_0x55858a)return;if(!_0x5ca45f[_0x365746(0xba9)]())return;let _0x341c19=_0x5ca45f[_0x365746(0xba9)]()[_0x365746(0x71b)];if(_0x341c19<0x0)_0x341c19=_0x55858a[_0x365746(0x746)]();$gameTemp[_0x365746(0x131)](_0x3a829d,_0x341c19,_0x4949a9),_0x157b49[_0x365746(0x6eb)]&&_0x53f0de[_0x365746(0x9c6)](_0x365746(0x1e0));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x967),_0x3e6e97=>{const _0x4ac3d3=_0x45d586;if(!SceneManager[_0x4ac3d3(0x81a)]())return;VisuMZ[_0x4ac3d3(0x536)](_0x3e6e97,_0x3e6e97);const _0x231123=$gameTemp[_0x4ac3d3(0x421)](),_0x566e77=BattleManager[_0x4ac3d3(0x1ce)],_0xc2515f=VisuMZ[_0x4ac3d3(0x552)](_0x3e6e97[_0x4ac3d3(0xba0)]),_0xc96449=_0x3e6e97[_0x4ac3d3(0xb58)],_0x476992=BattleManager['_logWindow'];if(!_0x231123||!_0x566e77)return;const _0x422639=_0x566e77[_0x4ac3d3(0x746)]();$gameTemp[_0x4ac3d3(0x131)](_0xc2515f,_0x422639,_0xc96449),_0x3e6e97[_0x4ac3d3(0x6eb)]&&_0x231123[_0x4ac3d3(0x9c6)](_0x4ac3d3(0x1e0));}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x57d),_0x423ceb=>{const _0x996619=_0x45d586;if(!SceneManager[_0x996619(0x81a)]())return;VisuMZ['ConvertParams'](_0x423ceb,_0x423ceb);const _0x351602=_0x1ec888['attackAnimationIdSlot'](_0x423ceb[_0x996619(0xa66)]);if(_0x351602<=0x0)return;const _0x1daa2c=$gameTemp['getLastPluginCommandInterpreter'](),_0x1ec888=BattleManager['_subject'],_0x1d31a5=VisuMZ[_0x996619(0x552)](_0x423ceb['Targets']),_0x165630=_0x423ceb[_0x996619(0xb58)],_0x23aef9=BattleManager[_0x996619(0x936)];if(!_0x1daa2c||!_0x1ec888)return;$gameTemp[_0x996619(0x131)](_0x1d31a5,_0x351602,_0x165630),_0x423ceb[_0x996619(0x6eb)]&&_0x1daa2c[_0x996619(0x9c6)](_0x996619(0x1e0));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x8c3),_0x1d35d1=>{const _0x39422d=_0x45d586;if(!SceneManager[_0x39422d(0x81a)]())return;VisuMZ[_0x39422d(0x536)](_0x1d35d1,_0x1d35d1);const _0xb05a3f=$gameTemp[_0x39422d(0x421)](),_0x4c5b4b=VisuMZ[_0x39422d(0x552)](_0x1d35d1['Targets']),_0x2bb7e7=_0x1d35d1[_0x39422d(0x435)];let _0x2159b1=0x0;switch(_0x2bb7e7[_0x39422d(0x689)]()[_0x39422d(0x379)]()){case'!':case _0x39422d(0x3e2):_0x2159b1=0x1;break;case'?':case _0x39422d(0xb05):_0x2159b1=0x2;break;case _0x39422d(0x777):case _0x39422d(0x7b9):case _0x39422d(0x9e8):case _0x39422d(0x8a7):case _0x39422d(0x7d1):_0x2159b1=0x3;break;case _0x39422d(0xa52):case _0x39422d(0x546):_0x2159b1=0x4;break;case _0x39422d(0xf3):case _0x39422d(0x9bd):_0x2159b1=0x5;break;case _0x39422d(0x1d5):_0x2159b1=0x6;break;case _0x39422d(0xa44):case _0x39422d(0x3f3):case _0x39422d(0x659):_0x2159b1=0x7;break;case'SILENCE':case'...':_0x2159b1=0x8;break;case _0x39422d(0x186):case'BULB':case _0x39422d(0xe8):case _0x39422d(0x6b2):case _0x39422d(0x83c):_0x2159b1=0x9;break;case'Z':case'ZZ':case _0x39422d(0x50f):case _0x39422d(0x934):_0x2159b1=0xa;break;case _0x39422d(0x26f):_0x2159b1=0xb;break;case _0x39422d(0x783):_0x2159b1=0xc;break;case _0x39422d(0x24d):_0x2159b1=0xd;break;case _0x39422d(0x3b4):_0x2159b1=0xe;break;case'USER-DEFINED\x205':_0x2159b1=0xf;break;}for(const _0x1b4ca6 of _0x4c5b4b){if(!_0x1b4ca6)continue;$gameTemp[_0x39422d(0x226)](_0x1b4ca6,_0x2159b1);}_0x1d35d1[_0x39422d(0x826)]&&_0xb05a3f&&(_0xb05a3f[_0x39422d(0x643)](0x1),_0xb05a3f[_0x39422d(0x9c6)]('battleBalloon'));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Animation_BalloonIcon',_0x4b8160=>{const _0x3256bf=_0x45d586;if(!SceneManager[_0x3256bf(0x81a)]())return;if(!Imported[_0x3256bf(0x57e)])return;VisuMZ[_0x3256bf(0x536)](_0x4b8160,_0x4b8160);const _0x21abcf=$gameTemp['getLastPluginCommandInterpreter'](),_0x1622a=VisuMZ[_0x3256bf(0x552)](_0x4b8160[_0x3256bf(0xba0)]),_0x3cbc38=_0x4b8160[_0x3256bf(0x479)];for(const _0x3307b2 of _0x1622a){if(!_0x3307b2)continue;$gameTemp['requestBattleBalloon'](_0x3307b2,[_0x3cbc38]);}_0x4b8160[_0x3256bf(0x826)]&&_0x21abcf&&(_0x21abcf[_0x3256bf(0x643)](0x1),_0x21abcf[_0x3256bf(0x9c6)](_0x3256bf(0x26d)));}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x8b8),_0x3b46fd=>{const _0x443523=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x443523(0x57e)])return;VisuMZ['ConvertParams'](_0x3b46fd,_0x3b46fd);const _0x106f84=$gameTemp[_0x443523(0x421)](),_0x5cb6b6=VisuMZ['CreateActionSequenceTargets'](_0x3b46fd[_0x443523(0xba0)]),_0x460238=Math[_0x443523(0xb4b)](Number(_0x3b46fd[_0x443523(0x4d8)]||0x0),Number(_0x3b46fd[_0x443523(0x6e5)]||0x0)),_0x453435=Math['max'](Number(_0x3b46fd[_0x443523(0x4d8)]||0x0),Number(_0x3b46fd['endIcon']||0x0)),_0x2d24da=[];for(let _0x5d10d3=_0x460238;_0x5d10d3<=_0x453435;_0x5d10d3++){_0x2d24da[_0x443523(0x119)](_0x5d10d3);}for(const _0x575a38 of _0x5cb6b6){if(!_0x575a38)continue;$gameTemp[_0x443523(0x226)](_0x575a38,_0x2d24da);}_0x3b46fd[_0x443523(0x826)]&&_0x106f84&&(_0x106f84[_0x443523(0x643)](0x1),_0x106f84[_0x443523(0x9c6)](_0x443523(0x26d)));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xa93),_0x233694=>{const _0x235011=_0x45d586;if(!SceneManager[_0x235011(0x81a)]())return;if(!Imported[_0x235011(0x57e)])return;VisuMZ['ConvertParams'](_0x233694,_0x233694);const _0x2d6828=$gameTemp['getLastPluginCommandInterpreter'](),_0x49451c=VisuMZ[_0x235011(0x552)](_0x233694[_0x235011(0xba0)]),_0x39ae23=_0x233694[_0x235011(0xad3)];for(const _0x316412 of _0x49451c){if(!_0x316412)continue;$gameTemp[_0x235011(0x226)](_0x316412,_0x39ae23);}_0x233694['WaitComplete']&&_0x2d6828&&(_0x2d6828['wait'](0x1),_0x2d6828[_0x235011(0x9c6)](_0x235011(0x26d)));}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],'ActSeq_Animation_CastAnimation',_0x43c551=>{const _0x18b1e2=_0x45d586;if(!SceneManager[_0x18b1e2(0x81a)]())return;VisuMZ[_0x18b1e2(0x536)](_0x43c551,_0x43c551);const _0x30f8b3=$gameTemp[_0x18b1e2(0x421)](),_0x5a49fb=BattleManager['_action'],_0x310269=_0x43c551[_0x18b1e2(0xb58)],_0x462ae4=VisuMZ[_0x18b1e2(0x552)](_0x43c551[_0x18b1e2(0xba0)]);if(!_0x30f8b3||!_0x5a49fb)return;if(!_0x5a49fb[_0x18b1e2(0xba9)]())return;for(const _0x5f086f of _0x462ae4){if(!_0x5f086f)continue;_0x5f086f['performCastAnimation'](_0x5a49fb,_0x310269);}if(_0x43c551[_0x18b1e2(0x6eb)])_0x30f8b3[_0x18b1e2(0x9c6)](_0x18b1e2(0x1e0));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xac1),_0x2519fe=>{const _0x3320f2=_0x45d586;VisuMZ[_0x3320f2(0x536)](_0x2519fe,_0x2519fe);const _0x4d824e=$gameTemp[_0x3320f2(0x421)](),_0xd665fb=VisuMZ[_0x3320f2(0x552)](_0x2519fe[_0x3320f2(0xba0)]),_0x168b6a=_0x2519fe[_0x3320f2(0x622)];if(!_0x168b6a)return;for(const _0x4ac972 of _0xd665fb){if(!_0x4ac972)continue;if(!_0x4ac972[_0x3320f2(0x7f0)]())continue;_0x4ac972['setBattlePortrait'](_0x168b6a);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x75d),_0x2609b9=>{const _0x2d1cd4=_0x45d586;VisuMZ[_0x2d1cd4(0x536)](_0x2609b9,_0x2609b9);const _0x244bc9=_0x2609b9[_0x2d1cd4(0x5e9)](),_0x5933ae=$gameActors[_0x2d1cd4(0xb77)](_0x244bc9)||null;if(!_0x5933ae){console[_0x2d1cd4(0x833)](_0x2d1cd4(0x549));return;}const _0xf857fd=_0x2609b9['FilenameJS']();_0x5933ae[_0x2d1cd4(0xacb)](_0xf857fd);}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],'ActSeq_Animation_GuardAnimation',_0x515646=>{const _0x338cad=_0x45d586;if(!SceneManager[_0x338cad(0x81a)]())return;VisuMZ[_0x338cad(0x536)](_0x515646,_0x515646);const _0x447f97=$gameTemp[_0x338cad(0x421)](),_0x411e4a=BattleManager[_0x338cad(0x1ce)],_0x4d96d8=VisuMZ[_0x338cad(0x552)](_0x515646[_0x338cad(0xba0)]),_0x5a9dab=_0x515646['Mirror'];if(!_0x447f97||!_0x411e4a)return;const _0x3bce19=$dataSkilles[_0x411e4a[_0x338cad(0x1cc)]()],_0x4af036=_0x3bce19[_0x338cad(0x71b)];$gameTemp[_0x338cad(0x131)](_0x4d96d8,_0x4af036,_0x5a9dab),_0x515646['WaitForAnimation']&&_0x447f97['setWaitMode']('battleAnimation');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x93a),_0xb4f109=>{const _0x339d55=_0x45d586;if(!SceneManager[_0x339d55(0x81a)]())return;VisuMZ[_0x339d55(0x536)](_0xb4f109,_0xb4f109);const _0x4fefd6=$gameTemp[_0x339d55(0x421)](),_0x4ca2a5=VisuMZ[_0x339d55(0x552)](_0xb4f109[_0x339d55(0xba0)]),_0x5c2bfd=Number(_0xb4f109['ItemID']||0x1),_0x103f4d=$dataItems[_0x5c2bfd],_0x445b08=_0xb4f109['Mirror'];if(!_0x4fefd6)return;if(!_0x103f4d)return;let _0x23df01=_0x103f4d[_0x339d55(0x71b)];$gameTemp[_0x339d55(0x131)](_0x4ca2a5,_0x23df01,_0x445b08),_0xb4f109[_0x339d55(0x6eb)]&&_0x4fefd6[_0x339d55(0x9c6)](_0x339d55(0x1e0));}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x620),_0x150c39=>{const _0x2d1204=_0x45d586;if(!SceneManager['_scene'])return;if(!SceneManager[_0x2d1204(0x4f4)]['_spriteset'])return;if(!Imported[_0x2d1204(0xbc5)])return;VisuMZ[_0x2d1204(0x536)](_0x150c39,_0x150c39);const _0x5f45e2=$gameTemp[_0x2d1204(0x421)](),_0x353254=Math['round'](_0x150c39[_0x2d1204(0x58a)]),_0x2ee5e2=Math['round'](_0x150c39['pointY']);$gameTemp['requestPointAnimation'](_0x353254,_0x2ee5e2,_0x150c39[_0x2d1204(0x163)],_0x150c39[_0x2d1204(0xb58)],_0x150c39[_0x2d1204(0x49f)]),_0x150c39[_0x2d1204(0x826)]&&_0x5f45e2&&(SceneManager[_0x2d1204(0x4f4)][_0x2d1204(0x992)]['updatePointAnimations'](),_0x5f45e2['setWaitMode'](_0x2d1204(0x1e0)));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x3c0),_0xd51548=>{const _0x3e9ef3=_0x45d586;if(!SceneManager[_0x3e9ef3(0x81a)]())return;VisuMZ[_0x3e9ef3(0x536)](_0xd51548,_0xd51548);const _0x20cefb=$gameTemp[_0x3e9ef3(0x421)](),_0x2e20c4=VisuMZ[_0x3e9ef3(0x552)](_0xd51548[_0x3e9ef3(0xba0)]),_0x10c29b=_0xd51548[_0x3e9ef3(0x163)],_0x44b6b4=_0xd51548[_0x3e9ef3(0xb58)];if(!_0x20cefb)return;$gameTemp[_0x3e9ef3(0x131)](_0x2e20c4,_0x10c29b,_0x44b6b4);if(_0xd51548[_0x3e9ef3(0x6eb)])_0x20cefb[_0x3e9ef3(0x9c6)]('battleAnimation');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xbeb),_0x339540=>{const _0x148f98=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x148f98(0x536)](_0x339540,_0x339540);const _0x1c8b65=$gameTemp[_0x148f98(0x421)](),_0x30bb9b=VisuMZ[_0x148f98(0x552)](_0x339540['Targets']),_0x54f91c=Number(_0x339540[_0x148f98(0x163)])||0x1,_0x12d47e=_0x339540[_0x148f98(0xb58)];if(!_0x1c8b65)return;$gameTemp[_0x148f98(0x131)](_0x30bb9b,_0x54f91c,_0x12d47e);if(_0x339540[_0x148f98(0x6eb)])_0x1c8b65[_0x148f98(0x9c6)](_0x148f98(0x1e0));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Animation_SkillAnimation',_0x50757a=>{const _0x24b623=_0x45d586;if(!SceneManager[_0x24b623(0x81a)]())return;VisuMZ[_0x24b623(0x536)](_0x50757a,_0x50757a);const _0xf41839=$gameTemp[_0x24b623(0x421)](),_0x3c45e8=VisuMZ[_0x24b623(0x552)](_0x50757a[_0x24b623(0xba0)]),_0x5db7d0=Number(_0x50757a[_0x24b623(0xfe)]||0x1),_0x5db81e=$dataSkills[_0x5db7d0],_0x120376=_0x50757a['Mirror'];if(!_0xf41839)return;if(!_0x5db81e)return;let _0x5d131d=_0x5db81e[_0x24b623(0x71b)];$gameTemp[_0x24b623(0x131)](_0x3c45e8,_0x5d131d,_0x120376),_0x50757a[_0x24b623(0x6eb)]&&_0xf41839[_0x24b623(0x9c6)](_0x24b623(0x1e0));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Animation_WaitForAnimation',_0x4a8496=>{const _0x833a8a=_0x45d586;if(!SceneManager[_0x833a8a(0x81a)]())return;const _0x26ca62=$gameTemp[_0x833a8a(0x421)]();if(!_0x26ca62)return;_0x26ca62[_0x833a8a(0x9c6)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x109),_0x5477b2=>{const _0x2296e8=_0x45d586;if(!SceneManager[_0x2296e8(0x81a)]())return;VisuMZ[_0x2296e8(0x536)](_0x5477b2,_0x5477b2);const _0xb0d7ca=BattleManager['_logWindow'],_0x3da41b=_0x5477b2['CopyCombatLog']&&Imported[_0x2296e8(0x281)];_0xb0d7ca[_0x2296e8(0x53b)](_0x5477b2[_0x2296e8(0x6a0)]),_0x3da41b&&Imported[_0x2296e8(0x281)]&&$gameSystem[_0x2296e8(0x88e)](_0x5477b2[_0x2296e8(0x6a0)]||'',_0x5477b2[_0x2296e8(0x57c)]||0x0);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x2d3),_0x599054=>{const _0x59f4c0=_0x45d586;if(!SceneManager[_0x59f4c0(0x81a)]())return;const _0x303393=BattleManager[_0x59f4c0(0x936)];_0x303393['clear']();}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x569),_0x18d25c=>{const _0x2775d=_0x45d586;if(!SceneManager[_0x2775d(0x81a)]())return;const _0x68ee21=$gameTemp[_0x2775d(0x421)](),_0x257f5a=BattleManager[_0x2775d(0x9e9)],_0xe6c9f=BattleManager[_0x2775d(0x1ce)],_0x781da9=BattleManager[_0x2775d(0x936)];if(!_0x68ee21||!_0x257f5a||!_0xe6c9f)return;if(!_0x257f5a[_0x2775d(0xba9)]())return;_0x781da9[_0x2775d(0x950)](_0xe6c9f,_0x257f5a[_0x2775d(0xba9)]()),_0x68ee21[_0x2775d(0x9c6)](_0x2775d(0x9d8));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x583),_0x22fe65=>{const _0x4159b8=_0x45d586;if(!SceneManager[_0x4159b8(0x81a)]())return;const _0x290519=BattleManager[_0x4159b8(0x936)];_0x290519['popBaseLine']();}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x88c),_0x4abaa7=>{const _0x274289=_0x45d586;if(!SceneManager[_0x274289(0x81a)]())return;const _0x3bdb85=BattleManager[_0x274289(0x936)];_0x3bdb85[_0x274289(0x787)]();}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x27d),_0x4f38f2=>{const _0x33b307=_0x45d586;if(!SceneManager[_0x33b307(0x81a)]())return;const _0xfadd9d=BattleManager[_0x33b307(0x936)];_0xfadd9d['refresh']();}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x96e),_0x23d910=>{const _0x43023e=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x43023e(0x536)](_0x23d910,_0x23d910),SceneManager[_0x43023e(0x4f4)][_0x43023e(0x60d)](_0x23d910[_0x43023e(0xabd)]);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x9d7),_0x140c92=>{const _0x41c98e=_0x45d586;if(!SceneManager['isSceneBattle']())return;const _0x286cc3=$gameTemp[_0x41c98e(0x421)]();_0x286cc3[_0x41c98e(0x9c6)]('battlelog');}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0xbe2),_0x7fbf8f=>{const _0x36cf0e=_0x45d586;if(!SceneManager[_0x36cf0e(0x81a)]())return;const _0x1ddd8b=$gameTemp[_0x36cf0e(0x421)](),_0x5f37f0=BattleManager['_logWindow'];_0x5f37f0[_0x36cf0e(0x572)](),_0x1ddd8b[_0x36cf0e(0x9c6)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],'ActSeq_Camera_Clamp',_0x3d493b=>{const _0x19c7e9=_0x45d586;if(!SceneManager[_0x19c7e9(0x81a)]())return;if(!Imported[_0x19c7e9(0x2ff)])return;VisuMZ[_0x19c7e9(0x536)](_0x3d493b,_0x3d493b);const _0x58435b=$gameScreen[_0x19c7e9(0x378)]();_0x58435b[_0x19c7e9(0x25f)]=_0x3d493b[_0x19c7e9(0xb08)];}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0xbb0),_0x59aa09=>{const _0x4335be=_0x45d586;if(!SceneManager[_0x4335be(0x81a)]())return;if(!Imported[_0x4335be(0x2ff)])return;VisuMZ[_0x4335be(0x536)](_0x59aa09,_0x59aa09);const _0x23b336=$gameTemp[_0x4335be(0x421)](),_0x2e5073=_0x59aa09[_0x4335be(0x60b)];$gameScreen['setBattleCameraPoint'](_0x59aa09[_0x4335be(0xa39)],_0x59aa09['FocusY'],_0x59aa09['Duration'],_0x59aa09[_0x4335be(0xb1d)]);if(_0x2e5073)_0x23b336[_0x4335be(0x9c6)]('battleCamera');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Camera_FocusTarget',_0x3df10a=>{const _0x53ec31=_0x45d586;if(!SceneManager[_0x53ec31(0x81a)]())return;if(!Imported[_0x53ec31(0x2ff)])return;VisuMZ[_0x53ec31(0x536)](_0x3df10a,_0x3df10a);const _0xbb3652=$gameTemp[_0x53ec31(0x421)](),_0x4d464c=VisuMZ[_0x53ec31(0x552)](_0x3df10a[_0x53ec31(0xba0)]),_0x2a3588=_0x3df10a['WaitForCamera'];$gameScreen[_0x53ec31(0x599)](_0x4d464c,_0x3df10a[_0x53ec31(0x7de)],_0x3df10a[_0x53ec31(0xb1d)]);if(_0x2a3588)_0xbb3652['setWaitMode']('battleCamera');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x835),_0xfbacc1=>{const _0xf5170d=_0x45d586;if(!SceneManager[_0xf5170d(0x81a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0xf5170d(0x536)](_0xfbacc1,_0xfbacc1);const _0x4f0be9=$gameTemp['getLastPluginCommandInterpreter'](),_0x4f9f92=_0xfbacc1['WaitForCamera'];$gameScreen['setBattleCameraOffset'](_0xfbacc1[_0xf5170d(0x34f)],_0xfbacc1[_0xf5170d(0x261)],_0xfbacc1[_0xf5170d(0x7de)],_0xfbacc1['EasingType']);if(_0x4f9f92)_0x4f0be9['setWaitMode'](_0xf5170d(0xad7));}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x322),_0x48efd5=>{const _0x38fd12=_0x45d586;if(!SceneManager[_0x38fd12(0x81a)]())return;if(!Imported[_0x38fd12(0x2ff)])return;VisuMZ[_0x38fd12(0x536)](_0x48efd5,_0x48efd5);const _0x3aba7f=$gameTemp[_0x38fd12(0x421)](),_0x259b04=_0x48efd5[_0x38fd12(0x68c)],_0x3cd42e=_0x48efd5[_0x38fd12(0x8c4)],_0x40576e=_0x48efd5['WaitForCamera'];if(_0x259b04){const _0x16b796=Math[_0x38fd12(0x31d)](Graphics[_0x38fd12(0x7ea)]/0x2),_0x396776=Math['round'](Graphics[_0x38fd12(0x6ac)]/0x2);$gameScreen[_0x38fd12(0x1d0)](_0x16b796,_0x396776,_0x48efd5[_0x38fd12(0x7de)],_0x48efd5[_0x38fd12(0xb1d)]);}_0x3cd42e&&$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x48efd5[_0x38fd12(0x7de)],_0x48efd5['EasingType']);if(_0x40576e)_0x3aba7f['setWaitMode']('battleCamera');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Camera_WaitForCamera',_0x16658a=>{const _0x36f8dd=_0x45d586;if(!SceneManager[_0x36f8dd(0x81a)]())return;if(!Imported[_0x36f8dd(0x2ff)])return;const _0x5246a3=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5246a3)return;_0x5246a3['setWaitMode']('battleCamera');}),VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x6b8)]=function(_0x53c876){const _0x122f9a=_0x45d586;_0x53c876[_0x122f9a(0x183)]='';const _0x5267ff=VisuMZ[_0x122f9a(0x2e2)][_0x122f9a(0x6b8)](_0x53c876),_0x13a97a=VisuMZ[_0x122f9a(0x552)](_0x53c876['Targets'])[0x0]||null;return _0x13a97a&&(_0x5267ff[_0x122f9a(0x183)]=_0x13a97a[_0x122f9a(0xa4e)](),_0x5267ff[_0x122f9a(0x9b0)]=_0x13a97a[_0x122f9a(0x126)](),_0x5267ff[_0x122f9a(0x9f4)]=_0x13a97a[_0x122f9a(0x888)](),_0x5267ff['portraitType']=_0x13a97a[_0x122f9a(0xaf7)](),_0x13a97a[_0x122f9a(0x690)]()&&(_0x13a97a['flipVisualCutinHorz']()&&(_0x5267ff['portraitFlipHorz']=!_0x5267ff['portraitFlipHorz']),_0x13a97a[_0x122f9a(0xa21)]()&&(_0x5267ff[_0x122f9a(0x272)]=!_0x5267ff[_0x122f9a(0x272)]),_0x5267ff['portraitType']==='svActor'&&(_0x5267ff[_0x122f9a(0xb44)]=!_0x5267ff[_0x122f9a(0xb44)]),_0x53c876[_0x122f9a(0x10d)][_0x122f9a(0x189)]&&(_0x5267ff['parallaxScrollX']*=-0x1),_0x53c876[_0x122f9a(0x10d)][_0x122f9a(0x1ad)]&&(_0x5267ff['parallaxScrollY']*=-0x1),_0x5267ff['parallaxHue']+=_0x53c876['ExtraSettings'][_0x122f9a(0x830)]??0x0)),_0x5267ff;},PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Cutin_AddVisualCutinEffect',_0x1ae756=>{const _0xce086b=_0x45d586;if(!SceneManager[_0xce086b(0x81a)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0xce086b(0x536)](_0x1ae756,_0x1ae756);const _0x59cd03=VisuMZ['BattleCore'][_0xce086b(0x6b8)](_0x1ae756);SceneManager['_scene']['startVisualCutin'](_0x59cd03);const _0x10810a=$gameTemp[_0xce086b(0x421)]();_0x10810a&&_0x1ae756[_0xce086b(0xb01)]&&_0x10810a[_0xce086b(0x9c6)](_0xce086b(0xe7));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x97f),_0x207630=>{const _0x436cd2=_0x45d586;if(!SceneManager[_0x436cd2(0x81a)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x436cd2(0x536)](_0x207630,_0x207630),SceneManager[_0x436cd2(0x4f4)]['clearAllVisualCutins']();const _0x179fcb=$gameTemp[_0x436cd2(0x421)]();_0x179fcb&&_0x207630[_0x436cd2(0x935)]&&_0x179fcb['setWaitMode'](_0x436cd2(0xb91));}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x352),_0x3145d1=>{const _0x5b3e94=_0x45d586;if(!SceneManager[_0x5b3e94(0x81a)]())return;if(!Imported[_0x5b3e94(0x3ed)])return;VisuMZ['ConvertParams'](_0x3145d1,_0x3145d1);const _0x58fe60=_0x3145d1[_0x5b3e94(0x267)][_0x5b3e94(0x2ab)]()['trim']();SceneManager[_0x5b3e94(0x4f4)][_0x5b3e94(0xb07)](_0x58fe60);const _0x127489=$gameTemp['getLastPluginCommandInterpreter']();_0x127489&&_0x3145d1['WaitForExit']&&_0x127489[_0x5b3e94(0x9c6)](_0x5b3e94(0xb91));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x8c5),_0x37e1d5=>{const _0x360609=_0x45d586;if(!SceneManager[_0x360609(0x81a)]())return;if(!Imported[_0x360609(0x3ed)])return;const _0x2f4bf5=$gameTemp[_0x360609(0x421)]();_0x2f4bf5['setWaitMode'](_0x360609(0xe7));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x2de),_0x4b9b55=>{const _0x1cb6b0=_0x45d586;if(!SceneManager[_0x1cb6b0(0x81a)]())return;if(!Imported[_0x1cb6b0(0x3ed)])return;const _0x3a74cc=$gameTemp[_0x1cb6b0(0x421)]();_0x3a74cc[_0x1cb6b0(0x9c6)]('cutinExit');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_DB_DragonbonesMotionAni',_0x40c88d=>{const _0x1ef8d5=_0x45d586;if(!SceneManager[_0x1ef8d5(0x81a)]())return;if(!Imported[_0x1ef8d5(0xb21)])return;VisuMZ[_0x1ef8d5(0x536)](_0x40c88d,_0x40c88d);const _0x78991=VisuMZ[_0x1ef8d5(0x552)](_0x40c88d[_0x1ef8d5(0xba0)]),_0x3ccb91=_0x40c88d[_0x1ef8d5(0x221)][_0x1ef8d5(0x2ab)]()[_0x1ef8d5(0x379)]();for(const _0x65fc83 of _0x78991){if(!_0x65fc83)continue;_0x65fc83[_0x1ef8d5(0x4d1)](_0x3ccb91);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_DB_DragonbonesTimeScale',_0x34106b=>{const _0x1c8003=_0x45d586;if(!SceneManager[_0x1c8003(0x81a)]())return;if(!Imported[_0x1c8003(0xb21)])return;VisuMZ[_0x1c8003(0x536)](_0x34106b,_0x34106b);const _0x4947cd=VisuMZ[_0x1c8003(0x552)](_0x34106b['Targets']),_0x1c8b84=_0x34106b[_0x1c8003(0x5de)];for(const _0x103f7c of _0x4947cd){if(!_0x103f7c)continue;_0x103f7c[_0x1c8003(0x113)]()['timeScale']=_0x1c8b84;}}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x1cb),_0x3c8764=>{const _0x192041=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x192041(0x9f9)])return;VisuMZ[_0x192041(0x536)](_0x3c8764,_0x3c8764);const _0x91dd96=BattleManager[_0x192041(0x9e9)],_0x312b33=_0x3c8764[_0x192041(0x59a)];if(!_0x91dd96)return;_0x91dd96[_0x192041(0x99c)]=_0x312b33;}),PluginManager['registerCommand'](pluginData['name'],_0x45d586(0x9b7),_0x4d429d=>{const _0x459b48=_0x45d586;if(!SceneManager[_0x459b48(0x81a)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x2a5325=BattleManager[_0x459b48(0x9e9)];if(!_0x2a5325)return;_0x2a5325[_0x459b48(0x448)]();}),PluginManager[_0x45d586(0xb11)](pluginData['name'],'ActSeq_Element_ForceElements',_0x3cac13=>{const _0x5a5594=_0x45d586;if(!SceneManager[_0x5a5594(0x81a)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x5a5594(0x536)](_0x3cac13,_0x3cac13);const _0x1faef0=BattleManager[_0x5a5594(0x9e9)],_0x5bbc0c=_0x3cac13[_0x5a5594(0x59a)];if(!_0x1faef0)return;_0x1faef0['_battleCoreForcedElements']=_0x5bbc0c;}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x2cd),_0x1ef3a2=>{const _0x30911e=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x30911e(0x9f9)])return;const _0xc1ce7c=BattleManager['_action'];if(!_0xc1ce7c)return;_0xc1ce7c['_battleCoreNoElement']=!![];}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x64f),_0x47e30c=>{const _0x1444d6=_0x45d586;VisuMZ[_0x1444d6(0x895)][_0x1444d6(0x64f)](_0x47e30c);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Grid_AddPassiveStatesToNode',_0x52f8f6=>{const _0x5d5b3d=_0x45d586;VisuMZ[_0x5d5b3d(0x895)][_0x5d5b3d(0xb34)](_0x52f8f6);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x76d),_0x316c04=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_AddTriggerToNode'](_0x316c04);}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x24c),_0x4d7b2e=>{const _0xf921fc=_0x45d586;VisuMZ[_0xf921fc(0x895)][_0xf921fc(0x76d)](_0x4d7b2e);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x5af),_0x4dbc87=>{const _0x496991=_0x45d586;VisuMZ[_0x496991(0x895)][_0x496991(0x5af)](_0x4dbc87);}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],'ActSeq_Grid_AnimationJsAtNode',_0x5121f5=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_AnimationJsAtNode'](_0x5121f5);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Grid_AnimationTypeAtNode',_0x4c42c6=>{const _0x2cc917=_0x45d586;VisuMZ[_0x2cc917(0x895)]['ActSeq_Grid_AnimationTypeAtNode'](_0x4c42c6);}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x21a),_0x29a705=>{const _0x3af2f1=_0x45d586;VisuMZ['BattleGridSystem'][_0x3af2f1(0x21a)](_0x29a705);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],'ActSeq_Grid_MoveTargetsInDirection',_0x3ef858=>{const _0x379f29=_0x45d586;VisuMZ[_0x379f29(0x895)][_0x379f29(0x600)](_0x3ef858);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xbd5),_0x4449b2=>{const _0x2c6629=_0x45d586;VisuMZ[_0x2c6629(0x895)]['ActSeq_Grid_PullToTargetNode'](_0x4449b2);}),PluginManager['registerCommand'](pluginData['name'],_0x45d586(0x36f),_0x131f6d=>{const _0x150ede=_0x45d586;VisuMZ[_0x150ede(0x895)][_0x150ede(0x36f)](_0x131f6d);}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x8ce),_0x50cd69=>{const _0x20f6bd=_0x45d586;VisuMZ[_0x20f6bd(0x895)]['ActSeq_Grid_RemovePassiveStatesFromNode'](_0x50cd69);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x88d),_0x21815a=>{const _0x47aedf=_0x45d586;VisuMZ[_0x47aedf(0x895)]['ActSeq_Grid_RemoveTriggerFromNode'](_0x21815a);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x72f),_0x1c7c5f=>{const _0x2b9e71=_0x45d586;VisuMZ['BattleGridSystem'][_0x2b9e71(0x72f)](_0x1c7c5f);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x5c7),_0x4d7978=>{const _0x3e058c=_0x45d586;VisuMZ[_0x3e058c(0x895)][_0x3e058c(0x5c7)](_0x4d7978);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x974),_0x5391b2=>{const _0x1a533b=_0x45d586;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x1a533b(0x81a)]())return;VisuMZ[_0x1a533b(0x536)](_0x5391b2,_0x5391b2);const _0x28181d=VisuMZ[_0x1a533b(0x552)](_0x5391b2['Targets']);for(const _0x4eee8e of _0x28181d){if(!_0x4eee8e)continue;_0x4eee8e[_0x1a533b(0x382)](_0x1a533b(0x419)),_0x4eee8e[_0x1a533b(0x382)](_0x1a533b(0x2d8)),_0x4eee8e['removeHorrorEffect']('tv'),_0x4eee8e[_0x1a533b(0x3ec)]();}$gamePlayer['refresh']();}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x3c4),_0x103d46=>{const _0x4a664f=_0x45d586;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x4a664f(0x81a)]())return;VisuMZ['ConvertParams'](_0x103d46,_0x103d46);const _0x4d9c28=VisuMZ[_0x4a664f(0x552)](_0x103d46[_0x4a664f(0xba0)]),_0x2b1e0c=_0x4a664f(0x2d8);_0x103d46[_0x4a664f(0x5d6)]=Math[_0x4a664f(0xb32)](_0x103d46[_0x4a664f(0xaf2)]/0x2),_0x103d46[_0x4a664f(0xb18)]=_0x103d46[_0x4a664f(0xaf2)],_0x103d46[_0x4a664f(0x741)]=!![];for(const _0x385bef of _0x4d9c28){if(!_0x385bef)continue;_0x385bef['setHorrorEffectSettings'](_0x2b1e0c,_0x103d46);}$gamePlayer[_0x4a664f(0x291)]();}),PluginManager['registerCommand'](pluginData['name'],_0x45d586(0x66d),_0x4712a5=>{const _0x329d53=_0x45d586;if(!Imported[_0x329d53(0x7f4)])return;if(!SceneManager[_0x329d53(0x81a)]())return;VisuMZ[_0x329d53(0x536)](_0x4712a5,_0x4712a5);const _0x570fa0=VisuMZ['CreateActionSequenceTargets'](_0x4712a5[_0x329d53(0xba0)]);for(const _0x4eed58 of _0x570fa0){if(!_0x4eed58)continue;_0x4eed58[_0x329d53(0x382)](_0x329d53(0x2d8));}$gamePlayer[_0x329d53(0x291)]();}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0xa90),_0x509566=>{const _0x5bdc34=_0x45d586;if(!Imported[_0x5bdc34(0x7f4)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5bdc34(0x536)](_0x509566,_0x509566);const _0x48c5f8=VisuMZ[_0x5bdc34(0x552)](_0x509566[_0x5bdc34(0xba0)]),_0xc4c7dc=_0x5bdc34(0x419);for(const _0x314844 of _0x48c5f8){if(!_0x314844)continue;_0x314844[_0x5bdc34(0x65a)](_0xc4c7dc,_0x509566);}$gamePlayer[_0x5bdc34(0x291)]();}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0xab3),_0x445e04=>{const _0x3d8554=_0x45d586;if(!Imported[_0x3d8554(0x7f4)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3d8554(0x536)](_0x445e04,_0x445e04);const _0x111b59=VisuMZ['CreateActionSequenceTargets'](_0x445e04[_0x3d8554(0xba0)]);for(const _0x277c5c of _0x111b59){if(!_0x277c5c)continue;_0x277c5c['removeHorrorEffect']('noise');}$gamePlayer[_0x3d8554(0x291)]();}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0xbe8),_0x3c3676=>{const _0x76fc49=_0x45d586;if(!Imported[_0x76fc49(0x7f4)])return;if(!SceneManager[_0x76fc49(0x81a)]())return;VisuMZ['ConvertParams'](_0x3c3676,_0x3c3676);const _0x39bd23=VisuMZ['CreateActionSequenceTargets'](_0x3c3676['Targets']),_0xc06b52='tv';for(const _0x3f8846 of _0x39bd23){if(!_0x3f8846)continue;_0x3f8846[_0x76fc49(0x65a)](_0xc06b52,_0x3c3676);}$gamePlayer[_0x76fc49(0x291)]();}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Horror_TVRemove',_0x395dfb=>{const _0xb138f8=_0x45d586;if(!Imported[_0xb138f8(0x7f4)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xb138f8(0x536)](_0x395dfb,_0x395dfb);const _0x3e4251=VisuMZ['CreateActionSequenceTargets'](_0x395dfb[_0xb138f8(0xba0)]);for(const _0x5f37b6 of _0x3e4251){if(!_0x5f37b6)continue;_0x5f37b6[_0xb138f8(0x382)]('tv');}$gamePlayer[_0xb138f8(0x291)]();}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x792),_0x43cc2d=>{const _0x4fd095=_0x45d586;if(!Imported[_0x4fd095(0x79a)])return;const _0x34efa2=SceneManager[_0x4fd095(0x4f4)][_0x4fd095(0x992)];if(!_0x34efa2)return;if(VisuMZ['ActSeqImpact'][_0x4fd095(0x23e)]<=1.04){alert(_0x4fd095(0x4e4)),SceneManager[_0x4fd095(0x16f)]();return;}VisuMZ['ConvertParams'](_0x43cc2d,_0x43cc2d);const _0x5b1ccb=_0x43cc2d[_0x4fd095(0x8fa)];_0x34efa2[_0x4fd095(0x931)](_0x5b1ccb);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0xbc8),_0x4397b8=>{const _0x2d2f8f=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2d2f8f(0x79a)])return;const _0x346d30=SceneManager['_scene'][_0x2d2f8f(0x992)];if(!_0x346d30)return;VisuMZ['ConvertParams'](_0x4397b8,_0x4397b8);const _0x1596fe=_0x4397b8[_0x2d2f8f(0xb5f)]||0x1,_0x34bfc4=_0x4397b8[_0x2d2f8f(0x7de)]||0x1,_0x25e970=_0x4397b8['EasingType']||'Linear';_0x346d30[_0x2d2f8f(0x15e)](_0x1596fe,_0x34bfc4,_0x25e970);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xadd),_0x37afcb=>{const _0x56a21e=_0x45d586;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4483c2=SceneManager[_0x56a21e(0x4f4)][_0x56a21e(0x992)];if(!_0x4483c2)return;if(VisuMZ['ActSeqImpact'][_0x56a21e(0x23e)]<=1.04){alert(_0x56a21e(0x4e4)),SceneManager['exit']();return;}VisuMZ[_0x56a21e(0x536)](_0x37afcb,_0x37afcb);const _0x509fd0=_0x37afcb[_0x56a21e(0x8fa)];_0x4483c2[_0x56a21e(0x730)](_0x509fd0);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x2a5),_0x5d2a70=>{const _0x4125f6=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4125f6(0x79a)])return;const _0x29008e=SceneManager['_scene'][_0x4125f6(0x992)];if(!_0x29008e)return;VisuMZ[_0x4125f6(0x536)](_0x5d2a70,_0x5d2a70);const _0x2df380=Number(_0x5d2a70[_0x4125f6(0xbde)])||0x0,_0x467ac3=Number(_0x5d2a70['Rate']),_0x30e64f=_0x5d2a70[_0x4125f6(0x7de)]||0x1,_0x358f1a=_0x5d2a70['EasingType']||'Linear';_0x29008e[_0x4125f6(0xa80)](_0x2df380,_0x467ac3,_0x30e64f,_0x358f1a);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xa81),_0x21c57c=>{const _0x31cb69=_0x45d586;if(!SceneManager[_0x31cb69(0x81a)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x23b8f8=SceneManager['_scene']['_spriteset'];if(!_0x23b8f8)return;VisuMZ[_0x31cb69(0x536)](_0x21c57c,_0x21c57c);const _0x344ea8=Number(_0x21c57c[_0x31cb69(0xbde)])||0x0,_0x42c056=Number(_0x21c57c[_0x31cb69(0x19a)]),_0xe133e0=_0x21c57c['Duration']||0x1,_0xfbcfd=_0x21c57c[_0x31cb69(0xb1d)]||_0x31cb69(0xa8e),_0x47fcd8=VisuMZ['CreateActionSequenceTargets'](_0x21c57c['Targets']);for(const _0x4fc027 of _0x47fcd8){if(!_0x4fc027)continue;if(!_0x4fc027['battler']())continue;_0x4fc027['battler']()[_0x31cb69(0xa80)](_0x344ea8,_0x42c056,_0xe133e0,_0xfbcfd);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x243),_0x1621c1=>{const _0x14b82a=_0x45d586;if(!SceneManager[_0x14b82a(0x81a)]())return;if(!Imported[_0x14b82a(0x79a)])return;VisuMZ[_0x14b82a(0x536)](_0x1621c1,_0x1621c1);const _0x2bdafa={'delay':_0x1621c1[_0x14b82a(0x37d)],'duration':_0x1621c1[_0x14b82a(0x8fc)],'hue':_0x1621c1[_0x14b82a(0x9ec)],'opacityStart':_0x1621c1[_0x14b82a(0x4b9)],'tone':_0x1621c1[_0x14b82a(0x4ba)],'visible':!![]},_0xf589d0=VisuMZ['CreateActionSequenceTargets'](_0x1621c1['Targets']);for(const _0x1d48fb of _0xf589d0){if(!_0x1d48fb)continue;_0x1d48fb[_0x14b82a(0xb1f)](_0x2bdafa);}}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x55a),_0x195c15=>{const _0x2a2f89=_0x45d586;if(!SceneManager[_0x2a2f89(0x81a)]())return;if(!Imported[_0x2a2f89(0x79a)])return;VisuMZ[_0x2a2f89(0x536)](_0x195c15,_0x195c15);const _0x3f9c0a=VisuMZ[_0x2a2f89(0x552)](_0x195c15[_0x2a2f89(0xba0)]);for(const _0x39fd44 of _0x3f9c0a){if(!_0x39fd44)continue;_0x39fd44[_0x2a2f89(0x30f)]();}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x709),_0x20f4e5=>{const _0x1f8221=_0x45d586;if(!Imported[_0x1f8221(0x79a)])return;const _0x2c92db=SceneManager[_0x1f8221(0x4f4)]['_spriteset'];if(!_0x2c92db)return;if(VisuMZ[_0x1f8221(0x1af)][_0x1f8221(0x23e)]<=1.04){alert(_0x1f8221(0x4e4)),SceneManager['exit']();return;}VisuMZ[_0x1f8221(0x536)](_0x20f4e5,_0x20f4e5);const _0x1dd2ec=_0x20f4e5[_0x1f8221(0x8fa)];_0x2c92db[_0x1f8221(0x43f)](_0x1dd2ec);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x65f),_0x48ab38=>{const _0xac73a7=_0x45d586;if(!Imported[_0xac73a7(0x79a)])return;const _0x129c66=SceneManager[_0xac73a7(0x4f4)][_0xac73a7(0x992)];if(!_0x129c66)return;if(VisuMZ[_0xac73a7(0x1af)][_0xac73a7(0x23e)]<=1.04){alert(_0xac73a7(0x4e4)),SceneManager['exit']();return;}VisuMZ[_0xac73a7(0x536)](_0x48ab38,_0x48ab38);const _0x4c0b7b=_0x48ab38[_0xac73a7(0x8fa)];_0x129c66[_0xac73a7(0x98e)](_0x4c0b7b);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x634),_0x230b67=>{const _0x3e081d=_0x45d586;if(!Imported[_0x3e081d(0x79a)])return;const _0x18cbce=SceneManager[_0x3e081d(0x4f4)][_0x3e081d(0x992)];if(!_0x18cbce)return;VisuMZ['ConvertParams'](_0x230b67,_0x230b67);const _0x5970dc=_0x230b67['X']||0x0,_0x1ef771=_0x230b67['Y']||0x0,_0x2c0dae=_0x230b67[_0x3e081d(0x3f7)]||0x0,_0x26afe2=_0x230b67[_0x3e081d(0x7c0)]||0x0,_0x5bdb9b=_0x230b67[_0x3e081d(0x7de)]||0x1;_0x18cbce[_0x3e081d(0xb80)](_0x5970dc,_0x1ef771,_0x2c0dae,_0x26afe2,_0x5bdb9b);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x5b2),_0x37cc4e=>{const _0x446d8d=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x446d8d(0x79a)])return;const _0x54c306=SceneManager['_scene']['_spriteset'];if(!_0x54c306)return;VisuMZ[_0x446d8d(0x536)](_0x37cc4e,_0x37cc4e);const _0x5661a2=VisuMZ['CreateActionSequenceTargets'](_0x37cc4e[_0x446d8d(0xba0)]),_0x488a53=_0x37cc4e[_0x446d8d(0x4c9)],_0x317126=_0x37cc4e[_0x446d8d(0x34f)]||0x0,_0x57f1a6=_0x37cc4e[_0x446d8d(0x261)]||0x0,_0x4fd3e5=_0x37cc4e[_0x446d8d(0x3f7)]||0x0,_0x1d0c22=_0x37cc4e[_0x446d8d(0x7c0)]||0x0,_0x347d2a=_0x37cc4e['Duration']||0x1;for(const _0x208b0a of _0x5661a2){if(!_0x208b0a)continue;if(!_0x208b0a[_0x446d8d(0xa7b)]())continue;const _0x3353be=_0x208b0a[_0x446d8d(0xa7b)]();let _0x1ddcfc=_0x3353be['_baseX'],_0x3544f9=_0x3353be[_0x446d8d(0x83d)];_0x1ddcfc+=(Graphics[_0x446d8d(0x7ea)]-Graphics['boxWidth'])/0x2,_0x3544f9+=(Graphics['height']-Graphics[_0x446d8d(0x56c)])/0x2;if(_0x488a53['match'](/front/i))_0x1ddcfc+=(_0x208b0a[_0x446d8d(0x690)]()?0x1:-0x1)*_0x3353be['mainSpriteWidth']()/0x2;else _0x488a53[_0x446d8d(0x95f)](/back/i)&&(_0x1ddcfc+=(_0x208b0a[_0x446d8d(0x690)]()?-0x1:0x1)*_0x3353be[_0x446d8d(0x102)]()/0x2);if(_0x488a53[_0x446d8d(0x95f)](/head/i))_0x3544f9-=_0x3353be['mainSpriteHeight']();else _0x488a53[_0x446d8d(0x95f)](/center/i)&&(_0x3544f9-=_0x3353be[_0x446d8d(0xa23)]()/0x2);_0x1ddcfc+=_0x317126,_0x3544f9+=_0x57f1a6,_0x54c306[_0x446d8d(0xb80)](_0x1ddcfc,_0x3544f9,_0x4fd3e5,_0x1d0c22,_0x347d2a);}}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x219),_0x1996c3=>{const _0x4a18dc=_0x45d586;if(!SceneManager[_0x4a18dc(0x81a)]())return;if(!Imported[_0x4a18dc(0x79a)])return;const _0x2e8e06=SceneManager[_0x4a18dc(0x4f4)][_0x4a18dc(0x992)];if(!_0x2e8e06)return;VisuMZ[_0x4a18dc(0x536)](_0x1996c3,_0x1996c3);const _0x3924de=VisuMZ[_0x4a18dc(0x552)](_0x1996c3[_0x4a18dc(0xba0)]),_0x21c69c=_0x1996c3[_0x4a18dc(0x4c9)],_0x89ee10=_0x1996c3[_0x4a18dc(0x34f)]||0x0,_0x5de7f1=_0x1996c3[_0x4a18dc(0x261)]||0x0,_0x173220=_0x1996c3['Amp']||0x0,_0x3c3210=_0x1996c3[_0x4a18dc(0x7c0)]||0x0,_0x1f7a29=_0x1996c3[_0x4a18dc(0x7de)]||0x1,_0x1f4e6b=Math['min'](..._0x3924de[_0x4a18dc(0x7a1)](_0x49fdfd=>_0x49fdfd['battler']()[_0x4a18dc(0x5bb)]-_0x49fdfd[_0x4a18dc(0xa7b)]()[_0x4a18dc(0x102)]()/0x2)),_0x21154d=Math['max'](..._0x3924de[_0x4a18dc(0x7a1)](_0x48efd3=>_0x48efd3[_0x4a18dc(0xa7b)]()[_0x4a18dc(0x5bb)]+_0x48efd3[_0x4a18dc(0xa7b)]()[_0x4a18dc(0x102)]()/0x2)),_0x483cd0=Math[_0x4a18dc(0xb4b)](..._0x3924de[_0x4a18dc(0x7a1)](_0x494095=>_0x494095[_0x4a18dc(0xa7b)]()[_0x4a18dc(0x83d)]-_0x494095[_0x4a18dc(0xa7b)]()[_0x4a18dc(0xa23)]())),_0x20e813=Math[_0x4a18dc(0x61a)](..._0x3924de['map'](_0x2af494=>_0x2af494['battler']()[_0x4a18dc(0x83d)])),_0x253e38=_0x3924de[_0x4a18dc(0x229)](_0x492853=>_0x492853[_0x4a18dc(0x7f0)]())['length'],_0x396938=_0x3924de['filter'](_0x27111a=>_0x27111a['isEnemy']())[_0x4a18dc(0x1c9)];let _0x13f096=0x0,_0x3b24b5=0x0;if(_0x21c69c[_0x4a18dc(0x95f)](/front/i))_0x13f096=_0x253e38>=_0x396938?_0x1f4e6b:_0x21154d;else{if(_0x21c69c['match'](/middle/i))_0x13f096=(_0x1f4e6b+_0x21154d)/0x2,melee=-0x1;else _0x21c69c['match'](/back/i)&&(_0x13f096=_0x253e38>=_0x396938?_0x21154d:_0x1f4e6b);}if(_0x21c69c[_0x4a18dc(0x95f)](/head/i))_0x3b24b5=_0x483cd0;else{if(_0x21c69c['match'](/center/i))_0x3b24b5=(_0x483cd0+_0x20e813)/0x2;else _0x21c69c[_0x4a18dc(0x95f)](/base/i)&&(_0x3b24b5=_0x20e813);}_0x13f096+=(Graphics[_0x4a18dc(0x7ea)]-Graphics[_0x4a18dc(0x6ae)])/0x2,_0x3b24b5+=(Graphics['height']-Graphics[_0x4a18dc(0x56c)])/0x2,_0x13f096+=_0x89ee10,_0x3b24b5+=_0x5de7f1,_0x2e8e06[_0x4a18dc(0xb80)](_0x13f096,_0x3b24b5,_0x173220,_0x3c3210,_0x1f7a29);}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x9a6),_0x2fed48=>{const _0x38b1ab=_0x45d586;if(!Imported[_0x38b1ab(0x79a)])return;const _0x370444=SceneManager['_scene']['_spriteset'];if(!_0x370444)return;if(VisuMZ[_0x38b1ab(0x1af)][_0x38b1ab(0x23e)]<=1.04){alert(_0x38b1ab(0x4e4)),SceneManager[_0x38b1ab(0x16f)]();return;}VisuMZ[_0x38b1ab(0x536)](_0x2fed48,_0x2fed48);const _0x3d38f3=$gameTemp[_0x38b1ab(0x421)](),_0x31a9e9=Math['max'](0.01,_0x2fed48[_0x38b1ab(0x150)]);$gameTemp[_0x38b1ab(0x6c0)](_0x31a9e9,_0x3d38f3);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0xb89),_0x257cae=>{const _0x3739f8=_0x45d586;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x50f699=SceneManager[_0x3739f8(0x4f4)]['_spriteset'];if(!_0x50f699)return;if(VisuMZ['ActSeqImpact'][_0x3739f8(0x23e)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x3739f8(0x16f)]();return;}VisuMZ[_0x3739f8(0x536)](_0x257cae,_0x257cae);const _0x2dca6c=$gameTemp['getLastPluginCommandInterpreter'](),_0x5cc8c1=_0x257cae['ms']||0x1;VisuMZ[_0x3739f8(0x1af)][_0x3739f8(0x8b6)](_0x5cc8c1,_0x2dca6c);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x2b6),_0x1692a1=>{const _0x6a7c44=_0x45d586;if(!Imported[_0x6a7c44(0x79a)])return;const _0xe2112e=SceneManager[_0x6a7c44(0x4f4)][_0x6a7c44(0x992)];if(!_0xe2112e)return;VisuMZ[_0x6a7c44(0x536)](_0x1692a1,_0x1692a1);const _0x1d150f=_0x1692a1['X']||0x0,_0x2f8f9a=_0x1692a1['Y']||0x0,_0x55fbc0=_0x1692a1['Strength']||0x0,_0x2f4d8d=_0x1692a1[_0x6a7c44(0xb41)]||0x0,_0x1343a9=_0x1692a1[_0x6a7c44(0x7de)]||0x1,_0x16859c=_0x1692a1[_0x6a7c44(0xb1d)]||_0x6a7c44(0xa8e);_0xe2112e[_0x6a7c44(0x56f)](_0x55fbc0,_0x1d150f,_0x2f8f9a,_0x2f4d8d,_0x1343a9,_0x16859c);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x22a68e=>{const _0x1ef14b=_0x45d586;if(!Imported[_0x1ef14b(0x79a)])return;const _0xf4b436=SceneManager[_0x1ef14b(0x4f4)][_0x1ef14b(0x992)];if(!_0xf4b436)return;VisuMZ[_0x1ef14b(0x536)](_0x22a68e,_0x22a68e);const _0x2173a9=VisuMZ[_0x1ef14b(0x552)](_0x22a68e[_0x1ef14b(0xba0)]),_0x41d62a=_0x22a68e[_0x1ef14b(0x4c9)],_0x4076ec=_0x22a68e[_0x1ef14b(0x34f)]||0x0,_0x51ae43=_0x22a68e[_0x1ef14b(0x261)]||0x0,_0x44b2fe=_0x22a68e[_0x1ef14b(0x806)]||0x0,_0xeef951=_0x22a68e[_0x1ef14b(0xb41)]||0x0,_0x46ea8f=_0x22a68e[_0x1ef14b(0x7de)]||0x1,_0x5ecbe2=_0x22a68e['EasingType']||'Linear',_0x51e1c8=Math[_0x1ef14b(0xb4b)](..._0x2173a9[_0x1ef14b(0x7a1)](_0x452d8a=>_0x452d8a[_0x1ef14b(0xa7b)]()[_0x1ef14b(0x5bb)]-_0x452d8a['battler']()['mainSpriteWidth']()/0x2)),_0x536004=Math[_0x1ef14b(0x61a)](..._0x2173a9[_0x1ef14b(0x7a1)](_0xbb4404=>_0xbb4404[_0x1ef14b(0xa7b)]()['_baseX']+_0xbb4404[_0x1ef14b(0xa7b)]()[_0x1ef14b(0x102)]()/0x2)),_0x305901=Math[_0x1ef14b(0xb4b)](..._0x2173a9[_0x1ef14b(0x7a1)](_0x918e63=>_0x918e63['battler']()[_0x1ef14b(0x83d)]-_0x918e63['battler']()[_0x1ef14b(0xa23)]())),_0x48f5c5=Math[_0x1ef14b(0x61a)](..._0x2173a9[_0x1ef14b(0x7a1)](_0x3bc0ed=>_0x3bc0ed[_0x1ef14b(0xa7b)]()[_0x1ef14b(0x83d)])),_0x2ce4ac=_0x2173a9[_0x1ef14b(0x229)](_0x272c01=>_0x272c01[_0x1ef14b(0x7f0)]())[_0x1ef14b(0x1c9)],_0x59991b=_0x2173a9['filter'](_0x4c6e90=>_0x4c6e90['isEnemy']())[_0x1ef14b(0x1c9)];let _0x3f0de4=0x0,_0xf58e82=0x0;if(_0x41d62a[_0x1ef14b(0x95f)](/front/i))_0x3f0de4=_0x2ce4ac>=_0x59991b?_0x51e1c8:_0x536004;else{if(_0x41d62a[_0x1ef14b(0x95f)](/middle/i))_0x3f0de4=(_0x51e1c8+_0x536004)/0x2,melee=-0x1;else _0x41d62a[_0x1ef14b(0x95f)](/back/i)&&(_0x3f0de4=_0x2ce4ac>=_0x59991b?_0x536004:_0x51e1c8);}if(_0x41d62a[_0x1ef14b(0x95f)](/head/i))_0xf58e82=_0x305901;else{if(_0x41d62a['match'](/center/i))_0xf58e82=(_0x305901+_0x48f5c5)/0x2;else _0x41d62a[_0x1ef14b(0x95f)](/base/i)&&(_0xf58e82=_0x48f5c5);}_0x3f0de4+=(Graphics[_0x1ef14b(0x7ea)]-Graphics['boxWidth'])/0x2,_0xf58e82+=(Graphics['height']-Graphics[_0x1ef14b(0x56c)])/0x2,_0x3f0de4+=_0x4076ec,_0xf58e82+=_0x51ae43,_0xf4b436['setupZoomBlurImpactFilter'](_0x44b2fe,_0x3f0de4,_0xf58e82,_0xeef951,_0x46ea8f,_0x5ecbe2);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x346),_0x473aee=>{const _0x17882a=_0x45d586;if(!Imported[_0x17882a(0x79a)])return;const _0x5a911f=SceneManager[_0x17882a(0x4f4)][_0x17882a(0x992)];if(!_0x5a911f)return;if(VisuMZ[_0x17882a(0x1af)][_0x17882a(0x23e)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x17882a(0x16f)]();return;}VisuMZ[_0x17882a(0x536)](_0x473aee,_0x473aee);const _0x152af1=VisuMZ['CreateActionSequenceTargets'](_0x473aee[_0x17882a(0xba0)]),_0x367380={'filename':_0x473aee['Filename'],'horzCells':_0x473aee[_0x17882a(0xa9f)]||0x1,'vertCells':_0x473aee[_0x17882a(0x6e7)]||0x1,'frameDelay':_0x473aee['frameDelay']||0x1,'smooth':_0x473aee[_0x17882a(0xbf0)]||![],'anchorX':_0x473aee[_0x17882a(0xa82)]||0x0,'anchorY':_0x473aee[_0x17882a(0x603)]||0x0,'offsetX':_0x473aee[_0x17882a(0x62b)]||0x0,'offsetY':_0x473aee[_0x17882a(0x110)]||0x0};for(const _0x42aefd of _0x152af1){if(!_0x42aefd)continue;if(!_0x42aefd['battler']())continue;_0x42aefd['battler']()[_0x17882a(0x3fc)](_0x367380);}const _0x35cf6b=$gameTemp[_0x17882a(0x421)]();_0x35cf6b&&_0x35cf6b[_0x17882a(0x9c6)](_0x17882a(0x7d6));}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0xb87),_0x3fe514=>{const _0x34b423=_0x45d586;if(!Imported[_0x34b423(0x79a)])return;const _0x1467f7=SceneManager['_scene'][_0x34b423(0x992)];if(!_0x1467f7)return;if(VisuMZ['ActSeqImpact'][_0x34b423(0x23e)]<=1.05){alert(_0x34b423(0x4e4)),SceneManager['exit']();return;}VisuMZ[_0x34b423(0x536)](_0x3fe514,_0x3fe514);const _0x3e0f7a=VisuMZ[_0x34b423(0x552)](_0x3fe514[_0x34b423(0xba0)]);for(const _0x59640f of _0x3e0f7a){if(!_0x59640f)continue;if(!_0x59640f[_0x34b423(0xa7b)]())continue;_0x59640f['battler']()[_0x34b423(0x616)]();}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xff),_0x10102a=>{const _0x3a0fca=_0x45d586;if(!Imported[_0x3a0fca(0x79a)])return;const _0x3fdf92=SceneManager[_0x3a0fca(0x4f4)][_0x3a0fca(0x992)];if(!_0x3fdf92)return;if(VisuMZ[_0x3a0fca(0x1af)]['version']<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x3a0fca(0x16f)]();return;}VisuMZ[_0x3a0fca(0x536)](_0x10102a,_0x10102a);const _0x1d121e=VisuMZ[_0x3a0fca(0x552)](_0x10102a[_0x3a0fca(0xba0)]),_0x45bd41=_0x10102a[_0x3a0fca(0x232)];for(const _0x33aedd of _0x1d121e){if(!_0x33aedd)continue;if(!_0x33aedd[_0x3a0fca(0xa7b)]())continue;_0x33aedd[_0x3a0fca(0xa7b)]()[_0x3a0fca(0xb27)](_0x45bd41);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xac5),_0x20b3c1=>{const _0xb27a84=_0x45d586;if(!SceneManager[_0xb27a84(0x81a)]())return;const _0x406d45=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x406d45)return;_0x406d45['setWaitMode'](_0xb27a84(0x585));}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x1f4),_0x3cd72d=>{const _0x5361fd=_0x45d586;if(!SceneManager[_0x5361fd(0x81a)]())return;VisuMZ[_0x5361fd(0x536)](_0x3cd72d,_0x3cd72d);const _0x3808ff=$gameTemp['getLastPluginCommandInterpreter'](),_0x103cae=BattleManager[_0x5361fd(0x9e9)],_0x2b6892=BattleManager[_0x5361fd(0x1ce)],_0x567808=BattleManager['_logWindow'];if(!_0x3808ff||!_0x103cae||!_0x2b6892)return;if(!_0x103cae['item']())return;const _0x310818=VisuMZ[_0x5361fd(0x552)](_0x3cd72d[_0x5361fd(0xba0)]);for(const _0x987f03 of _0x310818){if(!_0x987f03)continue;_0x567808['push'](_0x5361fd(0x2b7),_0x2b6892,_0x987f03);}_0x3808ff[_0x5361fd(0x9c6)](_0x5361fd(0x9d8));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Mechanics_ActiveChainInputDisable',_0x5b7542=>{const _0x53db6a=_0x45d586;if(!SceneManager[_0x53db6a(0x81a)]())return;if(!Imported[_0x53db6a(0x933)])return;$gameTemp[_0x53db6a(0xaa2)]=!![];}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x311),_0x210b3f=>{const _0x2c6675=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2c6675(0x536)](_0x210b3f,_0x210b3f);const _0x120a0b=[_0x2c6675(0x791),'MAXMP',_0x2c6675(0x7cc),_0x2c6675(0x96f),'MAT',_0x2c6675(0x5e5),_0x2c6675(0x152),'LUK'],_0x392830=_0x210b3f[_0x2c6675(0x33b)],_0x39219d=_0x210b3f['Debuffs'],_0x29b103=_0x210b3f[_0x2c6675(0x91f)],_0x1a1c27=VisuMZ[_0x2c6675(0x552)](_0x210b3f['Targets']);for(const _0x5cc812 of _0x1a1c27){if(!_0x5cc812)continue;for(const _0x20abae of _0x392830){const _0x2b417c=_0x120a0b['indexOf'](_0x20abae['toUpperCase']()[_0x2c6675(0x379)]());_0x2b417c>=0x0&&_0x2b417c<=0x7&&_0x5cc812[_0x2c6675(0x938)](_0x2b417c,_0x29b103);}for(const _0x177ef8 of _0x39219d){const _0x35f76b=_0x120a0b[_0x2c6675(0xa63)](_0x177ef8[_0x2c6675(0x689)]()[_0x2c6675(0x379)]());_0x35f76b>=0x0&&_0x35f76b<=0x7&&_0x5cc812[_0x2c6675(0x423)](_0x35f76b,_0x29b103);}}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x9db),_0x570d20=>{const _0x3a8df2=_0x45d586;if(!SceneManager[_0x3a8df2(0x81a)]())return;VisuMZ[_0x3a8df2(0x536)](_0x570d20,_0x570d20);const _0x2bc9f8=_0x570d20[_0x3a8df2(0x489)],_0x2f50e9=VisuMZ[_0x3a8df2(0x552)](_0x570d20['Targets']);for(const _0x45fee2 of _0x2f50e9){if(!_0x45fee2)continue;for(const _0x23828d of _0x2bc9f8){_0x45fee2[_0x3a8df2(0x66b)](_0x23828d);}}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x2d2),_0xe0a2d6=>{const _0x28f96f=_0x45d586;if(!SceneManager[_0x28f96f(0x81a)]())return;VisuMZ['ConvertParams'](_0xe0a2d6,_0xe0a2d6);const _0x3789c0=BattleManager[_0x28f96f(0x9e9)],_0x38e71b={'arPenRate':_0xe0a2d6[_0x28f96f(0xa3e)],'arPenFlat':_0xe0a2d6['ArPenFlat'],'arRedRate':_0xe0a2d6[_0x28f96f(0xbf3)],'arRedFlat':_0xe0a2d6[_0x28f96f(0x3ee)]};_0x3789c0['_armorPenetration']=_0x38e71b;}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xa33),_0x47ccb=>{const _0x410ddf=_0x45d586;if(!SceneManager[_0x410ddf(0x81a)]())return;if(!Imported[_0x410ddf(0x35c)])return;VisuMZ[_0x410ddf(0x536)](_0x47ccb,_0x47ccb);const _0x2cb0cf=VisuMZ['CreateActionSequenceTargets'](_0x47ccb[_0x410ddf(0xba0)]),_0x5138cb=_0x47ccb[_0x410ddf(0x4a3)]||0x1;for(const _0x4bbe85 of _0x2cb0cf){if(!_0x4bbe85)continue;if(!_0x4bbe85[_0x410ddf(0x690)]())continue;_0x4bbe85['revealNewWeaknesses'](_0x5138cb);}}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],'ActSeq_Mechanics_AtbGauge',_0x27550d=>{const _0x2bd0d0=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager[_0x2bd0d0(0x946)]())return;VisuMZ[_0x2bd0d0(0x536)](_0x27550d,_0x27550d);const _0x206262=VisuMZ[_0x2bd0d0(0x552)](_0x27550d[_0x2bd0d0(0xba0)]),_0x149315=_0x27550d[_0x2bd0d0(0x49a)],_0x17964e=_0x27550d[_0x2bd0d0(0x49a)],_0x8f3aab=_0x27550d[_0x2bd0d0(0x8e8)];for(const _0x40fcee of _0x206262){if(!_0x40fcee)continue;if(_0x40fcee[_0x2bd0d0(0x7cf)]())_0x40fcee[_0x2bd0d0(0x1b4)](_0x149315);else{if(_0x40fcee['isAtbCastingState']()){_0x40fcee[_0x2bd0d0(0x45b)](_0x17964e);if(_0x8f3aab)_0x40fcee[_0x2bd0d0(0xba5)]();}}}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xa0e),_0x2e6597=>{const _0x3d41e9=_0x45d586;if(!SceneManager[_0x3d41e9(0x81a)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0x3d41e9(0x536)](_0x2e6597,_0x2e6597);const _0x3c12fa=VisuMZ[_0x3d41e9(0x552)](_0x2e6597[_0x3d41e9(0xba0)]),_0x221281=_0x2e6597['BoostPoints'];for(const _0x19ed71 of _0x3c12fa){if(!_0x19ed71)continue;_0x19ed71[_0x3d41e9(0x924)](_0x221281);}}),PluginManager[_0x45d586(0xb11)](pluginData['name'],'ActSeq_Mechanics_BoostPointsStoreData',_0x50e36a=>{const _0x2fdaac=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2fdaac(0x469)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x2fdaac(0x536)](_0x50e36a,_0x50e36a);const _0x53987e=_0x50e36a[_0x2fdaac(0x891)];$gameVariables[_0x2fdaac(0x177)](_0x53987e,BattleManager['_subject'][_0x2fdaac(0xbaa)]());}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Mechanics_BreakShieldChange',_0x5b41a4=>{const _0x3fd9c0=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x3fd9c0(0x536)](_0x5b41a4,_0x5b41a4);const _0x1513db=VisuMZ['CreateActionSequenceTargets'](_0x5b41a4[_0x3fd9c0(0xba0)]),_0x3a912d=_0x5b41a4[_0x3fd9c0(0x9f5)];for(const _0xcaa526 of _0x1513db){if(!_0xcaa526)continue;if(_0xcaa526['isBreakStunned']())continue;if(!_0xcaa526[_0x3fd9c0(0xa4c)]())continue;_0xcaa526['alterBreakShield'](_0x3a912d);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Mechanics_BreakShieldReset',_0x38380f=>{const _0x5068da=_0x45d586;if(!SceneManager[_0x5068da(0x81a)]())return;if(!Imported[_0x5068da(0x315)])return;VisuMZ[_0x5068da(0x536)](_0x38380f,_0x38380f);const _0x22b2ec=VisuMZ[_0x5068da(0x552)](_0x38380f[_0x5068da(0xba0)]);for(const _0x28411e of _0x22b2ec){if(!_0x28411e)continue;if(_0x28411e[_0x5068da(0xabe)]())continue;if(!_0x28411e[_0x5068da(0xa4c)]())continue;_0x28411e['resetBreakShield']();}}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x26e),_0x4662bb=>{const _0x4dc5bd=_0x45d586;if(!SceneManager[_0x4dc5bd(0x81a)]())return;if(!Imported[_0x4dc5bd(0x7c2)])return;if(!BattleManager[_0x4dc5bd(0x8b0)]())return;VisuMZ[_0x4dc5bd(0x536)](_0x4662bb,_0x4662bb);const _0x3d3634=VisuMZ[_0x4dc5bd(0x552)](_0x4662bb['Targets']),_0x33c32b=_0x4662bb[_0x4dc5bd(0x446)];for(const _0x25bc3a of _0x3d3634){if(!_0x25bc3a)continue;_0x25bc3a['gainBravePoints'](_0x33c32b);}}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x39a),_0x24e594=>{const _0x4da5f9=_0x45d586;if(!SceneManager[_0x4da5f9(0x81a)]())return;VisuMZ['ConvertParams'](_0x24e594,_0x24e594);const _0x44d1cf=$gameTemp[_0x4da5f9(0x421)](),_0x16307c=BattleManager[_0x4da5f9(0x9e9)],_0x40fd8c=BattleManager['_subject'];if(!_0x44d1cf||!_0x16307c||!_0x40fd8c)return;if(!_0x16307c['item']())return;const _0x24ec57=VisuMZ[_0x4da5f9(0x552)](_0x24e594[_0x4da5f9(0xba0)]);for(const _0x719dcf of _0x24ec57){if(!_0x719dcf)continue;_0x24e594[_0x4da5f9(0x1f8)]&&(_0x719dcf['removeImmortal'](),_0x719dcf[_0x4da5f9(0x66b)](_0x719dcf[_0x4da5f9(0x19d)]())),_0x719dcf[_0x4da5f9(0x31e)]()&&_0x719dcf['performCollapse']();}_0x44d1cf[_0x4da5f9(0x9c6)]('battleEffect');}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x5aa),_0x174c76=>{const _0x4365ce=_0x45d586;if(!SceneManager[_0x4365ce(0x81a)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x4365ce(0x969)]())return;VisuMZ[_0x4365ce(0x536)](_0x174c76,_0x174c76);const _0x37ce85=VisuMZ[_0x4365ce(0x552)](_0x174c76[_0x4365ce(0xba0)]),_0x484b54=_0x174c76['ChangeOrderBy'];for(const _0x495f7f of _0x37ce85){if(!_0x495f7f)continue;_0x495f7f[_0x4365ce(0x8cb)](_0x484b54);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x1ee),_0x57c217=>{const _0x4e6a39=_0x45d586;if(!SceneManager[_0x4e6a39(0x81a)]())return;if(!Imported[_0x4e6a39(0x92b)])return;if(!BattleManager[_0x4e6a39(0x969)]())return;VisuMZ[_0x4e6a39(0x536)](_0x57c217,_0x57c217);const _0x35fa5a=VisuMZ['CreateActionSequenceTargets'](_0x57c217[_0x4e6a39(0xba0)]),_0x5b9511=_0x57c217[_0x4e6a39(0x49a)],_0x5eda90=_0x57c217['ChargeRate'];for(const _0x480ec7 of _0x35fa5a){if(!_0x480ec7)continue;if(_0x480ec7[_0x4e6a39(0x452)]===_0x4e6a39(0xa42))_0x480ec7[_0x4e6a39(0x685)](_0x5b9511);else _0x480ec7['_tpbState']===_0x4e6a39(0xfc)&&_0x480ec7[_0x4e6a39(0x8f8)](_0x5eda90);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xb9d),_0xa08f39=>{const _0x1e50ae=_0x45d586;if(!SceneManager[_0x1e50ae(0x81a)]())return;VisuMZ['ConvertParams'](_0xa08f39,_0xa08f39);const _0x2e9bf8=BattleManager[_0x1e50ae(0x9e9)];if(!_0x2e9bf8)return;let _0x587ebe=_0xa08f39[_0x1e50ae(0x6e9)];_0x2e9bf8[_0x1e50ae(0x94f)](_0x587ebe);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Mechanics_DamagePopup',_0x187fbc=>{const _0x5a16ae=_0x45d586;if(!SceneManager[_0x5a16ae(0x81a)]())return;VisuMZ['ConvertParams'](_0x187fbc,_0x187fbc);const _0x8d849f=VisuMZ[_0x5a16ae(0x552)](_0x187fbc[_0x5a16ae(0xba0)]);for(const _0xda79db of _0x8d849f){if(!_0xda79db)continue;if(_0xda79db['shouldPopupDamage']())_0xda79db[_0x5a16ae(0x466)]();}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x9a4),_0x469244=>{const _0x2dda5d=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2dda5d(0x536)](_0x469244,_0x469244);const _0x3d1d06=$gameTemp[_0x2dda5d(0x421)](),_0x577551=BattleManager[_0x2dda5d(0x1ce)],_0x51654f=_0x469244[_0x2dda5d(0x890)];if(!_0x3d1d06)return;if(!_0x577551)return;_0x577551&&_0x577551[_0x2dda5d(0x1e3)]()&&_0x51654f[_0x2dda5d(0x689)]()[_0x2dda5d(0x379)]()!=='UNTITLED'&&_0x3d1d06[_0x2dda5d(0x493)]([_0x51654f]);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x329),_0x2fb561=>{const _0x5acf94=_0x45d586;if(!SceneManager[_0x5acf94(0x81a)]())return;VisuMZ[_0x5acf94(0x536)](_0x2fb561,_0x2fb561);const _0x1aa055=$gameTemp[_0x5acf94(0x421)](),_0x21a165=BattleManager['_logWindow'];if(!_0x1aa055)return;const _0x4a7e34=VisuMZ[_0x5acf94(0x552)](_0x2fb561[_0x5acf94(0x94a)]),_0xf684f0=VisuMZ[_0x5acf94(0x552)](_0x2fb561[_0x5acf94(0xba0)]);for(const _0x1b72b3 of _0x4a7e34){for(const _0x2f3afc of _0xf684f0){if(!_0x2f3afc)continue;const _0x31394c=$dataSkills[_0x1b72b3[_0x5acf94(0x771)]()];_0x21a165[_0x5acf94(0x119)](_0x5acf94(0xa1d),_0x1b72b3,_0x2f3afc,_0x31394c);}}_0x1aa055[_0x5acf94(0x9c6)](_0x5acf94(0x9d8));}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],'ActSeq_Mechanics_EmulateGuardEffect',_0x548aab=>{const _0x199cad=_0x45d586;if(!SceneManager[_0x199cad(0x81a)]())return;VisuMZ[_0x199cad(0x536)](_0x548aab,_0x548aab);const _0x3882e1=$gameTemp['getLastPluginCommandInterpreter'](),_0x42e7bd=BattleManager['_logWindow'];if(!_0x3882e1)return;const _0x4e9d36=VisuMZ[_0x199cad(0x552)](_0x548aab['Users']),_0x504214=VisuMZ[_0x199cad(0x552)](_0x548aab[_0x199cad(0xba0)]);for(const _0x1e880e of _0x4e9d36){for(const _0x41e2b8 of _0x504214){if(!_0x41e2b8)continue;const _0x218bae=$dataSkills[_0x1e880e[_0x199cad(0x1cc)]()];_0x42e7bd[_0x199cad(0x119)]('emulateActionEffect',_0x1e880e,_0x41e2b8,_0x218bae);}}_0x3882e1['setWaitMode'](_0x199cad(0x9d8));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x185),_0xedc418=>{const _0x552a69=_0x45d586;if(!SceneManager[_0x552a69(0x81a)]())return;VisuMZ[_0x552a69(0x536)](_0xedc418,_0xedc418);const _0x5c566b=$gameTemp[_0x552a69(0x421)](),_0x3ed109=BattleManager[_0x552a69(0x936)],_0x2801b3=Number(_0xedc418[_0x552a69(0x743)]||0x1),_0x4c26d4=$dataItems[_0x2801b3];if(!_0x5c566b)return;if(!_0x4c26d4)return;const _0x4e1927=VisuMZ[_0x552a69(0x552)](_0xedc418['Users']),_0x4a65bc=VisuMZ['CreateActionSequenceTargets'](_0xedc418['Targets']);for(const _0x5a6cd5 of _0x4e1927){for(const _0x488667 of _0x4a65bc){if(!_0x488667)continue;_0x3ed109[_0x552a69(0x119)](_0x552a69(0xa1d),_0x5a6cd5,_0x488667,_0x4c26d4);}}_0x5c566b[_0x552a69(0x9c6)](_0x552a69(0x9d8));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x5d7),_0x594fed=>{const _0x51167e=_0x45d586;if(!SceneManager[_0x51167e(0x81a)]())return;VisuMZ[_0x51167e(0x536)](_0x594fed,_0x594fed);let _0x465b29=Number(_0x594fed[_0x51167e(0xfe)]||0x0);if(_0x465b29<=0x0){const _0x57deaf=BattleManager[_0x51167e(0x9e9)];if(_0x57deaf&&_0x57deaf['isSkill']())_0x465b29=_0x57deaf['item']()['id'];else return;}const _0x430aba=$dataSkills[_0x465b29];if(!_0x430aba)return;const _0x176dc0=VisuMZ[_0x51167e(0x552)](_0x594fed[_0x51167e(0x94a)]);for(const _0x32cd73 of _0x176dc0){_0x32cd73[_0x51167e(0x785)](_0x430aba);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xab1),_0x408664=>{const _0x35f7fc=_0x45d586;if(!SceneManager[_0x35f7fc(0x81a)]())return;VisuMZ[_0x35f7fc(0x536)](_0x408664,_0x408664);const _0x5c8aec=$gameTemp[_0x35f7fc(0x421)](),_0xc46524=BattleManager[_0x35f7fc(0x936)],_0x593324=Number(_0x408664[_0x35f7fc(0xfe)]||0x1),_0x5f521c=$dataSkills[_0x593324];if(!_0x5c8aec)return;if(!_0x5f521c)return;const _0x19286f=VisuMZ[_0x35f7fc(0x552)](_0x408664[_0x35f7fc(0x94a)]),_0xafdfd0=VisuMZ[_0x35f7fc(0x552)](_0x408664['Targets']);for(const _0x22ad7a of _0x19286f){for(const _0x2e8c0c of _0xafdfd0){if(!_0x2e8c0c)continue;_0xc46524[_0x35f7fc(0x119)](_0x35f7fc(0xa1d),_0x22ad7a,_0x2e8c0c,_0x5f521c);}}_0x5c8aec[_0x35f7fc(0x9c6)](_0x35f7fc(0x9d8));}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x154),_0x5a6502=>{const _0x39c003=_0x45d586;if(!SceneManager[_0x39c003(0x81a)]())return;VisuMZ[_0x39c003(0x536)](_0x5a6502,_0x5a6502);const _0x1d3206=VisuMZ[_0x39c003(0x552)](_0x5a6502[_0x39c003(0xba0)]);for(const _0x3cf5bf of _0x1d3206){if(!_0x3cf5bf)continue;if(!_0x3cf5bf[_0x39c003(0x690)]())continue;_0x3cf5bf[_0x39c003(0x942)]();}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x5f2),_0x1626a3=>{const _0x5a476c=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5a476c(0x6f7)])return;if(!BattleManager[_0x5a476c(0xbd8)]())return;VisuMZ['ConvertParams'](_0x1626a3,_0x1626a3);const _0x434366=_0x1626a3[_0x5a476c(0x4f6)];BattleManager[_0x5a476c(0x1ce)]&&BattleManager[_0x5a476c(0x1ce)][_0x5a476c(0x904)]()['gainCurrentActionsETB'](_0x434366);}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x4f2),_0x134cff=>{const _0x24c199=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x24c199(0x4bf)])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x24c199(0x536)](_0x134cff,_0x134cff);const _0x1344f5=_0x134cff['ActionCount'];BattleManager['_subject']&&BattleManager['_subject']['friendsUnit']()['gainCurrentActionsFTB'](_0x1344f5);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x7a0),_0x4c48d3=>{const _0x26ae7b=_0x45d586;if(!SceneManager[_0x26ae7b(0x81a)]())return;VisuMZ[_0x26ae7b(0x536)](_0x4c48d3,_0x4c48d3);const _0xc1c4c7=VisuMZ[_0x26ae7b(0x552)](_0x4c48d3['Targets']),_0x8d2ae0=_0x4c48d3[_0x26ae7b(0x411)],_0x33f146=_0x4c48d3[_0x26ae7b(0x325)],_0x597308=_0x4c48d3[_0x26ae7b(0x59e)],_0x1a4f1b=_0x4c48d3[_0x26ae7b(0x827)],_0x4fba74=_0x4c48d3['TP_Rate'],_0x5d49e5=_0x4c48d3[_0x26ae7b(0x542)],_0x307852=_0x4c48d3[_0x26ae7b(0xb6f)];for(const _0x20cfe3 of _0xc1c4c7){if(!_0x20cfe3)continue;const _0x4594e3=_0x20cfe3[_0x26ae7b(0x45d)](),_0x32aa13=Math[_0x26ae7b(0x31d)](_0x8d2ae0*_0x20cfe3[_0x26ae7b(0x447)]+_0x33f146),_0x407255=Math[_0x26ae7b(0x31d)](_0x597308*_0x20cfe3[_0x26ae7b(0x13c)]+_0x1a4f1b),_0x282a93=Math[_0x26ae7b(0x31d)](_0x4fba74*_0x20cfe3[_0x26ae7b(0xf8)]()+_0x5d49e5);if(_0x32aa13!==0x0)_0x20cfe3[_0x26ae7b(0x76e)](_0x32aa13);if(_0x407255!==0x0)_0x20cfe3[_0x26ae7b(0x8ef)](_0x407255);if(_0x282a93!==0x0)_0x20cfe3[_0x26ae7b(0x732)](_0x282a93);if(_0x307852)_0x20cfe3[_0x26ae7b(0x466)]();_0x4594e3&&_0x20cfe3[_0x26ae7b(0x1e3)]()&&_0x20cfe3[_0x26ae7b(0xa50)]();}}),PluginManager[_0x45d586(0xb11)](pluginData['name'],'ActSeq_Mechanics_Immortal',_0x3208da=>{const _0xb0fce1=_0x45d586;if(!SceneManager[_0xb0fce1(0x81a)]())return;VisuMZ[_0xb0fce1(0x536)](_0x3208da,_0x3208da);const _0x33dcc7=VisuMZ[_0xb0fce1(0x552)](_0x3208da['Targets']);for(const _0x27a979 of _0x33dcc7){if(!_0x27a979)continue;_0x27a979[_0xb0fce1(0x2d7)](_0x3208da[_0xb0fce1(0x418)]);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Mechanics_Multipliers',_0x4d0c14=>{const _0x34c665=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x34c665(0x536)](_0x4d0c14,_0x4d0c14);const _0x28f493=BattleManager[_0x34c665(0x9e9)],_0x384c0e={'criticalHitRate':_0x4d0c14[_0x34c665(0xb47)],'criticalHitFlat':_0x4d0c14[_0x34c665(0x34d)],'criticalDmgRate':_0x4d0c14['CriticalDmgRate'],'criticalDmgFlat':_0x4d0c14[_0x34c665(0x8bd)],'damageRate':_0x4d0c14[_0x34c665(0x914)],'damageFlat':_0x4d0c14[_0x34c665(0x321)],'hitRate':_0x4d0c14[_0x34c665(0x3ab)],'hitFlat':_0x4d0c14['HitFlat']};_0x28f493[_0x34c665(0x97c)]=_0x384c0e;}),PluginManager[_0x45d586(0xb11)](pluginData['name'],'ActSeq_Mechanics_OnceParallel',_0x1338e1=>{const _0x4862ae=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4862ae(0x536)](_0x1338e1,_0x1338e1);const _0x1d5e42=_0x1338e1[_0x4862ae(0x39e)];SceneManager[_0x4862ae(0x4f4)]['playOnceParallelInterpreter'](_0x1d5e42);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x870),_0x200b89=>{const _0x3a12cd=_0x45d586;if(!SceneManager[_0x3a12cd(0x81a)]())return;if(!Imported[_0x3a12cd(0x65c)])return;if(!BattleManager['isOTB']())return;VisuMZ['ConvertParams'](_0x200b89,_0x200b89);const _0x3d94df=VisuMZ['CreateActionSequenceTargets'](_0x200b89[_0x3a12cd(0xba0)]);for(const _0x2bf05a of _0x3d94df){if(!_0x2bf05a)continue;let _0x13d08b=_0x200b89[_0x3a12cd(0xbe4)],_0x50fb6e=_0x200b89[_0x3a12cd(0x1a9)],_0x1a6be8=_0x200b89[_0x3a12cd(0x5e7)];BattleManager[_0x3a12cd(0xbc0)]['includes'](_0x2bf05a)?_0x13d08b+=_0x1a6be8:_0x50fb6e+=_0x1a6be8,BattleManager[_0x3a12cd(0x6b9)](_0x2bf05a,-_0x13d08b,![]),BattleManager[_0x3a12cd(0x6b9)](_0x2bf05a,-_0x50fb6e,!![]);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xa69),_0x595db6=>{const _0x56988=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x56988(0x7ef)])return;if(!BattleManager[_0x56988(0x9a7)]())return;VisuMZ[_0x56988(0x536)](_0x595db6,_0x595db6);const _0x20e3cd=BattleManager[_0x56988(0x1ce)]['friendsUnit'](),_0x4d1f36=_0x595db6['Override'],_0x3b06a6=_0x595db6[_0x56988(0x269)]||_0x56988(0x13b),_0x5a40fd=_0x595db6[_0x56988(0x30a)]||_0x56988(0x13b),_0x3fc0e2=_0x595db6[_0x56988(0x8a1)]||0x0,_0x20d1df=_0x595db6[_0x56988(0x801)]||0x0;(_0x20e3cd['canAlterActionCostPTB']()||_0x4d1f36)&&(_0x4d1f36&&(_0x20e3cd[_0x56988(0x145)]=_0x20e3cd[_0x56988(0x145)]||{},_0x20e3cd[_0x56988(0x145)][_0x56988(0x73b)]=0x0),_0x20e3cd[_0x56988(0x2c0)](_0x3b06a6,_0x5a40fd,_0x3fc0e2,_0x20d1df));}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x338),_0x1fb342=>{const _0x2947b5=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2947b5(0x7ef)])return;if(!BattleManager[_0x2947b5(0x9a7)]())return;VisuMZ[_0x2947b5(0x536)](_0x1fb342,_0x1fb342);const _0x43a2c5=BattleManager[_0x2947b5(0x1ce)][_0x2947b5(0x904)]();let _0x56e6eb=Math[_0x2947b5(0x61a)](_0x1fb342['ConvertCount'],0x0),_0x90ae21=_0x43a2c5[_0x2947b5(0x3d0)](),_0x220fe9=_0x43a2c5[_0x2947b5(0x922)]();while(_0x56e6eb--){if(_0x90ae21<=0x0&&_0x220fe9<=0x0)break;else _0x90ae21>0x0?(_0x90ae21--,_0x220fe9++):_0x220fe9--;}_0x43a2c5[_0x2947b5(0x86e)](_0x90ae21),_0x43a2c5['setHalfActionsPTB'](_0x220fe9);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x480),_0x1ccbbb=>{const _0x5d84ed=_0x45d586;if(!SceneManager[_0x5d84ed(0x81a)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x5d84ed(0x9a7)]())return;VisuMZ[_0x5d84ed(0x536)](_0x1ccbbb,_0x1ccbbb);const _0x78fa5f=BattleManager[_0x5d84ed(0x1ce)]['friendsUnit']();let _0x532b27=_0x1ccbbb[_0x5d84ed(0x551)],_0x4fb9b1=_0x1ccbbb[_0x5d84ed(0x5d9)];_0x78fa5f['gainFullActionsPTB'](_0x532b27),_0x78fa5f[_0x5d84ed(0x5ab)](_0x4fb9b1);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xaa8),_0x4aa2d0=>{const _0x828b54=_0x45d586;if(!SceneManager[_0x828b54(0x81a)]())return;VisuMZ[_0x828b54(0x536)](_0x4aa2d0,_0x4aa2d0);const _0x1a3ef3=[_0x828b54(0x791),_0x828b54(0x483),_0x828b54(0x7cc),_0x828b54(0x96f),_0x828b54(0x7b0),_0x828b54(0x5e5),_0x828b54(0x152),_0x828b54(0x3d2)],_0x10269a=_0x4aa2d0['Buffs'],_0x5c7378=_0x4aa2d0[_0x828b54(0x688)],_0x2946b5=VisuMZ[_0x828b54(0x552)](_0x4aa2d0[_0x828b54(0xba0)]);for(const _0x2d89ff of _0x2946b5){if(!_0x2d89ff)continue;for(const _0xbc07fb of _0x10269a){const _0x3ed999=_0x1a3ef3[_0x828b54(0xa63)](_0xbc07fb[_0x828b54(0x689)]()[_0x828b54(0x379)]());_0x3ed999>=0x0&&_0x3ed999<=0x7&&_0x2d89ff[_0x828b54(0xa83)](_0x3ed999)&&_0x2d89ff[_0x828b54(0x45a)](_0x3ed999);}for(const _0x140c78 of _0x5c7378){const _0x20e4af=_0x1a3ef3[_0x828b54(0xa63)](_0x140c78[_0x828b54(0x689)]()['trim']());_0x20e4af>=0x0&&_0x20e4af<=0x7&&_0x2d89ff['isDebuffAffected'](_0x20e4af)&&_0x2d89ff[_0x828b54(0x45a)](_0x20e4af);}}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x32b),_0x5f08b8=>{const _0x57d54d=_0x45d586;if(!SceneManager[_0x57d54d(0x81a)]())return;VisuMZ[_0x57d54d(0x536)](_0x5f08b8,_0x5f08b8);const _0x1f1fdc=_0x5f08b8[_0x57d54d(0x489)],_0x45ed60=VisuMZ['CreateActionSequenceTargets'](_0x5f08b8['Targets']);for(const _0x49f804 of _0x45ed60){if(!_0x49f804)continue;for(const _0x45ae60 of _0x1f1fdc){_0x49f804[_0x57d54d(0x238)](_0x45ae60);}}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x6cb),_0x543994=>{const _0x23bf01=_0x45d586;if(!SceneManager[_0x23bf01(0x81a)]())return;if(!Imported[_0x23bf01(0x903)])return;VisuMZ[_0x23bf01(0x536)](_0x543994,_0x543994);const _0x3038a4=VisuMZ[_0x23bf01(0x552)](_0x543994[_0x23bf01(0xba0)]),_0x431468=Number(_0x543994[_0x23bf01(0x1d4)]),_0x9100a=Number(_0x543994[_0x23bf01(0x91f)]),_0x2b0da0=_0x543994[_0x23bf01(0x87a)];for(const _0x1a4efe of _0x3038a4){if(!_0x1a4efe)continue;_0x2b0da0&&!_0x1a4efe['isStateAffected'](_0x431468)?(_0x1a4efe['addState'](_0x431468),_0x1a4efe[_0x23bf01(0x253)](_0x431468,_0x9100a)):_0x1a4efe['addStateTurns'](_0x431468,_0x9100a);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x1eb),_0x32ea52=>{const _0x15f900=_0x45d586;if(!SceneManager[_0x15f900(0x81a)]())return;if(!Imported[_0x15f900(0x903)])return;VisuMZ[_0x15f900(0x536)](_0x32ea52,_0x32ea52);const _0x470348=VisuMZ['CreateActionSequenceTargets'](_0x32ea52[_0x15f900(0xba0)]),_0x3fa759=Number(_0x32ea52[_0x15f900(0x1d4)]),_0x31a420=Math[_0x15f900(0x61a)](Number(_0x32ea52['Turns']),0x0),_0x3c3f2c=_0x32ea52[_0x15f900(0x87a)];for(const _0x6d03cf of _0x470348){if(!_0x6d03cf)continue;_0x3c3f2c&&!_0x6d03cf[_0x15f900(0x610)](_0x3fa759)&&_0x6d03cf[_0x15f900(0x66b)](_0x3fa759),_0x6d03cf[_0x15f900(0x253)](_0x3fa759,_0x31a420);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Mechanics_StbExploit',_0xf185af=>{const _0xf86b51=_0x45d586;if(!SceneManager[_0xf86b51(0x81a)]())return;if(!Imported[_0xf86b51(0x988)])return;if(!BattleManager[_0xf86b51(0x524)]())return;VisuMZ[_0xf86b51(0x536)](_0xf185af,_0xf185af);const _0x3f3c92=_0xf185af[_0xf86b51(0x197)],_0x13f064=VisuMZ[_0xf86b51(0x552)](_0xf185af[_0xf86b51(0xba0)]),_0x19a25a=_0xf185af[_0xf86b51(0x51d)],_0x69b77f=_0xf185af[_0xf86b51(0x8f1)],_0x48b2ef=_0xf185af[_0xf86b51(0x865)],_0x496dc2=BattleManager[_0xf86b51(0x9e9)];if(_0x3f3c92)for(const _0x25ea00 of _0x13f064){if(!_0x25ea00)continue;if(_0x25ea00===BattleManager['_subject'])continue;if(_0x19a25a)_0x25ea00[_0xf86b51(0x63b)](![]);_0x25ea00[_0xf86b51(0xdd)](BattleManager['_subject'],_0x496dc2);}if(_0x69b77f&&BattleManager[_0xf86b51(0x1ce)]){if(_0x48b2ef)BattleManager[_0xf86b51(0x1ce)][_0xf86b51(0x63b)](![]);const _0x176eb2=_0x13f064[0x0];BattleManager[_0xf86b51(0x1ce)][_0xf86b51(0xa1a)](_0x176eb2,_0x496dc2);}}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x332),_0x51e28b=>{const _0x2b7a73=_0x45d586;if(!SceneManager[_0x2b7a73(0x81a)]())return;if(!Imported[_0x2b7a73(0x988)])return;if(!BattleManager[_0x2b7a73(0x524)]())return;VisuMZ[_0x2b7a73(0x536)](_0x51e28b,_0x51e28b);const _0x2a692a=_0x51e28b[_0x2b7a73(0x9ce)];BattleManager[_0x2b7a73(0x1ce)]&&BattleManager['_subject'][_0x2b7a73(0x9d3)](_0x2a692a);}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0xab2),_0x4bd8cf=>{const _0x3ad7c0=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3ad7c0(0x988)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x3ad7c0(0x536)](_0x4bd8cf,_0x4bd8cf);let _0x5802e0=_0x4bd8cf[_0x3ad7c0(0x9ce)];if(BattleManager[_0x3ad7c0(0x1ce)]){BattleManager['_subject'][_0x3ad7c0(0x55f)]=BattleManager[_0x3ad7c0(0x1ce)][_0x3ad7c0(0x55f)]||[];while(_0x5802e0--){if(BattleManager[_0x3ad7c0(0x1ce)][_0x3ad7c0(0x55f)][_0x3ad7c0(0x1c9)]<=0x0)break;BattleManager[_0x3ad7c0(0x1ce)][_0x3ad7c0(0x55f)]['shift']();}}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x443),_0x19fca1=>{const _0x3681f5=_0x45d586;if(!SceneManager[_0x3681f5(0x81a)]())return;if(!Imported[_0x3681f5(0x6b6)])return;VisuMZ['ConvertParams'](_0x19fca1,_0x19fca1);const _0x46efb4=VisuMZ[_0x3681f5(0x552)](_0x19fca1[_0x3681f5(0xba0)]),_0x12c28b=_0x19fca1[_0x3681f5(0x3e5)];for(const _0x592176 of _0x46efb4){if(!_0x592176)continue;if(!_0x592176[_0x3681f5(0x7f0)]())continue;_0x592176[_0x3681f5(0x69d)](_0x12c28b);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xb75),_0x102000=>{const _0x24f194=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x102000,_0x102000);const _0x228f0f=VisuMZ['CreateActionSequenceTargets'](_0x102000[_0x24f194(0xba0)]),_0xbe48bb=_0x102000[_0x24f194(0x6a0)],_0x3cda96={'textColor':ColorManager['getColor'](_0x102000[_0x24f194(0x56d)]),'flashColor':_0x102000[_0x24f194(0x5ec)],'flashDuration':_0x102000[_0x24f194(0x574)]};for(const _0x52dfe8 of _0x228f0f){if(!_0x52dfe8)continue;_0x52dfe8[_0x24f194(0x3e4)](_0xbe48bb,_0x3cda96);}}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x834),_0x42e954=>{const _0x16f67e=_0x45d586;if(!SceneManager[_0x16f67e(0x81a)]())return;VisuMZ['ConvertParams'](_0x42e954,_0x42e954);const _0x2918da=VisuMZ[_0x16f67e(0x552)](_0x42e954[_0x16f67e(0xba0)]);let _0x5323ad=$gameVariables[_0x16f67e(0x72a)](_0x42e954[_0x16f67e(0x495)]);Imported[_0x16f67e(0xbc5)]&&_0x42e954['DigitGrouping']&&(_0x5323ad=VisuMZ['GroupDigits'](_0x5323ad));const _0x57f097=String(_0x5323ad),_0xfa14e5={'textColor':ColorManager[_0x16f67e(0xb9c)](_0x42e954[_0x16f67e(0x56d)]),'flashColor':_0x42e954['FlashColor'],'flashDuration':_0x42e954[_0x16f67e(0x574)]};for(const _0x3003a7 of _0x2918da){if(!_0x3003a7)continue;_0x3003a7[_0x16f67e(0x3e4)](_0x57f097,_0xfa14e5);}}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x3ef),_0x3fb852=>{const _0x496855=_0x45d586;if(!SceneManager[_0x496855(0x81a)]())return;const _0x6b4137=$gameTemp[_0x496855(0x421)]();if(!_0x6b4137)return;_0x6b4137[_0x496855(0x9c6)](_0x496855(0x758));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x5fb),_0x12f707=>{const _0x212e1d=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x212e1d(0x536)](_0x12f707,_0x12f707);const _0x8aaf66=VisuMZ[_0x212e1d(0x552)](_0x12f707['Targets']);for(const _0x4292c7 of _0x8aaf66){if(!_0x4292c7)continue;_0x4292c7[_0x212e1d(0x288)]();}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xe0),_0x5ec6e7=>{const _0x3a76a7=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3a76a7(0x536)](_0x5ec6e7,_0x5ec6e7);const _0x19364e=VisuMZ[_0x3a76a7(0x552)](_0x5ec6e7[_0x3a76a7(0xba0)]),_0x332b50=_0x5ec6e7[_0x3a76a7(0x937)][_0x3a76a7(0x2ab)]()['trim']();let _0x13b797=_0x5ec6e7['ShowWeapon'];const _0x5ee404=_0x5ec6e7[_0x3a76a7(0x700)];![_0x3a76a7(0x84c),_0x3a76a7(0x849),_0x3a76a7(0x470),_0x3a76a7(0x46b)]['includes'](_0x332b50)&&(_0x13b797=![]);for(const _0x449583 of _0x19364e){if(!_0x449583)continue;_0x449583['freezeMotion'](_0x332b50,_0x13b797,_0x5ee404);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Motion_MotionType',_0x57eec1=>{const _0x39b792=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x39b792(0x536)](_0x57eec1,_0x57eec1);const _0xe80228=VisuMZ['CreateActionSequenceTargets'](_0x57eec1[_0x39b792(0xba0)]),_0x38ea18=_0x57eec1[_0x39b792(0x937)][_0x39b792(0x2ab)]()[_0x39b792(0x379)](),_0x346f19=_0x57eec1[_0x39b792(0x5b9)];for(const _0x14b842 of _0xe80228){if(!_0x14b842)continue;_0x14b842[_0x39b792(0xb71)]=_0x346f19;if(_0x38ea18['match'](/ATTACK[ ](\d+)/i))_0x14b842['performAttackSlot'](Number(RegExp['$1']));else _0x38ea18===_0x39b792(0x84c)?_0x14b842[_0x39b792(0x3d6)]():_0x14b842['requestMotion'](_0x38ea18);if(!_0x346f19)_0x14b842[_0x39b792(0xbd2)](0x0);else{if(_0x346f19&&['thrust',_0x39b792(0x470),_0x39b792(0xb86)][_0x39b792(0x840)](_0x38ea18)){}}_0x14b842[_0x39b792(0xb71)]=undefined;}}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x38b),_0x44aa7f=>{const _0x482570=_0x45d586;if(!SceneManager[_0x482570(0x81a)]())return;VisuMZ[_0x482570(0x536)](_0x44aa7f,_0x44aa7f);const _0x47b5cb=BattleManager['_action'];if(!_0x47b5cb)return;if(!_0x47b5cb[_0x482570(0xba9)]())return;const _0x58c1b8=VisuMZ[_0x482570(0x552)](_0x44aa7f[_0x482570(0xba0)]);for(const _0x513392 of _0x58c1b8){if(!_0x513392)continue;_0x513392['performAction'](_0x47b5cb);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x644),_0x2937f7=>{const _0x191eea=_0x45d586;if(!SceneManager[_0x191eea(0x81a)]())return;VisuMZ['ConvertParams'](_0x2937f7,_0x2937f7);const _0x51e996=VisuMZ['CreateActionSequenceTargets'](_0x2937f7[_0x191eea(0xba0)]);for(const _0x39d5e0 of _0x51e996){if(!_0x39d5e0)continue;if(!_0x39d5e0[_0x191eea(0xa7b)]())continue;_0x39d5e0[_0x191eea(0xa7b)]()[_0x191eea(0x67b)]();}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x1df),_0x45f3b=>{const _0x3c0223=_0x45d586;if(!SceneManager[_0x3c0223(0x81a)]())return;VisuMZ['ConvertParams'](_0x45f3b,_0x45f3b);const _0x3e0459=$gameTemp[_0x3c0223(0x421)](),_0x586dfd=_0x45f3b[_0x3c0223(0x668)]*Sprite_Battler['_motionSpeed'];_0x3e0459[_0x3c0223(0x643)](_0x586dfd);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x5ea),_0x424c09=>{const _0x6bda4a=_0x45d586;if(!SceneManager[_0x6bda4a(0x81a)]())return;VisuMZ[_0x6bda4a(0x536)](_0x424c09,_0x424c09);const _0xa2f7df=$gameTemp[_0x6bda4a(0x421)](),_0x25a7ce=BattleManager[_0x6bda4a(0x9e9)];if(!_0xa2f7df||!_0x25a7ce)return;if(!_0x25a7ce[_0x6bda4a(0xba9)]())return;const _0x5dc31a=VisuMZ['CreateActionSequenceTargets'](_0x424c09['Targets']);for(const _0x1f03c4 of _0x5dc31a){if(!_0x1f03c4)continue;_0x1f03c4[_0x6bda4a(0x4dd)](_0x25a7ce);}if(_0x424c09[_0x6bda4a(0x9c0)])_0xa2f7df[_0x6bda4a(0x9c6)](_0x6bda4a(0x365));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x630),_0x32ec6e=>{const _0x4b7283=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4b7283(0x536)](_0x32ec6e,_0x32ec6e);const _0x313100=$gameTemp[_0x4b7283(0x421)](),_0x17c7d8=VisuMZ[_0x4b7283(0x552)](_0x32ec6e['Targets']),_0x15ef6a=_0x32ec6e[_0x4b7283(0xa97)],_0x5bd190=_0x32ec6e[_0x4b7283(0xbd6)],_0x409354=_0x32ec6e[_0x4b7283(0x698)],_0x253f77=_0x32ec6e['Duration'],_0x2636e3=_0x32ec6e[_0x4b7283(0xe3)],_0x283d4c=_0x32ec6e[_0x4b7283(0xb1d)],_0x29d05c=_0x32ec6e[_0x4b7283(0x937)],_0x271bfe=_0x32ec6e[_0x4b7283(0x9c0)];if(!_0x313100)return;for(const _0x19bb75 of _0x17c7d8){if(!_0x19bb75)continue;let _0x1337b6=_0x5bd190,_0x4f871f=_0x409354;if(_0x15ef6a[_0x4b7283(0x95f)](/horz/i))_0x1337b6*=_0x19bb75[_0x4b7283(0x7f0)]()?-0x1:0x1;if(_0x15ef6a[_0x4b7283(0x95f)](/vert/i))_0x4f871f*=_0x19bb75[_0x4b7283(0x7f0)]()?-0x1:0x1;_0x19bb75[_0x4b7283(0x639)](_0x1337b6,_0x4f871f,_0x253f77,_0x2636e3,_0x283d4c),_0x19bb75[_0x4b7283(0x135)](_0x29d05c);}if(_0x271bfe)_0x313100['setWaitMode'](_0x4b7283(0x365));}),PluginManager['registerCommand'](pluginData['name'],_0x45d586(0x5a7),_0x52378a=>{const _0x47c8ac=_0x45d586;if(!SceneManager[_0x47c8ac(0x81a)]())return;if(!$gameSystem[_0x47c8ac(0x138)]())return;VisuMZ[_0x47c8ac(0x536)](_0x52378a,_0x52378a);const _0x6957d=$gameTemp[_0x47c8ac(0x421)](),_0x477270=VisuMZ['CreateActionSequenceTargets'](_0x52378a[_0x47c8ac(0xba0)]),_0x1478c9=_0x52378a[_0x47c8ac(0x631)],_0x47b1e2=_0x52378a[_0x47c8ac(0x34f)],_0x14e6ea=_0x52378a[_0x47c8ac(0x261)],_0x26beb1=_0x52378a[_0x47c8ac(0x7de)],_0x383499=_0x52378a[_0x47c8ac(0xe3)],_0x64e376=_0x52378a['EasingType'],_0x317bc7=_0x52378a[_0x47c8ac(0x937)],_0x569515=_0x52378a['WaitForMovement'];if(!_0x6957d)return;for(const _0x3dc7fb of _0x477270){if(!_0x3dc7fb)continue;const _0x1b3c7b=_0x52378a[_0x47c8ac(0x40a)](_0x3dc7fb)||{'x':0x0,'y':0x0};let _0x29bee7=_0x1b3c7b['x'],_0x2b3e17=_0x1b3c7b['y'];if(_0x1478c9[_0x47c8ac(0x95f)](/none/i))_0x29bee7+=_0x47b1e2,_0x2b3e17+=_0x14e6ea;else{if(_0x1478c9[_0x47c8ac(0x95f)](/horz/i)&&_0x1478c9[_0x47c8ac(0x95f)](/vert/i))_0x29bee7+=_0x3dc7fb[_0x47c8ac(0x7f0)]()?-_0x47b1e2:_0x47b1e2,_0x2b3e17+=_0x3dc7fb['isActor']()?-_0x14e6ea:_0x14e6ea;else{if(_0x1478c9[_0x47c8ac(0x95f)](/horz/i))_0x29bee7+=_0x3dc7fb[_0x47c8ac(0x7f0)]()?-_0x47b1e2:_0x47b1e2,_0x2b3e17+=_0x14e6ea;else _0x1478c9[_0x47c8ac(0x95f)](/vert/i)&&(_0x29bee7+=_0x47b1e2,_0x2b3e17+=_0x3dc7fb['isActor']()?-_0x14e6ea:_0x14e6ea);}}_0x3dc7fb['moveBattlerHomeToPoint'](_0x29bee7,_0x2b3e17,_0x26beb1,_0x383499,_0x64e376,-0x1),_0x3dc7fb[_0x47c8ac(0x135)](_0x317bc7);}if(_0x569515)_0x6957d[_0x47c8ac(0x9c6)](_0x47c8ac(0x365));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xa00),_0x2b7934=>{const _0x2acb7b=_0x45d586;if(!SceneManager[_0x2acb7b(0x81a)]())return;if(!$gameSystem[_0x2acb7b(0x138)]())return;VisuMZ['ConvertParams'](_0x2b7934,_0x2b7934);const _0x59cb2e=$gameTemp[_0x2acb7b(0x421)](),_0x5acc3c=VisuMZ[_0x2acb7b(0x552)](_0x2b7934['Targets']),_0xf94c28=_0x2b7934[_0x2acb7b(0x93f)],_0x3fe862=_0x2b7934[_0x2acb7b(0x631)],_0x1ce97e=_0x2b7934[_0x2acb7b(0x34f)],_0x3ef83b=_0x2b7934[_0x2acb7b(0x261)],_0x3e3ee3=_0x2b7934[_0x2acb7b(0x7de)],_0x31a734=_0x2b7934['FaceDirection'],_0x2ef9d9=_0x2b7934[_0x2acb7b(0xb1d)],_0xd67ecb=_0x2b7934[_0x2acb7b(0x937)],_0x3d8b43=_0x2b7934[_0x2acb7b(0x9c0)];if(!_0x59cb2e)return;for(const _0x15e28b of _0x5acc3c){if(!_0x15e28b)continue;let _0x2cda65=_0x15e28b[_0x2acb7b(0xa7b)]()['_baseX'],_0x4a73fd=_0x15e28b[_0x2acb7b(0xa7b)]()['_baseY'];if(_0xf94c28['match'](/home/i))_0x2cda65=_0x15e28b['battler']()[_0x2acb7b(0x47c)],_0x4a73fd=_0x15e28b[_0x2acb7b(0xa7b)]()[_0x2acb7b(0xac0)];else{if(_0xf94c28[_0x2acb7b(0x95f)](/center/i))_0x2cda65=Graphics[_0x2acb7b(0x6ae)]/0x2,_0x4a73fd=Graphics[_0x2acb7b(0x56c)]/0x2;else _0xf94c28[_0x2acb7b(0x95f)](/point (\d+), (\d+)/i)&&(_0x2cda65=Number(RegExp['$1']),_0x4a73fd=Number(RegExp['$2']));}if(_0x3fe862[_0x2acb7b(0x95f)](/none/i))_0x2cda65+=_0x1ce97e,_0x4a73fd+=_0x3ef83b;else{if(_0x3fe862[_0x2acb7b(0x95f)](/horz/i)&&_0x3fe862[_0x2acb7b(0x95f)](/vert/i))_0x2cda65+=_0x15e28b[_0x2acb7b(0x7f0)]()?-_0x1ce97e:_0x1ce97e,_0x4a73fd+=_0x15e28b[_0x2acb7b(0x7f0)]()?-_0x3ef83b:_0x3ef83b;else{if(_0x3fe862['match'](/horz/i))_0x2cda65+=_0x15e28b['isActor']()?-_0x1ce97e:_0x1ce97e,_0x4a73fd+=_0x3ef83b;else _0x3fe862['match'](/vert/i)&&(_0x2cda65+=_0x1ce97e,_0x4a73fd+=_0x15e28b[_0x2acb7b(0x7f0)]()?-_0x3ef83b:_0x3ef83b);}}_0x15e28b[_0x2acb7b(0xb0f)](_0x2cda65,_0x4a73fd,_0x3e3ee3,_0x31a734,_0x2ef9d9,-0x1),_0x15e28b[_0x2acb7b(0x135)](_0xd67ecb);}if(_0x3d8b43)_0x59cb2e['setWaitMode']('battleMove');}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x71d),_0x20379b=>{const _0x26a637=_0x45d586;if(!SceneManager[_0x26a637(0x81a)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x20379b,_0x20379b);const _0x3fac1a=$gameTemp[_0x26a637(0x421)](),_0x3507e0=VisuMZ['CreateActionSequenceTargets'](_0x20379b[_0x26a637(0x4ca)]),_0x472fdb=VisuMZ[_0x26a637(0x552)](_0x20379b['Targets2']),_0x211a30=_0x20379b[_0x26a637(0x4c9)];let _0x314bf0=_0x20379b[_0x26a637(0x274)];const _0x288708=_0x20379b[_0x26a637(0x631)],_0x251edb=_0x20379b['OffsetX'],_0x134f4b=_0x20379b[_0x26a637(0x261)],_0x481ddd=_0x20379b[_0x26a637(0x7de)],_0xb31c85=_0x20379b[_0x26a637(0xe3)],_0x1e8cb4=_0x20379b['EasingType'],_0x24b92f=_0x20379b[_0x26a637(0x937)],_0x7d2db4=_0x20379b['WaitForMovement'],_0x5f3dc7=Math['min'](..._0x472fdb['map'](_0x32ff8e=>_0x32ff8e[_0x26a637(0xa7b)]()[_0x26a637(0x5bb)]-_0x32ff8e[_0x26a637(0xa7b)]()[_0x26a637(0x102)]()/0x2)),_0x3059e8=Math[_0x26a637(0x61a)](..._0x472fdb['map'](_0x149fb6=>_0x149fb6[_0x26a637(0xa7b)]()[_0x26a637(0x5bb)]+_0x149fb6[_0x26a637(0xa7b)]()[_0x26a637(0x102)]()/0x2)),_0x148901=Math[_0x26a637(0xb4b)](..._0x472fdb[_0x26a637(0x7a1)](_0x1a8f27=>_0x1a8f27[_0x26a637(0xa7b)]()[_0x26a637(0x83d)]-_0x1a8f27[_0x26a637(0xa7b)]()[_0x26a637(0xa23)]())),_0x34ec57=Math[_0x26a637(0x61a)](..._0x472fdb[_0x26a637(0x7a1)](_0x2ad2e3=>_0x2ad2e3[_0x26a637(0xa7b)]()[_0x26a637(0x83d)])),_0x564b55=_0x472fdb[_0x26a637(0x229)](_0x31a4dc=>_0x31a4dc['isActor']())[_0x26a637(0x1c9)],_0x3fd943=_0x472fdb[_0x26a637(0x229)](_0x5c9106=>_0x5c9106[_0x26a637(0x690)]())[_0x26a637(0x1c9)];let _0x12a6d1=0x0,_0x4dc2ac=0x0;if(_0x211a30['match'](/front/i))_0x12a6d1=_0x564b55>=_0x3fd943?_0x5f3dc7:_0x3059e8;else{if(_0x211a30[_0x26a637(0x95f)](/middle/i))_0x12a6d1=(_0x5f3dc7+_0x3059e8)/0x2,_0x314bf0=-0x1;else _0x211a30['match'](/back/i)&&(_0x12a6d1=_0x564b55>=_0x3fd943?_0x3059e8:_0x5f3dc7);}if(_0x211a30[_0x26a637(0x95f)](/head/i))_0x4dc2ac=_0x148901;else{if(_0x211a30['match'](/center/i))_0x4dc2ac=(_0x148901+_0x34ec57)/0x2;else _0x211a30[_0x26a637(0x95f)](/base/i)&&(_0x4dc2ac=_0x34ec57);}if(!_0x3fac1a)return;for(const _0x4b2539 of _0x3507e0){if(!_0x4b2539)continue;let _0x4d3ad3=_0x12a6d1,_0x3fd01b=_0x4dc2ac;if(_0x288708[_0x26a637(0x95f)](/none/i))_0x4d3ad3+=_0x251edb,_0x3fd01b+=_0x134f4b;else{if(_0x288708[_0x26a637(0x95f)](/horz/i)&&_0x288708['match'](/vert/i))_0x4d3ad3+=_0x4b2539[_0x26a637(0x7f0)]()?-_0x251edb:_0x251edb,_0x3fd01b+=_0x4b2539[_0x26a637(0x7f0)]()?-_0x134f4b:_0x134f4b;else{if(_0x288708[_0x26a637(0x95f)](/horz/i))_0x4d3ad3+=_0x4b2539[_0x26a637(0x7f0)]()?-_0x251edb:_0x251edb,_0x3fd01b+=_0x134f4b;else _0x288708[_0x26a637(0x95f)](/vert/i)&&(_0x4d3ad3+=_0x251edb,_0x3fd01b+=_0x4b2539[_0x26a637(0x7f0)]()?-_0x134f4b:_0x134f4b);}}_0x4b2539['moveBattlerHomeToPoint'](_0x4d3ad3,_0x3fd01b,_0x481ddd,_0xb31c85,_0x1e8cb4,_0x314bf0),_0x4b2539[_0x26a637(0x135)](_0x24b92f);}if(_0x7d2db4)_0x3fac1a[_0x26a637(0x9c6)](_0x26a637(0x365));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xaa0),_0x59907c=>{const _0x24c273=_0x45d586;if(!SceneManager[_0x24c273(0x81a)]())return;if(!$gameSystem[_0x24c273(0x138)]())return;VisuMZ[_0x24c273(0x536)](_0x59907c,_0x59907c);const _0x27c2a9=VisuMZ[_0x24c273(0x552)](_0x59907c[_0x24c273(0xba0)]);let _0x9f9c93=_0x59907c[_0x24c273(0x1fe)]['match'](/back/i);for(const _0x11326a of _0x27c2a9){if(!_0x11326a)continue;if(_0x59907c[_0x24c273(0x1fe)][_0x24c273(0x95f)](/rand/i))_0x9f9c93=Math[_0x24c273(0x356)](0x2);_0x11326a[_0x24c273(0x3f8)](!!_0x9f9c93);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x3f0),_0x54dca2=>{const _0x5aab75=_0x45d586;if(!SceneManager[_0x5aab75(0x81a)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x5aab75(0x536)](_0x54dca2,_0x54dca2);const _0x7d8ec1=VisuMZ[_0x5aab75(0x552)](_0x54dca2[_0x5aab75(0xba0)]),_0x2c733d=_0x54dca2[_0x5aab75(0x916)];for(const _0x5af6f1 of _0x7d8ec1){if(!_0x5af6f1)continue;const _0x39ab13=_0x54dca2[_0x5aab75(0x257)](_0x5af6f1)||{'x':0x0,'y':0x0};let _0x27c0d7=_0x39ab13['x'],_0x4f1dd8=_0x39ab13['y'];_0x5af6f1[_0x5aab75(0xb49)](Math[_0x5aab75(0x31d)](_0x27c0d7),Math[_0x5aab75(0x31d)](_0x4f1dd8),!!_0x2c733d);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x9ed),_0x5ca319=>{const _0x3faa3b=_0x45d586;if(!SceneManager[_0x3faa3b(0x81a)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x5ca319,_0x5ca319);const _0xd30ed9=VisuMZ[_0x3faa3b(0x552)](_0x5ca319[_0x3faa3b(0xba0)]);let _0x2eae0b=_0x5ca319['Point'];const _0x581ae9=_0x5ca319[_0x3faa3b(0x916)];for(const _0x46fa9f of _0xd30ed9){if(!_0x46fa9f)continue;let _0x52c633=_0x46fa9f[_0x3faa3b(0xa7b)]()[_0x3faa3b(0x5bb)],_0x1ba880=_0x46fa9f[_0x3faa3b(0xa7b)]()[_0x3faa3b(0x83d)];if(_0x2eae0b['match'](/home/i))_0x52c633=_0x46fa9f[_0x3faa3b(0xa7b)]()[_0x3faa3b(0x47c)],_0x1ba880=_0x46fa9f[_0x3faa3b(0xa7b)]()['_homeY'];else{if(_0x2eae0b[_0x3faa3b(0x95f)](/center/i))_0x52c633=Graphics[_0x3faa3b(0x6ae)]/0x2,_0x1ba880=Graphics[_0x3faa3b(0x56c)]/0x2;else _0x2eae0b[_0x3faa3b(0x95f)](/point (\d+), (\d+)/i)&&(_0x52c633=Number(RegExp['$1']),_0x1ba880=Number(RegExp['$2']));}_0x46fa9f[_0x3faa3b(0xb49)](Math[_0x3faa3b(0x31d)](_0x52c633),Math[_0x3faa3b(0x31d)](_0x1ba880),!!_0x581ae9);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xb52),_0xbdb8b2=>{const _0xad18d5=_0x45d586;if(!SceneManager[_0xad18d5(0x81a)]())return;if(!$gameSystem[_0xad18d5(0x138)]())return;VisuMZ[_0xad18d5(0x536)](_0xbdb8b2,_0xbdb8b2);const _0x161646=VisuMZ['CreateActionSequenceTargets'](_0xbdb8b2[_0xad18d5(0x4ca)]),_0x48102a=VisuMZ[_0xad18d5(0x552)](_0xbdb8b2[_0xad18d5(0x188)]),_0x3613d3=_0x48102a[_0xad18d5(0x7a1)](_0x3cb469=>_0x3cb469&&_0x3cb469[_0xad18d5(0xa7b)]()?_0x3cb469[_0xad18d5(0xa7b)]()[_0xad18d5(0x5bb)]:0x0)/(_0x48102a['length']||0x1),_0x165a21=_0x48102a[_0xad18d5(0x7a1)](_0x54292c=>_0x54292c&&_0x54292c[_0xad18d5(0xa7b)]()?_0x54292c[_0xad18d5(0xa7b)]()[_0xad18d5(0x83d)]:0x0)/(_0x48102a[_0xad18d5(0x1c9)]||0x1),_0x5325cf=_0xbdb8b2[_0xad18d5(0x916)];for(const _0x54a943 of _0x161646){if(!_0x54a943)continue;_0x54a943['setBattlerFacePoint'](Math[_0xad18d5(0x31d)](_0x3613d3),Math[_0xad18d5(0x31d)](_0x165a21),!!_0x5325cf);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Movement_Float',_0x1339a6=>{const _0x203c47=_0x45d586;if(!SceneManager[_0x203c47(0x81a)]())return;VisuMZ[_0x203c47(0x536)](_0x1339a6,_0x1339a6);const _0x449536=$gameTemp['getLastPluginCommandInterpreter'](),_0x139cb8=VisuMZ[_0x203c47(0x552)](_0x1339a6['Targets']),_0x13013c=_0x1339a6[_0x203c47(0x8d0)],_0x3b48c0=_0x1339a6[_0x203c47(0x7de)],_0x15d18f=_0x1339a6['EasingType'],_0xbc160f=_0x1339a6[_0x203c47(0x962)];if(!_0x449536)return;for(const _0xab73bb of _0x139cb8){if(!_0xab73bb)continue;_0xab73bb['floatBattler'](_0x13013c,_0x3b48c0,_0x15d18f);}if(_0xbc160f)_0x449536[_0x203c47(0x9c6)](_0x203c47(0x9d4));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x12f),_0x4be388=>{const _0x4455ba=_0x45d586;if(!SceneManager[_0x4455ba(0x81a)]())return;VisuMZ[_0x4455ba(0x536)](_0x4be388,_0x4be388);const _0x9a6244=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x9a6244)return;const _0x3f71bb=VisuMZ['CreateActionSequenceTargets'](_0x4be388[_0x4455ba(0xba0)]);for(const _0x13370c of _0x3f71bb){if(!_0x13370c)continue;_0x13370c[_0x4455ba(0x9df)]();}BattleManager['_subject']&&BattleManager['_subject']['performActionEnd']();if(_0x4be388['WaitForMovement'])_0x9a6244[_0x4455ba(0x9c6)](_0x4455ba(0x365));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x784),_0x30f134=>{const _0x559ee3=_0x45d586;if(!SceneManager[_0x559ee3(0x81a)]())return;VisuMZ['ConvertParams'](_0x30f134,_0x30f134);const _0x4dadf3=$gameTemp[_0x559ee3(0x421)](),_0x35e6c1=VisuMZ['CreateActionSequenceTargets'](_0x30f134['Targets']),_0xdeecf6=_0x30f134['Height'],_0x1d37fd=_0x30f134[_0x559ee3(0x7de)],_0x3ff4c1=_0x30f134[_0x559ee3(0xbbe)];if(!_0x4dadf3)return;for(const _0x2f807e of _0x35e6c1){if(!_0x2f807e)continue;_0x2f807e['jumpBattler'](_0xdeecf6,_0x1d37fd);}if(_0x3ff4c1)_0x4dadf3[_0x559ee3(0x9c6)]('battleJump');}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],'ActSeq_Movement_MoveBy',_0x41c6d2=>{const _0x35783c=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x35783c(0x138)]())return;VisuMZ[_0x35783c(0x536)](_0x41c6d2,_0x41c6d2);const _0x40769f=$gameTemp[_0x35783c(0x421)](),_0x1067e3=VisuMZ[_0x35783c(0x552)](_0x41c6d2[_0x35783c(0xba0)]),_0x465d53=_0x41c6d2[_0x35783c(0xa97)],_0x3a9ae3=_0x41c6d2[_0x35783c(0xbd6)],_0x4bd773=_0x41c6d2[_0x35783c(0x698)],_0x5a85cb=_0x41c6d2[_0x35783c(0x7de)],_0x567958=_0x41c6d2[_0x35783c(0xe3)],_0x3e14ca=_0x41c6d2[_0x35783c(0xb1d)],_0x7c666e=_0x41c6d2[_0x35783c(0x937)],_0x4d3d83=_0x41c6d2[_0x35783c(0x9c0)];if(!_0x40769f)return;for(const _0xa51abd of _0x1067e3){if(!_0xa51abd)continue;let _0x5c2ece=_0x3a9ae3,_0x40a622=_0x4bd773;if(_0x465d53[_0x35783c(0x95f)](/horz/i))_0x5c2ece*=_0xa51abd[_0x35783c(0x7f0)]()?-0x1:0x1;if(_0x465d53[_0x35783c(0x95f)](/vert/i))_0x40a622*=_0xa51abd[_0x35783c(0x7f0)]()?-0x1:0x1;_0xa51abd[_0x35783c(0x5f3)](_0x5c2ece,_0x40a622,_0x5a85cb,_0x567958,_0x3e14ca),_0xa51abd['requestMotion'](_0x7c666e);}if(_0x4d3d83)_0x40769f[_0x35783c(0x9c6)]('battleMove');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Movement_MoveToJsPoint',_0x295f09=>{const _0x163a1c=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x163a1c(0x138)]())return;VisuMZ[_0x163a1c(0x536)](_0x295f09,_0x295f09);const _0x8e71ff=$gameTemp[_0x163a1c(0x421)](),_0x35ef9a=VisuMZ[_0x163a1c(0x552)](_0x295f09[_0x163a1c(0xba0)]),_0x5d2acc=_0x295f09[_0x163a1c(0x631)],_0x47c97a=_0x295f09['OffsetX'],_0x5d750c=_0x295f09[_0x163a1c(0x261)],_0x5573f0=_0x295f09[_0x163a1c(0x7de)],_0x17bdc5=_0x295f09[_0x163a1c(0xe3)],_0x126a2b=_0x295f09[_0x163a1c(0xb1d)],_0x23c23b=_0x295f09[_0x163a1c(0x937)],_0x4ffc75=_0x295f09[_0x163a1c(0x9c0)];if(!_0x8e71ff)return;for(const _0x55a27c of _0x35ef9a){if(!_0x55a27c)continue;const _0x33bb9f=_0x295f09['DestinationJS'](_0x55a27c)||{'x':0x0,'y':0x0};let _0x441763=_0x33bb9f['x'],_0x206798=_0x33bb9f['y'];if(_0x5d2acc['match'](/none/i))_0x441763+=_0x47c97a,_0x206798+=_0x5d750c;else{if(_0x5d2acc[_0x163a1c(0x95f)](/horz/i)&&_0x5d2acc[_0x163a1c(0x95f)](/vert/i))_0x441763+=_0x55a27c[_0x163a1c(0x7f0)]()?-_0x47c97a:_0x47c97a,_0x206798+=_0x55a27c[_0x163a1c(0x7f0)]()?-_0x5d750c:_0x5d750c;else{if(_0x5d2acc[_0x163a1c(0x95f)](/horz/i))_0x441763+=_0x55a27c[_0x163a1c(0x7f0)]()?-_0x47c97a:_0x47c97a,_0x206798+=_0x5d750c;else _0x5d2acc[_0x163a1c(0x95f)](/vert/i)&&(_0x441763+=_0x47c97a,_0x206798+=_0x55a27c['isActor']()?-_0x5d750c:_0x5d750c);}}_0x55a27c[_0x163a1c(0xb12)](_0x441763,_0x206798,_0x5573f0,_0x17bdc5,_0x126a2b,-0x1),_0x55a27c['requestMotion'](_0x23c23b);}if(_0x4ffc75)_0x8e71ff[_0x163a1c(0x9c6)]('battleMove');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xcf),_0x57aa33=>{const _0x1d75de=_0x45d586;if(!SceneManager[_0x1d75de(0x81a)]())return;if(!$gameSystem[_0x1d75de(0x138)]())return;VisuMZ[_0x1d75de(0x536)](_0x57aa33,_0x57aa33);const _0x427536=$gameTemp['getLastPluginCommandInterpreter'](),_0x46607b=VisuMZ[_0x1d75de(0x552)](_0x57aa33[_0x1d75de(0xba0)]),_0x337bec=_0x57aa33['Destination'],_0xa90c4b=_0x57aa33[_0x1d75de(0x631)],_0x42c65c=_0x57aa33[_0x1d75de(0x34f)],_0x4cd6b4=_0x57aa33[_0x1d75de(0x261)],_0x2b082e=_0x57aa33[_0x1d75de(0x7de)],_0x486ae4=_0x57aa33[_0x1d75de(0xe3)],_0x4e2f86=_0x57aa33['EasingType'],_0x4a1df5=_0x57aa33['MotionType'],_0x46e9c8=_0x57aa33[_0x1d75de(0x9c0)];if(!_0x427536)return;for(const _0x31d888 of _0x46607b){if(!_0x31d888)continue;let _0x1819f0=_0x31d888[_0x1d75de(0xa7b)]()[_0x1d75de(0x5bb)],_0x12cf25=_0x31d888[_0x1d75de(0xa7b)]()['_baseY'];if(_0x337bec['match'](/home/i))_0x1819f0=_0x31d888[_0x1d75de(0xa7b)]()['_homeX'],_0x12cf25=_0x31d888[_0x1d75de(0xa7b)]()[_0x1d75de(0xac0)];else{if(_0x337bec[_0x1d75de(0x95f)](/center/i))_0x1819f0=Graphics[_0x1d75de(0x6ae)]/0x2,_0x12cf25=Graphics[_0x1d75de(0x56c)]/0x2;else _0x337bec['match'](/point (\d+), (\d+)/i)&&(_0x1819f0=Number(RegExp['$1']),_0x12cf25=Number(RegExp['$2']));}if(_0xa90c4b[_0x1d75de(0x95f)](/none/i))_0x1819f0+=_0x42c65c,_0x12cf25+=_0x4cd6b4;else{if(_0xa90c4b[_0x1d75de(0x95f)](/horz/i)&&_0xa90c4b[_0x1d75de(0x95f)](/vert/i))_0x1819f0+=_0x31d888[_0x1d75de(0x7f0)]()?-_0x42c65c:_0x42c65c,_0x12cf25+=_0x31d888[_0x1d75de(0x7f0)]()?-_0x4cd6b4:_0x4cd6b4;else{if(_0xa90c4b['match'](/horz/i))_0x1819f0+=_0x31d888[_0x1d75de(0x7f0)]()?-_0x42c65c:_0x42c65c,_0x12cf25+=_0x4cd6b4;else _0xa90c4b[_0x1d75de(0x95f)](/vert/i)&&(_0x1819f0+=_0x42c65c,_0x12cf25+=_0x31d888[_0x1d75de(0x7f0)]()?-_0x4cd6b4:_0x4cd6b4);}}_0x31d888[_0x1d75de(0xb12)](_0x1819f0,_0x12cf25,_0x2b082e,_0x486ae4,_0x4e2f86,-0x1),_0x31d888[_0x1d75de(0x135)](_0x4a1df5);}if(_0x46e9c8)_0x427536[_0x1d75de(0x9c6)](_0x1d75de(0x365));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x802),_0x2e25d5=>{const _0x4649a4=_0x45d586;if(!SceneManager[_0x4649a4(0x81a)]())return;if(!$gameSystem[_0x4649a4(0x138)]())return;VisuMZ[_0x4649a4(0x536)](_0x2e25d5,_0x2e25d5);const _0x5a32ab=$gameTemp['getLastPluginCommandInterpreter'](),_0x45a10b=VisuMZ[_0x4649a4(0x552)](_0x2e25d5[_0x4649a4(0x4ca)]),_0x7984e0=VisuMZ[_0x4649a4(0x552)](_0x2e25d5[_0x4649a4(0x188)]),_0x41c0ec=_0x2e25d5[_0x4649a4(0x4c9)];let _0x4f3da4=_0x2e25d5[_0x4649a4(0x274)];const _0x27d264=_0x2e25d5[_0x4649a4(0x631)],_0x420332=_0x2e25d5[_0x4649a4(0x34f)],_0x7c401c=_0x2e25d5[_0x4649a4(0x261)],_0x18cc7c=_0x2e25d5[_0x4649a4(0x7de)],_0x3a9ea4=_0x2e25d5[_0x4649a4(0xe3)],_0x5969ad=_0x2e25d5[_0x4649a4(0xb1d)],_0x5c10c0=_0x2e25d5[_0x4649a4(0x937)],_0x3e32f2=_0x2e25d5[_0x4649a4(0x9c0)],_0xf07541=Math['min'](..._0x7984e0[_0x4649a4(0x7a1)](_0x2dad63=>_0x2dad63[_0x4649a4(0xa7b)]()[_0x4649a4(0x5bb)]-_0x2dad63[_0x4649a4(0xa7b)]()[_0x4649a4(0x102)]()/0x2)),_0x3eb174=Math[_0x4649a4(0x61a)](..._0x7984e0[_0x4649a4(0x7a1)](_0x2282d6=>_0x2282d6[_0x4649a4(0xa7b)]()[_0x4649a4(0x5bb)]+_0x2282d6[_0x4649a4(0xa7b)]()[_0x4649a4(0x102)]()/0x2)),_0x36c55a=Math[_0x4649a4(0xb4b)](..._0x7984e0[_0x4649a4(0x7a1)](_0x3d89b3=>_0x3d89b3['battler']()[_0x4649a4(0x83d)]-_0x3d89b3['battler']()[_0x4649a4(0xa23)]())),_0x53931d=Math['max'](..._0x7984e0[_0x4649a4(0x7a1)](_0x203811=>_0x203811[_0x4649a4(0xa7b)]()[_0x4649a4(0x83d)])),_0x4a8bf7=_0x7984e0[_0x4649a4(0x229)](_0x5b27f5=>_0x5b27f5[_0x4649a4(0x7f0)]())['length'],_0x34125f=_0x7984e0[_0x4649a4(0x229)](_0x3f9723=>_0x3f9723[_0x4649a4(0x690)]())[_0x4649a4(0x1c9)];let _0x25007=0x0,_0x54faa6=0x0;if(_0x41c0ec[_0x4649a4(0x95f)](/front/i))_0x25007=_0x4a8bf7>=_0x34125f?_0xf07541:_0x3eb174;else{if(_0x41c0ec[_0x4649a4(0x95f)](/middle/i))_0x25007=(_0xf07541+_0x3eb174)/0x2,_0x4f3da4=-0x1;else _0x41c0ec[_0x4649a4(0x95f)](/back/i)&&(_0x25007=_0x4a8bf7>=_0x34125f?_0x3eb174:_0xf07541);}if(_0x41c0ec['match'](/head/i))_0x54faa6=_0x36c55a;else{if(_0x41c0ec[_0x4649a4(0x95f)](/center/i))_0x54faa6=(_0x36c55a+_0x53931d)/0x2;else _0x41c0ec[_0x4649a4(0x95f)](/base/i)&&(_0x54faa6=_0x53931d);}if(!_0x5a32ab)return;for(const _0x40e243 of _0x45a10b){if(!_0x40e243)continue;let _0xc3cd08=_0x25007,_0x1af48c=_0x54faa6;if(_0x27d264['match'](/none/i))_0xc3cd08+=_0x420332,_0x1af48c+=_0x7c401c;else{if(_0x27d264['match'](/horz/i)&&_0x27d264[_0x4649a4(0x95f)](/vert/i))_0xc3cd08+=_0x40e243[_0x4649a4(0x7f0)]()?-_0x420332:_0x420332,_0x1af48c+=_0x40e243[_0x4649a4(0x7f0)]()?-_0x7c401c:_0x7c401c;else{if(_0x27d264[_0x4649a4(0x95f)](/horz/i))_0xc3cd08+=_0x40e243[_0x4649a4(0x7f0)]()?-_0x420332:_0x420332,_0x1af48c+=_0x7c401c;else _0x27d264[_0x4649a4(0x95f)](/vert/i)&&(_0xc3cd08+=_0x420332,_0x1af48c+=_0x40e243['isActor']()?-_0x7c401c:_0x7c401c);}}_0x40e243['moveBattlerToPoint'](_0xc3cd08,_0x1af48c,_0x18cc7c,_0x3a9ea4,_0x5969ad,_0x4f3da4),_0x40e243[_0x4649a4(0x135)](_0x5c10c0);}if(_0x3e32f2)_0x5a32ab[_0x4649a4(0x9c6)](_0x4649a4(0x365));}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x82b),_0x49368d=>{const _0x321710=_0x45d586;if(!SceneManager[_0x321710(0x81a)]())return;VisuMZ[_0x321710(0x536)](_0x49368d,_0x49368d);const _0x34fdc5=$gameTemp[_0x321710(0x421)](),_0x5d1f6e=VisuMZ[_0x321710(0x552)](_0x49368d[_0x321710(0xba0)]),_0x4151a4=_0x49368d[_0x321710(0x433)],_0x54360a=_0x49368d[_0x321710(0x7de)],_0x1743df=_0x49368d['EasingType'],_0x2156f7=_0x49368d['WaitForOpacity'];if(!_0x34fdc5)return;for(const _0x3f3222 of _0x5d1f6e){if(!_0x3f3222)continue;_0x3f3222[_0x321710(0x6a1)](_0x4151a4,_0x54360a,_0x1743df);}if(_0x2156f7)_0x34fdc5['setWaitMode']('battleOpacity');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x29c),_0x382958=>{const _0x527369=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x527369(0x536)](_0x382958,_0x382958);const _0xc06b14=$gameTemp['getLastPluginCommandInterpreter'](),_0x1590c1=VisuMZ[_0x527369(0x552)](_0x382958['Targets']),_0x23afbe=_0x382958['ScaleX'],_0x3e4539=_0x382958[_0x527369(0x6dd)],_0x1be045=_0x382958[_0x527369(0x7de)],_0xdde762=_0x382958[_0x527369(0xb1d)],_0x1958b1=_0x382958['WaitForScale'];if(!_0xc06b14)return;for(const _0x1054ec of _0x1590c1){if(!_0x1054ec)continue;_0x1054ec[_0x527369(0x43a)](_0x23afbe,_0x3e4539,_0x1be045,_0xdde762);}if(_0x1958b1)_0xc06b14[_0x527369(0x9c6)]('battleGrow');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Movement_Skew',_0x387d8c=>{const _0x2e9a8e=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2e9a8e(0x536)](_0x387d8c,_0x387d8c);const _0x4795e9=$gameTemp[_0x2e9a8e(0x421)](),_0x310810=VisuMZ[_0x2e9a8e(0x552)](_0x387d8c[_0x2e9a8e(0xba0)]),_0x453875=_0x387d8c[_0x2e9a8e(0x897)],_0x1e3ccd=_0x387d8c[_0x2e9a8e(0xa55)],_0x3d7997=_0x387d8c[_0x2e9a8e(0x7de)],_0x9d18b9=_0x387d8c[_0x2e9a8e(0xb1d)],_0x3b7fa3=_0x387d8c[_0x2e9a8e(0xa7d)];if(!_0x4795e9)return;for(const _0x553610 of _0x310810){if(!_0x553610)continue;_0x553610[_0x2e9a8e(0x567)](_0x453875,_0x1e3ccd,_0x3d7997,_0x9d18b9);}if(_0x3b7fa3)_0x4795e9[_0x2e9a8e(0x9c6)](_0x2e9a8e(0x739));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x2f8),_0x2f5c6b=>{const _0xdd9f4b=_0x45d586;if(!SceneManager[_0xdd9f4b(0x81a)]())return;VisuMZ[_0xdd9f4b(0x536)](_0x2f5c6b,_0x2f5c6b);const _0x46551e=$gameTemp[_0xdd9f4b(0x421)](),_0x5738f6=VisuMZ['CreateActionSequenceTargets'](_0x2f5c6b[_0xdd9f4b(0xba0)]),_0x2453e2=_0x2f5c6b[_0xdd9f4b(0xbde)],_0x4c40fd=_0x2f5c6b[_0xdd9f4b(0x7de)],_0x3ab1dc=_0x2f5c6b[_0xdd9f4b(0xb1d)],_0x1b12d2=_0x2f5c6b[_0xdd9f4b(0x2ca)],_0x1cad2e=_0x2f5c6b[_0xdd9f4b(0xb85)];if(!_0x46551e)return;for(const _0x328e36 of _0x5738f6){if(!_0x328e36)continue;_0x328e36[_0xdd9f4b(0x658)](_0x2453e2,_0x4c40fd,_0x3ab1dc,_0x1b12d2);}if(_0x1cad2e)_0x46551e[_0xdd9f4b(0x9c6)](_0xdd9f4b(0x687));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x290),_0x39d162=>{const _0x17722a=_0x45d586;if(!SceneManager['isSceneBattle']())return;const _0x3bfee8=$gameTemp[_0x17722a(0x421)]();if(!_0x3bfee8)return;_0x3bfee8[_0x17722a(0x9c6)](_0x17722a(0x9d4));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Movement_WaitForJump',_0x3afeae=>{const _0x5c3933=_0x45d586;if(!SceneManager['isSceneBattle']())return;const _0x2b5b40=$gameTemp[_0x5c3933(0x421)]();if(!_0x2b5b40)return;_0x2b5b40['setWaitMode']('battleJump');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Movement_WaitForMovement',_0x5ca894=>{const _0x221950=_0x45d586;if(!SceneManager['isSceneBattle']())return;const _0x5eaf6c=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5eaf6c)return;_0x5eaf6c[_0x221950(0x9c6)](_0x221950(0x365));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Movement_WaitForOpacity',_0x411aaa=>{const _0x192acc=_0x45d586;if(!SceneManager[_0x192acc(0x81a)]())return;const _0x3370a9=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3370a9)return;_0x3370a9['setWaitMode'](_0x192acc(0xa58));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x861),_0x295a75=>{const _0x3efb59=_0x45d586;if(!SceneManager[_0x3efb59(0x81a)]())return;const _0x1c714d=$gameTemp[_0x3efb59(0x421)]();if(!_0x1c714d)return;_0x1c714d['setWaitMode']('battleGrow');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x129),_0x854f4e=>{const _0x286749=_0x45d586;if(!SceneManager[_0x286749(0x81a)]())return;const _0x59e5a3=$gameTemp[_0x286749(0x421)]();if(!_0x59e5a3)return;_0x59e5a3[_0x286749(0x9c6)](_0x286749(0x739));}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x4d5),_0x1ee48e=>{const _0x1b1289=_0x45d586;if(!SceneManager[_0x1b1289(0x81a)]())return;const _0x852010=$gameTemp[_0x1b1289(0x421)]();if(!_0x852010)return;_0x852010[_0x1b1289(0x9c6)](_0x1b1289(0x687));}),VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x2ea)]=function(){const _0x9f17e3=_0x45d586;if(!Imported[_0x9f17e3(0xbd7)])return;if(VisuMZ['ActSeqProjectiles'][_0x9f17e3(0x23e)]<1.08){let _0x10a6aa='';_0x10a6aa+=_0x9f17e3(0x906),_0x10a6aa+=_0x9f17e3(0x94d),alert(_0x10a6aa),SceneManager[_0x9f17e3(0x16f)]();}},PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x4af),_0x3da2e1=>{const _0x510a3e=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x510a3e(0xbd7)])return;VisuMZ[_0x510a3e(0x536)](_0x3da2e1,_0x3da2e1),VisuMZ[_0x510a3e(0x6fe)][_0x510a3e(0x2ea)]();const _0x7ab8ad=$gameTemp[_0x510a3e(0x421)](),_0x5c3717=_0x3da2e1[_0x510a3e(0x887)];if(!_0x7ab8ad)return;const _0x3c10a7=BattleManager['_spriteset'];if(!_0x3c10a7)return;_0x3c10a7['createActionSequenceProjectile'](_0x3da2e1);if(_0x5c3717)_0x7ab8ad[_0x510a3e(0x9c6)]('battleProjectiles');}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Projectile_Icon',_0x39f6c8=>{const _0x3ed484=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3ed484(0xbd7)])return;VisuMZ['ConvertParams'](_0x39f6c8,_0x39f6c8),VisuMZ[_0x3ed484(0x6fe)][_0x3ed484(0x2ea)]();const _0x5b9373=$gameTemp[_0x3ed484(0x421)](),_0x5d2c1e=_0x39f6c8[_0x3ed484(0x887)];if(!_0x5b9373)return;const _0x36fb25=BattleManager['_spriteset'];if(!_0x36fb25)return;_0x36fb25[_0x3ed484(0x164)](_0x39f6c8);if(_0x5d2c1e)_0x5b9373[_0x3ed484(0x9c6)](_0x3ed484(0x66e));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x374),_0x20a091=>{const _0x4ea8c5=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4ea8c5(0xbd7)])return;VisuMZ[_0x4ea8c5(0x536)](_0x20a091,_0x20a091),VisuMZ['BattleCore'][_0x4ea8c5(0x2ea)]();const _0x484206=$gameTemp[_0x4ea8c5(0x421)](),_0x11a0f3=_0x20a091[_0x4ea8c5(0x887)];if(!_0x484206)return;const _0x1b1cc4=BattleManager[_0x4ea8c5(0x992)];if(!_0x1b1cc4)return;_0x1b1cc4[_0x4ea8c5(0x164)](_0x20a091);if(_0x11a0f3)_0x484206['setWaitMode']('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x69c),_0x681042=>{const _0xf5255b=_0x45d586;if(!SceneManager[_0xf5255b(0x81a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0xf5255b(0x536)](_0x681042,_0x681042);const _0x1ffe4c=$gameTemp[_0xf5255b(0x421)](),_0x423bc3=_0x681042[_0xf5255b(0xa7d)];if(!_0x1ffe4c)return;$gameScreen[_0xf5255b(0x59b)](_0x681042[_0xf5255b(0x897)],_0x681042[_0xf5255b(0xa55)],_0x681042[_0xf5255b(0x7de)],_0x681042['EasingType']);if(_0x423bc3)_0x1ffe4c[_0xf5255b(0x9c6)](_0xf5255b(0x1bc));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0xa10),_0x21a2e5=>{const _0x4d4df9=_0x45d586;if(!SceneManager[_0x4d4df9(0x81a)]())return;if(!Imported[_0x4d4df9(0x2ff)])return;VisuMZ[_0x4d4df9(0x536)](_0x21a2e5,_0x21a2e5);const _0x4185ac=$gameTemp[_0x4d4df9(0x421)](),_0x42f759=_0x21a2e5[_0x4d4df9(0xa7d)];if(!_0x4185ac)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x21a2e5[_0x4d4df9(0x7de)],_0x21a2e5[_0x4d4df9(0xb1d)]);if(_0x42f759)_0x4185ac[_0x4d4df9(0x9c6)](_0x4d4df9(0x1bc));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Skew_WaitForSkew',_0x17be8c=>{const _0x1d6d0c=_0x45d586;if(!SceneManager[_0x1d6d0c(0x81a)]())return;if(!Imported[_0x1d6d0c(0x2ff)])return;const _0x3ad59d=$gameTemp[_0x1d6d0c(0x421)]();if(!_0x3ad59d)return;_0x3ad59d[_0x1d6d0c(0x9c6)](_0x1d6d0c(0x1bc));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Target_CurrentIndex',_0x4e182e=>{const _0x5e6d0e=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5e6d0e(0x536)](_0x4e182e,_0x4e182e);const _0x4c88d6=$gameTemp[_0x5e6d0e(0x421)](),_0x320171=_0x4e182e['Index'],_0x45abd8=_0x4e182e[_0x5e6d0e(0x890)];if(!_0x4c88d6)return;BattleManager['_targetIndex']=_0x320171,BattleManager[_0x5e6d0e(0x798)]=BattleManager[_0x5e6d0e(0x424)]?BattleManager[_0x5e6d0e(0x424)][BattleManager[_0x5e6d0e(0x157)]]||null:null,BattleManager[_0x5e6d0e(0x798)]&&_0x45abd8['toUpperCase']()[_0x5e6d0e(0x379)]()!==_0x5e6d0e(0xaab)&&_0x4c88d6[_0x5e6d0e(0x493)]([_0x45abd8]);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x77f),_0x3d96bd=>{const _0x188812=_0x45d586;if(!SceneManager[_0x188812(0x81a)]())return;VisuMZ[_0x188812(0x536)](_0x3d96bd,_0x3d96bd);const _0x4c4b81=$gameTemp['getLastPluginCommandInterpreter'](),_0x585909=_0x3d96bd[_0x188812(0x890)];if(!_0x4c4b81)return;BattleManager[_0x188812(0x157)]++,BattleManager[_0x188812(0x798)]=BattleManager[_0x188812(0x424)][BattleManager[_0x188812(0x157)]]||null,BattleManager[_0x188812(0x798)]&&_0x585909[_0x188812(0x689)]()[_0x188812(0x379)]()!==_0x188812(0xaab)&&_0x4c4b81[_0x188812(0x493)]([_0x585909]);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x731),_0x4054fc=>{const _0x4179e1=_0x45d586;if(!SceneManager[_0x4179e1(0x81a)]())return;VisuMZ['ConvertParams'](_0x4054fc,_0x4054fc);const _0x4f7719=$gameTemp[_0x4179e1(0x421)](),_0x261060=_0x4054fc[_0x4179e1(0x890)];if(!_0x4f7719)return;BattleManager[_0x4179e1(0x157)]--,BattleManager[_0x4179e1(0x798)]=BattleManager['_allTargets'][BattleManager[_0x4179e1(0x157)]]||null,BattleManager[_0x4179e1(0x798)]&&_0x261060[_0x4179e1(0x689)]()[_0x4179e1(0x379)]()!==_0x4179e1(0xaab)&&_0x4f7719[_0x4179e1(0x493)]([_0x261060]);}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x6b7),_0x4f94ba=>{const _0x49f773=_0x45d586;if(!SceneManager[_0x49f773(0x81a)]())return;VisuMZ[_0x49f773(0x536)](_0x4f94ba,_0x4f94ba);const _0x47a0fd=$gameTemp[_0x49f773(0x421)](),_0x4cbdca=_0x4f94ba[_0x49f773(0x308)],_0x580d42=_0x4f94ba[_0x49f773(0x890)];if(!_0x47a0fd)return;const _0x1f413f=BattleManager[_0x49f773(0x157)];for(;;){BattleManager[_0x49f773(0x157)]=Math[_0x49f773(0x356)](BattleManager[_0x49f773(0x424)][_0x49f773(0x1c9)]);if(!_0x4cbdca)break;if(BattleManager[_0x49f773(0x157)]!==_0x1f413f)break;if(BattleManager[_0x49f773(0x424)][_0x49f773(0x1c9)]<=0x1){BattleManager[_0x49f773(0x157)]=0x0;break;}}BattleManager[_0x49f773(0x798)]=BattleManager[_0x49f773(0x424)][BattleManager['_targetIndex']]||null,BattleManager[_0x49f773(0x798)]&&_0x580d42[_0x49f773(0x689)]()[_0x49f773(0x379)]()!==_0x49f773(0xaab)&&_0x47a0fd['command119']([_0x580d42]);}),PluginManager[_0x45d586(0xb11)](pluginData['name'],'ActSeq_BattleVoice_PlayCommonLine',_0x2ef900=>{const _0x3a6b17=_0x45d586;if(!SceneManager[_0x3a6b17(0x81a)]())return;if(!Imported[_0x3a6b17(0x35a)])return;if(!ConfigManager[_0x3a6b17(0x9de)])return;VisuMZ['ConvertParams'](_0x2ef900,_0x2ef900);const _0x3f5843=VisuMZ[_0x3a6b17(0x552)](_0x2ef900[_0x3a6b17(0xba0)]);let _0x3c0726=_0x2ef900['VoiceLine']||'';for(const _0x64fef5 of _0x3f5843){if(!_0x64fef5)continue;_0x64fef5['playBattleVoice'](_0x3c0726);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_BattleVoice_PlaySpecialLine',_0x3718ae=>{const _0x7c38fd=_0x45d586;if(!SceneManager[_0x7c38fd(0x81a)]())return;if(!Imported['VisuMZ_3_BattleVoices'])return;if(!ConfigManager['battleVoices'])return;VisuMZ[_0x7c38fd(0x536)](_0x3718ae,_0x3718ae);const _0xd9ff7c=VisuMZ[_0x7c38fd(0x552)](_0x3718ae['Targets']);let _0x29ccfe=(_0x3718ae[_0x7c38fd(0xbee)]||'')+(_0x3718ae[_0x7c38fd(0xdb)]||'');for(const _0x433118 of _0xd9ff7c){if(!_0x433118)continue;_0x433118[_0x7c38fd(0x1da)](_0x29ccfe);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x4fc),_0x49f2d8=>{const _0x12f94d=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x12f94d(0x536)](_0x49f2d8,_0x49f2d8);const _0x451498=VisuMZ['CreateActionSequenceTargets'](_0x49f2d8[_0x12f94d(0xba0)]);for(const _0x432a7f of _0x451498){if(!_0x432a7f)continue;if(!_0x432a7f[_0x12f94d(0x7f0)]())continue;_0x432a7f['clearActiveWeaponSlot']();}}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x32d),_0x1c86e0=>{const _0x3afba5=_0x45d586;if(!SceneManager[_0x3afba5(0x81a)]())return;VisuMZ[_0x3afba5(0x536)](_0x1c86e0,_0x1c86e0);const _0x572eeb=$gameTemp[_0x3afba5(0x421)]();let _0x3e4a0c=![];const _0x16ad93=_0x1c86e0[_0x3afba5(0x890)],_0x3f22fe=VisuMZ[_0x3afba5(0x552)](_0x1c86e0[_0x3afba5(0xba0)]);for(const _0x10948f of _0x3f22fe){if(!_0x10948f)continue;if(!_0x10948f[_0x3afba5(0x7f0)]())continue;_0x10948f[_0x3afba5(0x866)](),_0x10948f[_0x3afba5(0x633)]()[_0x3afba5(0x1c9)]>0x0?_0x3e4a0c=!![]:_0x10948f[_0x3afba5(0x140)]();}_0x3e4a0c&&_0x16ad93['toUpperCase']()[_0x3afba5(0x379)]()!==_0x3afba5(0xaab)&&_0x572eeb[_0x3afba5(0x493)]([_0x16ad93]);}),PluginManager['registerCommand'](pluginData[_0x45d586(0x5c2)],_0x45d586(0x37f),_0x598121=>{const _0x373a18=_0x45d586;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x373a18(0x536)](_0x598121,_0x598121);let _0x185e33=_0x598121[_0x373a18(0x2ac)];_0x185e33--,_0x185e33=Math['max'](_0x185e33,0x0);const _0x5eae1d=VisuMZ[_0x373a18(0x552)](_0x598121[_0x373a18(0xba0)]);for(const _0x1acf30 of _0x5eae1d){if(!_0x1acf30)continue;if(!_0x1acf30['isActor']())continue;_0x1acf30[_0x373a18(0xa9a)](_0x185e33);}}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],'ActSeq_Zoom_Scale',_0x673056=>{const _0x342dbe=_0x45d586;if(!SceneManager[_0x342dbe(0x81a)]())return;if(!Imported[_0x342dbe(0x2ff)])return;VisuMZ[_0x342dbe(0x536)](_0x673056,_0x673056);const _0x515849=$gameTemp[_0x342dbe(0x421)](),_0x485bf4=_0x673056['WaitForZoom'];if(!_0x515849)return;$gameScreen[_0x342dbe(0xb51)](_0x673056[_0x342dbe(0x150)],_0x673056['Duration'],_0x673056[_0x342dbe(0xb1d)]);if(_0x485bf4)_0x515849['setWaitMode'](_0x342dbe(0x48e));}),PluginManager[_0x45d586(0xb11)](pluginData[_0x45d586(0x5c2)],_0x45d586(0x42c),_0x5846cc=>{const _0x2b4754=_0x45d586;if(!SceneManager[_0x2b4754(0x81a)]())return;if(!Imported[_0x2b4754(0x2ff)])return;VisuMZ[_0x2b4754(0x536)](_0x5846cc,_0x5846cc);const _0x4d867d=$gameTemp[_0x2b4754(0x421)](),_0x1432ca=_0x5846cc['WaitForZoom'];if(!_0x4d867d)return;$gameScreen[_0x2b4754(0xb51)](0x1,_0x5846cc[_0x2b4754(0x7de)],_0x5846cc[_0x2b4754(0xb1d)]);if(_0x1432ca)_0x4d867d['setWaitMode'](_0x2b4754(0x48e));}),PluginManager[_0x45d586(0xb11)](pluginData['name'],_0x45d586(0x444),_0x4d380e=>{const _0x32a680=_0x45d586;if(!SceneManager[_0x32a680(0x81a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x559b6c=$gameTemp[_0x32a680(0x421)]();if(!_0x559b6c)return;_0x559b6c[_0x32a680(0x9c6)]('battleZoom');}),VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x7bf)]=Scene_Boot['prototype'][_0x45d586(0x53f)],Scene_Boot[_0x45d586(0x19f)]['onDatabaseLoaded']=function(){const _0x242c26=_0x45d586;this[_0x242c26(0x9bb)](),this[_0x242c26(0xa74)](),this[_0x242c26(0xa8b)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x242c26(0x6fe)][_0x242c26(0x7bf)][_0x242c26(0x1b5)](this),this[_0x242c26(0x615)](),this[_0x242c26(0x67a)](),this[_0x242c26(0x4a1)](),this['process_VisuMZ_BattleCore_CommonEventKeys']();},Scene_Boot['prototype'][_0x45d586(0x615)]=function(){const _0x3efccd=_0x45d586;if(VisuMZ[_0x3efccd(0x461)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x3efccd(0xb99)](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot[_0x45d586(0x19f)][_0x45d586(0x9bb)]=function(){const _0x18bce5=_0x45d586,_0x5d9bbb=$dataSystem['weaponTypes'][_0x18bce5(0x1c9)];for(let _0x3a57d7=0x0;_0x3a57d7<_0x5d9bbb;_0x3a57d7++){const _0xb897af=$dataSystem[_0x18bce5(0x18a)][_0x3a57d7];if(_0xb897af)continue;$dataSystem['attackMotions'][_0x3a57d7]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x18924a=_0x45d586,_0x525f64=VisuMZ[_0x18924a(0x6fe)][_0x18924a(0xa41)];_0x525f64[_0x18924a(0x244)][_0x18924a(0x7e0)]===undefined&&(_0x525f64[_0x18924a(0x244)][_0x18924a(0x7e0)]=_0x18924a(0x3e7)),_0x525f64[_0x18924a(0x540)][_0x18924a(0xa6b)]===undefined&&(_0x525f64[_0x18924a(0x540)][_0x18924a(0xa6b)]=![]),_0x525f64[_0x18924a(0x401)][_0x18924a(0xa6b)]===undefined&&(_0x525f64[_0x18924a(0x401)][_0x18924a(0xa6b)]=!![]),_0x525f64[_0x18924a(0x540)][_0x18924a(0x4b0)]===undefined&&(_0x525f64[_0x18924a(0x540)][_0x18924a(0x4b0)]=![]),_0x525f64['Actor'][_0x18924a(0x859)]===undefined&&(_0x525f64['Actor']['PrioritySortActors']=!![]);},VisuMZ[_0x45d586(0x58f)]={},Scene_Boot[_0x45d586(0x19f)][_0x45d586(0xa8b)]=function(){const _0x469352=_0x45d586;for(const _0x1e6583 of VisuMZ[_0x469352(0x6fe)]['Settings'][_0x469352(0x244)][_0x469352(0xa30)]){if(!_0x1e6583)continue;const _0xe96f2c=_0x1e6583[_0x469352(0x519)][_0x469352(0x689)]()['trim']();VisuMZ['DamageStyles'][_0xe96f2c]=_0x1e6583;}},VisuMZ['BattleCore']['RegExp']={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x45d586(0x19f)][_0x45d586(0x7ff)]=function(){const _0x32ab80=_0x45d586,_0x3aeb87=VisuMZ[_0x32ab80(0x6fe)]['RegExp'],_0x256e10='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0xd2ee12=[[_0x32ab80(0x56e),_0x32ab80(0x811)],[_0x32ab80(0xa49),'POST-']],_0x3aadf5=[[_0x32ab80(0x901),_0x32ab80(0x179)],['%1Damage%2JS','JS\x20%1DAMAGE\x20%2']],_0x46b996=[['',''],['AsUser','AS\x20USER'],['AsTarget','AS\x20TARGET']];for(const _0x1f1897 of _0x3aadf5){for(const _0x2083e1 of _0x46b996){for(const _0x40ce69 of _0xd2ee12){const _0x38c638=_0x1f1897[0x0][_0x32ab80(0x534)](_0x40ce69[0x0],_0x2083e1[0x0]),_0x4fd576=_0x1f1897[0x1][_0x32ab80(0x534)](_0x40ce69[0x1],_0x2083e1[0x1])['trim'](),_0x28dc7d=new RegExp(_0x256e10[_0x32ab80(0x534)](_0x4fd576),'i');_0x3aeb87[_0x38c638]=_0x28dc7d;}}}const _0x431bdb=[[_0x32ab80(0x831),_0x32ab80(0x86b)],['%1EndActionJS',_0x32ab80(0x6c9)]];for(const _0x92d2de of _0x431bdb){for(const _0xda6f9c of _0xd2ee12){const _0x4f1d4b=_0x92d2de[0x0]['format'](_0xda6f9c[0x0]),_0x89f05b=_0x92d2de[0x1][_0x32ab80(0x534)](_0xda6f9c[0x1]),_0x1dbb23=new RegExp(_0x256e10['format'](_0x89f05b),'i');_0x3aeb87[_0x4f1d4b]=_0x1dbb23;}}const _0x183dad=[[_0x32ab80(0x24a),_0x32ab80(0x2f3)],[_0x32ab80(0x4e8),_0x32ab80(0x415)],[_0x32ab80(0x440),_0x32ab80(0x117)],[_0x32ab80(0x266),_0x32ab80(0x453)],[_0x32ab80(0x46e),_0x32ab80(0x1a2)],[_0x32ab80(0xaa3),_0x32ab80(0x2d5)],[_0x32ab80(0x575),_0x32ab80(0x306)],[_0x32ab80(0x9f0),'JS\x20%1END\x20TURN'],[_0x32ab80(0x467),'JS\x20%1REGENERATE']];for(const _0x1e2ae9 of _0x183dad){for(const _0x218bb8 of _0xd2ee12){const _0x3f1a44=_0x1e2ae9[0x0]['format'](_0x218bb8[0x0]),_0x139659=_0x1e2ae9[0x1]['format'](_0x218bb8[0x1]),_0x3f6d94=new RegExp(_0x256e10['format'](_0x139659),'i');_0x3aeb87[_0x3f1a44]=_0x3f6d94;}}},Scene_Boot['prototype'][_0x45d586(0x9fb)]=function(){const _0x43548e=_0x45d586,_0x3e24fa=$dataSkills['concat']($dataItems);for(const _0x1970fc of _0x3e24fa){if(!_0x1970fc)continue;VisuMZ[_0x43548e(0x6fe)][_0x43548e(0xb97)](_0x1970fc);}},Scene_Boot[_0x45d586(0x19f)][_0x45d586(0xb99)]=function(){const _0x54def9=_0x45d586,_0x3e8fce=$dataActors[_0x54def9(0xb10)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x525ab4 of _0x3e8fce){if(!_0x525ab4)continue;VisuMZ[_0x54def9(0x6fe)][_0x54def9(0xa16)](_0x525ab4),_0x525ab4['autoRemovalTiming']!==undefined&&VisuMZ['BattleCore'][_0x54def9(0x41c)](_0x525ab4);}},Scene_Boot[_0x45d586(0x19f)][_0x45d586(0x67a)]=function(){const _0x2f5a37=_0x45d586,_0x26757d=VisuMZ[_0x2f5a37(0x6fe)]['Settings'][_0x2f5a37(0x4c4)][_0x2f5a37(0x9d2)],_0x34b4c4=[];for(const _0x5e3aa0 of _0x26757d){const _0x4bdac8=$dataTroops[_0x5e3aa0];if(_0x4bdac8)_0x34b4c4['push'](JsonEx[_0x2f5a37(0x9cc)](_0x4bdac8));}for(const _0x40190f of $dataTroops){if(!_0x40190f)continue;for(const _0x536a7f of _0x34b4c4){if(_0x536a7f['id']===_0x40190f['id'])continue;_0x40190f[_0x2f5a37(0xbda)]=_0x40190f[_0x2f5a37(0xbda)]['concat'](_0x536a7f[_0x2f5a37(0xbda)]);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x10a61a=_0x45d586,_0x551e10=VisuMZ[_0x10a61a(0x6fe)][_0x10a61a(0xa41)]['Mechanics'];if(_0x551e10[_0x10a61a(0x95e)]>0x0&&$dataCommonEvents[_0x551e10[_0x10a61a(0x95e)]]){const _0x310dfc=$dataCommonEvents[_0x551e10[_0x10a61a(0x95e)]],_0x323659=_0x310dfc[_0x10a61a(0x505)][_0x10a61a(0x1c9)]-0x2,_0x259012=_0x310dfc[_0x10a61a(0x505)][_0x323659];if(_0x259012&&_0x259012[_0x10a61a(0xa27)]!==0xe6){const _0x599e31={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x5aa06a=_0x310dfc[_0x10a61a(0x505)][_0x10a61a(0x8c2)]();_0x310dfc[_0x10a61a(0x505)][_0x10a61a(0x96c)](_0x599e31),_0x310dfc[_0x10a61a(0x505)][_0x10a61a(0x96c)](_0x5aa06a);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x1ac7bc=_0x45d586;VisuMZ[_0x1ac7bc(0x6fe)][_0x1ac7bc(0x4c5)](),VisuMZ[_0x1ac7bc(0x6fe)][_0x1ac7bc(0x89e)]($dataSkills),VisuMZ['BattleCore'][_0x1ac7bc(0x89e)]($dataItems);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x4c5)]=function(){const _0x3d2e5f=_0x45d586;VisuMZ['BattleCore'][_0x3d2e5f(0x387)]={};for(const _0x4667de of $dataCommonEvents){if(!_0x4667de)continue;if(_0x4667de['name']['match'](/\[(.*)\]/i)){let _0x4b121f=String(RegExp['$1'])[_0x3d2e5f(0x646)](/,/g,'')[_0x3d2e5f(0x689)]()[_0x3d2e5f(0x379)]();VisuMZ[_0x3d2e5f(0x6fe)][_0x3d2e5f(0x387)][_0x4b121f]=_0x4667de['id'];}}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x89e)]=function(_0x52aaab){const _0x4827f2=_0x45d586;for(const _0xca7a09 of _0x52aaab){if(!_0xca7a09)continue;VisuMZ[_0x4827f2(0x6fe)]['BindCommonEventKeysForObj'](_0xca7a09);}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x701)]=function(_0x41e158){const _0x177e64=_0x45d586;if(!_0x41e158)return;if(!_0x41e158[_0x177e64(0x49d)])return;VisuMZ[_0x177e64(0x6fe)][_0x177e64(0x387)]=VisuMZ[_0x177e64(0x6fe)][_0x177e64(0x387)]||{};const _0x2eb8a8=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x20f550=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x4f79c8=[];const _0x4d461d=_0x41e158[_0x177e64(0x34a)][_0x177e64(0x95f)](_0x2eb8a8);if(_0x4d461d){for(const _0x3496b3 of _0x4d461d){_0x3496b3[_0x177e64(0x95f)](_0x2eb8a8);const _0x2a73ea=String(RegExp['$1'])[_0x177e64(0xaea)](',')['map'](_0x654595=>String(_0x654595)[_0x177e64(0x689)]()[_0x177e64(0x379)]());_0x4f79c8=_0x4f79c8[_0x177e64(0xb10)](_0x2a73ea);}!_0x41e158[_0x177e64(0x34a)][_0x177e64(0x95f)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x41e158['note']+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}if(_0x41e158[_0x177e64(0x34a)][_0x177e64(0x95f)](_0x20f550)){const _0x201233=String(RegExp['$1'])[_0x177e64(0xaea)](/[\r\n]+/)[_0x177e64(0x7a1)](_0xdc4a0c=>String(_0xdc4a0c)[_0x177e64(0x689)]()['trim']());_0x4f79c8=_0x4f79c8[_0x177e64(0xb10)](_0x201233);!_0x41e158['note'][_0x177e64(0x95f)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x41e158[_0x177e64(0x34a)]+=_0x177e64(0xb02));;}for(const _0x31f251 of _0x4f79c8){if(VisuMZ[_0x177e64(0x6fe)]['_commonEventKey'][_0x31f251]){const _0x54a621=VisuMZ['BattleCore'][_0x177e64(0x387)][_0x31f251],_0x10d20a={'code':0x2c,'dataId':_0x54a621,'value1':0x1,'value2':0x0};_0x41e158[_0x177e64(0x49d)]['push'](_0x10d20a);}}},Scene_Boot[_0x45d586(0x19f)][_0x45d586(0x3e6)]=function(){const _0x293263=_0x45d586,_0xa341f0=$dataSkills['concat']($dataItems);for(const _0x3e07e0 of _0xa341f0){if(!_0x3e07e0)continue;VisuMZ[_0x293263(0x6fe)][_0x293263(0x817)](_0x3e07e0);}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x3c3)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x45d586(0x3c3)]=function(_0x43e75d){const _0x56b911=_0x45d586;VisuMZ['BattleCore']['ParseActorNotetags']&&VisuMZ[_0x56b911(0x6fe)]['ParseActorNotetags'][_0x56b911(0x1b5)](this,_0x43e75d),VisuMZ[_0x56b911(0x6fe)]['Parse_Notetags_TraitObjects'](_0x43e75d);},VisuMZ['BattleCore'][_0x45d586(0x68f)]=VisuMZ[_0x45d586(0x68f)],VisuMZ['ParseClassNotetags']=function(_0x2c1f9a){const _0x362dd9=_0x45d586;VisuMZ[_0x362dd9(0x6fe)][_0x362dd9(0x68f)]&&VisuMZ[_0x362dd9(0x6fe)][_0x362dd9(0x68f)][_0x362dd9(0x1b5)](this,_0x2c1f9a),VisuMZ['BattleCore'][_0x362dd9(0xa16)](_0x2c1f9a);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x6c8)]=VisuMZ[_0x45d586(0x6c8)],VisuMZ[_0x45d586(0x6c8)]=function(_0x4c4f50){const _0x4dd475=_0x45d586;VisuMZ['BattleCore'][_0x4dd475(0x6c8)]&&VisuMZ[_0x4dd475(0x6fe)]['ParseSkillNotetags']['call'](this,_0x4c4f50),VisuMZ[_0x4dd475(0x6fe)]['Parse_Notetags_Action'](_0x4c4f50),VisuMZ['BattleCore'][_0x4dd475(0x817)](_0x4c4f50);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xf4)]=VisuMZ[_0x45d586(0xf4)],VisuMZ[_0x45d586(0xf4)]=function(_0x163f04){const _0x422ecb=_0x45d586;VisuMZ[_0x422ecb(0x6fe)][_0x422ecb(0xf4)]&&VisuMZ[_0x422ecb(0x6fe)][_0x422ecb(0xf4)]['call'](this,_0x163f04),VisuMZ[_0x422ecb(0x6fe)][_0x422ecb(0xb97)](_0x163f04),VisuMZ[_0x422ecb(0x6fe)][_0x422ecb(0x817)](_0x163f04);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x754)]=VisuMZ[_0x45d586(0x754)],VisuMZ[_0x45d586(0x754)]=function(_0x3fd318){const _0x18010d=_0x45d586;VisuMZ[_0x18010d(0x6fe)][_0x18010d(0x754)]&&VisuMZ['BattleCore'][_0x18010d(0x754)][_0x18010d(0x1b5)](this,_0x3fd318),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x3fd318);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x13d)]=VisuMZ[_0x45d586(0x13d)],VisuMZ['ParseArmorNotetags']=function(_0x1f2973){const _0x22d9b5=_0x45d586;VisuMZ['BattleCore'][_0x22d9b5(0x13d)]&&VisuMZ[_0x22d9b5(0x6fe)][_0x22d9b5(0x13d)][_0x22d9b5(0x1b5)](this,_0x1f2973),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x1f2973);},VisuMZ[_0x45d586(0x6fe)]['ParseEnemyNotetags']=VisuMZ[_0x45d586(0x968)],VisuMZ[_0x45d586(0x968)]=function(_0x47d001){const _0x146bb0=_0x45d586;VisuMZ[_0x146bb0(0x6fe)][_0x146bb0(0x968)]&&VisuMZ[_0x146bb0(0x6fe)][_0x146bb0(0x968)][_0x146bb0(0x1b5)](this,_0x47d001),VisuMZ['BattleCore'][_0x146bb0(0xa16)](_0x47d001);},VisuMZ['BattleCore']['ParseStateNotetags']=VisuMZ[_0x45d586(0x582)],VisuMZ[_0x45d586(0x582)]=function(_0x32a05a){const _0x2fc263=_0x45d586;VisuMZ[_0x2fc263(0x6fe)]['ParseStateNotetags']&&VisuMZ[_0x2fc263(0x6fe)][_0x2fc263(0x582)][_0x2fc263(0x1b5)](this,_0x32a05a),VisuMZ[_0x2fc263(0x6fe)][_0x2fc263(0xa16)](_0x32a05a),VisuMZ[_0x2fc263(0x6fe)][_0x2fc263(0x41c)](_0x32a05a);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xb97)]=function(_0x425c8c){const _0x2fe3c4=_0x45d586,_0x29b496=[_0x2fe3c4(0x5cb),_0x2fe3c4(0x960),_0x2fe3c4(0x335),_0x2fe3c4(0xe1),_0x2fe3c4(0x2b1),_0x2fe3c4(0x581),_0x2fe3c4(0xaf1),_0x2fe3c4(0x966)];for(const _0x2e9074 of _0x29b496){VisuMZ[_0x2fe3c4(0x6fe)][_0x2fe3c4(0x511)](_0x425c8c,_0x2e9074);}const _0x5a7503=_0x425c8c['note'];_0x5a7503[_0x2fe3c4(0x95f)](/<ALWAYS CRITICAL/i)&&(_0x425c8c[_0x2fe3c4(0xb5d)][_0x2fe3c4(0x1f7)]=!![]),_0x5a7503[_0x2fe3c4(0x95f)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x425c8c[_0x2fe3c4(0x5ed)]=Math[_0x2fe3c4(0x61a)](0x1,Number(RegExp['$1']))),_0x5a7503[_0x2fe3c4(0x95f)](/<TARGET:[ ](.*)>/i)&&(_0x425c8c[_0x2fe3c4(0x657)]=String(RegExp['$1'])['toUpperCase']()[_0x2fe3c4(0x379)]());},VisuMZ['BattleCore'][_0x45d586(0xa16)]=function(_0x47934d){const _0x5f0165=_0x45d586,_0x3ca591=[_0x5f0165(0x989),'PostApplyAsUserJS',_0x5f0165(0x95a),_0x5f0165(0x694),_0x5f0165(0x607),_0x5f0165(0x80c),'PreDamageAsTargetJS',_0x5f0165(0xbb3),'PreStartActionJS',_0x5f0165(0x581),_0x5f0165(0xaf1),_0x5f0165(0x966),_0x5f0165(0xaa9),_0x5f0165(0x90b),'PreEndBattleJS',_0x5f0165(0x932),_0x5f0165(0x440),_0x5f0165(0x266),_0x5f0165(0x46e),'EscapeFailureJS',_0x5f0165(0x1bb),'PostStartTurnJS',_0x5f0165(0x50c),_0x5f0165(0x76b),_0x5f0165(0xbcc),_0x5f0165(0x6a2)];for(const _0x336190 of _0x3ca591){VisuMZ[_0x5f0165(0x6fe)][_0x5f0165(0x511)](_0x47934d,_0x336190);}const _0x5b97fb=['jsAccuracy',_0x5f0165(0x5d0),_0x5f0165(0x22e),_0x5f0165(0x7ab),'jsCritRateAsTarget'];for(const _0xbf7291 of _0x5b97fb){VisuMZ['BattleCore'][_0x5f0165(0x62d)](_0x47934d,_0xbf7291);}},VisuMZ['BattleCore'][_0x45d586(0x817)]=function(_0x4ae3ac){const _0x14ba51=_0x45d586,_0x2df853=_0x4ae3ac[_0x14ba51(0x34a)];if(_0x2df853['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x2b00f6=String(RegExp['$1']),_0xee3517=VisuMZ[_0x14ba51(0x6fe)][_0x14ba51(0x2f1)](_0x4ae3ac,'Targets');VisuMZ[_0x14ba51(0x6fe)][_0x14ba51(0xa7a)](_0x2b00f6,_0xee3517);}if(_0x2df853[_0x14ba51(0x95f)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x18225b=String(RegExp['$1']),_0x1efb5a=VisuMZ[_0x14ba51(0x6fe)][_0x14ba51(0x2f1)](_0x4ae3ac,_0x14ba51(0x9a3));VisuMZ['BattleCore'][_0x14ba51(0x98d)](_0x18225b,_0x1efb5a);}},VisuMZ['BattleCore']['JS']={},VisuMZ['BattleCore'][_0x45d586(0x511)]=function(_0xc634ec,_0x172b23){const _0xafd279=_0x45d586,_0x8d9e0d=_0xc634ec[_0xafd279(0x34a)];if(_0x8d9e0d[_0xafd279(0x95f)](VisuMZ[_0xafd279(0x6fe)][_0xafd279(0xa98)][_0x172b23])){const _0x9d3dd6=RegExp['$1'],_0x4a5643='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0xafd279(0x534)](_0x9d3dd6),_0x306e94=VisuMZ[_0xafd279(0x6fe)][_0xafd279(0x2f1)](_0xc634ec,_0x172b23);VisuMZ['BattleCore']['JS'][_0x306e94]=new Function(_0x4a5643);}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x2f1)]=function(_0x5cc47b,_0x267541){const _0x3f415a=_0x45d586;if(VisuMZ[_0x3f415a(0x2f1)])return VisuMZ[_0x3f415a(0x2f1)](_0x5cc47b,_0x267541);let _0x134f2c='';if($dataActors[_0x3f415a(0x840)](_0x5cc47b))_0x134f2c=_0x3f415a(0x279)[_0x3f415a(0x534)](_0x5cc47b['id'],_0x267541);if($dataClasses['includes'](_0x5cc47b))_0x134f2c=_0x3f415a(0x400)[_0x3f415a(0x534)](_0x5cc47b['id'],_0x267541);if($dataSkills[_0x3f415a(0x840)](_0x5cc47b))_0x134f2c=_0x3f415a(0xb39)[_0x3f415a(0x534)](_0x5cc47b['id'],_0x267541);if($dataItems[_0x3f415a(0x840)](_0x5cc47b))_0x134f2c=_0x3f415a(0x49e)[_0x3f415a(0x534)](_0x5cc47b['id'],_0x267541);if($dataWeapons[_0x3f415a(0x840)](_0x5cc47b))_0x134f2c=_0x3f415a(0xa1c)[_0x3f415a(0x534)](_0x5cc47b['id'],_0x267541);if($dataArmors[_0x3f415a(0x840)](_0x5cc47b))_0x134f2c=_0x3f415a(0x1b2)[_0x3f415a(0x534)](_0x5cc47b['id'],_0x267541);if($dataEnemies[_0x3f415a(0x840)](_0x5cc47b))_0x134f2c=_0x3f415a(0x12e)['format'](_0x5cc47b['id'],_0x267541);if($dataStates[_0x3f415a(0x840)](_0x5cc47b))_0x134f2c=_0x3f415a(0x79b)[_0x3f415a(0x534)](_0x5cc47b['id'],_0x267541);return _0x134f2c;},VisuMZ[_0x45d586(0x6fe)]['createTargetsJS']=function(_0x36fe6d,_0x287c29){const _0x39ff44=_0x45d586,_0x1aee4d='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x39ff44(0x534)](_0x36fe6d);VisuMZ['BattleCore']['JS'][_0x287c29]=new Function(_0x1aee4d);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x98d)]=function(_0x1d5074,_0x52cd3c){const _0x168ced=_0x45d586,_0x3840bf=_0x168ced(0xab7)['format'](_0x1d5074);VisuMZ['BattleCore']['JS'][_0x52cd3c]=new Function(_0x3840bf);},VisuMZ['BattleCore'][_0x45d586(0x62d)]=function(_0x52fae7,_0x3468f8){const _0x1a0d07=_0x45d586,_0x68dc4=_0x52fae7['note'];if(_0x68dc4['match'](VisuMZ[_0x1a0d07(0x6fe)][_0x1a0d07(0xa98)][_0x3468f8])){const _0x215812=RegExp['$1'],_0x1b1acf=_0x1a0d07(0x14e)[_0x1a0d07(0x534)](_0x215812),_0x10a9bb=VisuMZ[_0x1a0d07(0x6fe)][_0x1a0d07(0x2f1)](_0x52fae7,_0x3468f8);VisuMZ[_0x1a0d07(0x6fe)]['JS'][_0x10a9bb]=new Function(_0x1b1acf);}},VisuMZ['BattleCore'][_0x45d586(0x41c)]=function(_0x4f0038){const _0x5bb441=_0x45d586;_0x4f0038[_0x5bb441(0x30c)]='-';const _0x561f41=_0x4f0038[_0x5bb441(0x34a)];_0x561f41[_0x5bb441(0x95f)](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x4f0038[_0x5bb441(0x30c)]=String(RegExp['$1'])[_0x5bb441(0x379)]()),_0x561f41['match'](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x4f0038['statusDescription']=String(RegExp['$1'])[_0x5bb441(0x379)]()),_0x561f41['match'](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING)>/i)&&(_0x4f0038[_0x5bb441(0xa11)]=!![]);},TextManager[_0x45d586(0xbdc)]=VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x6f3)][_0x45d586(0x200)],TextManager[_0x45d586(0x25c)]=VisuMZ[_0x45d586(0x6fe)]['Settings']['AutoBattle'][_0x45d586(0xa38)],TextManager[_0x45d586(0xa34)]=VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0x2cb)][_0x45d586(0xa7c)],TextManager['visualHpGauge']=VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0x518)][_0x45d586(0x519)],ColorManager[_0x45d586(0xb9c)]=function(_0x4e3c28){const _0x289ddf=_0x45d586;return _0x4e3c28=String(_0x4e3c28),_0x4e3c28[_0x289ddf(0x95f)](/#(.*)/i)?_0x289ddf(0xa95)['format'](String(RegExp['$1'])):this[_0x289ddf(0x614)](Number(_0x4e3c28));},DataManager[_0x45d586(0x64e)]=function(_0x2e52be){const _0x4b37b5=_0x45d586;if(_0x2e52be['note']['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1d3bf5=String(RegExp['$1'])[_0x4b37b5(0x689)]()[_0x4b37b5(0x379)]();if(_0x1d3bf5===_0x4b37b5(0x5e1))return _0x4b37b5(0x5e1);if(VisuMZ[_0x4b37b5(0x58f)][_0x1d3bf5])return _0x1d3bf5;}const _0x3ee288=VisuMZ[_0x4b37b5(0x6fe)]['Settings'][_0x4b37b5(0x244)]['DefaultDamageStyle']['toUpperCase']()[_0x4b37b5(0x379)]();if(VisuMZ[_0x4b37b5(0x58f)][_0x3ee288])return _0x3ee288;return _0x4b37b5(0x5e1);},DataManager[_0x45d586(0x1b0)]=function(_0x59a417){const _0x10f872=_0x45d586;_0x59a417=_0x59a417[_0x10f872(0x689)]()[_0x10f872(0x379)](),this[_0x10f872(0x393)]=this[_0x10f872(0x393)]||{};if(this['_stypeIDs'][_0x59a417])return this['_stypeIDs'][_0x59a417];for(let _0x59ebb0=0x1;_0x59ebb0<0x64;_0x59ebb0++){if(!$dataSystem[_0x10f872(0xbcb)][_0x59ebb0])continue;let _0x100a76=$dataSystem['skillTypes'][_0x59ebb0][_0x10f872(0x689)]()[_0x10f872(0x379)]();_0x100a76=_0x100a76[_0x10f872(0x646)](/\x1I\[(\d+)\]/gi,''),_0x100a76=_0x100a76[_0x10f872(0x646)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x100a76]=_0x59ebb0;}return this[_0x10f872(0x393)][_0x59a417]||0x0;},DataManager[_0x45d586(0x184)]=function(_0x308614){const _0x4dcc05=_0x45d586;_0x308614=_0x308614[_0x4dcc05(0x689)]()['trim'](),this[_0x4dcc05(0x547)]=this['_skillIDs']||{};if(this['_skillIDs'][_0x308614])return this[_0x4dcc05(0x547)][_0x308614];for(const _0x37813a of $dataSkills){if(!_0x37813a)continue;this[_0x4dcc05(0x547)][_0x37813a['name'][_0x4dcc05(0x689)]()['trim']()]=_0x37813a['id'];}return this[_0x4dcc05(0x547)][_0x308614]||0x0;},DataManager[_0x45d586(0x316)]=function(_0x31e890){const _0x5e379c=_0x45d586;_0x31e890=_0x31e890[_0x5e379c(0x689)]()['trim'](),this[_0x5e379c(0x520)]=this['_enemyIDs']||{};if(this[_0x5e379c(0x520)][_0x31e890])return this[_0x5e379c(0x520)][_0x31e890];for(const _0x40451d of $dataEnemies){if(!_0x40451d)continue;this['_enemyIDs'][_0x40451d[_0x5e379c(0x5c2)][_0x5e379c(0x689)]()['trim']()]=_0x40451d['id'];}return this[_0x5e379c(0x520)][_0x31e890]||0x0;},DataManager[_0x45d586(0xadf)]=function(_0x13a1f1){const _0x2d164d=_0x45d586;_0x13a1f1=_0x13a1f1['toUpperCase']()['trim'](),this[_0x2d164d(0x2f0)]=this[_0x2d164d(0x2f0)]||{};if(this[_0x2d164d(0x2f0)][_0x13a1f1])return this['_wtypeIDs'][_0x13a1f1];for(let _0x3b054d=0x1;_0x3b054d<0x64;_0x3b054d++){if(!$dataSystem[_0x2d164d(0x141)][_0x3b054d])continue;let _0x10e11e=$dataSystem[_0x2d164d(0x141)][_0x3b054d][_0x2d164d(0x689)]()[_0x2d164d(0x379)]();_0x10e11e=_0x10e11e['replace'](/\x1I\[(\d+)\]/gi,''),_0x10e11e=_0x10e11e[_0x2d164d(0x646)](/\\I\[(\d+)\]/gi,''),this[_0x2d164d(0x2f0)][_0x10e11e]=_0x3b054d;}return this[_0x2d164d(0x2f0)][_0x2d164d(0x204)]=0x0,this[_0x2d164d(0x2f0)][_0x13a1f1]||0x0;},DataManager[_0x45d586(0x4e1)]=function(_0x3f74a8){const _0x3b7ea9=_0x45d586,_0x8490a4=_0x3b7ea9(0x4cc);let _0x277dc2=_0x3f74a8[_0x3b7ea9(0x49b)],_0x330eb6=_0x3f74a8[_0x3b7ea9(0x5c2)];const _0x433f0a=_0x3f74a8[_0x3b7ea9(0x34a)];return _0x433f0a['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x277dc2=Number(RegExp['$1'])),_0x433f0a[_0x3b7ea9(0x95f)](/<DISPLAY TEXT: (.*)>/i)&&(_0x330eb6=String(RegExp['$1'])),_0x8490a4[_0x3b7ea9(0x534)](_0x277dc2,_0x330eb6);},DataManager[_0x45d586(0x742)]=function(_0x44553f){const _0x3de1b0=_0x45d586;return _0x44553f['note'][_0x3de1b0(0x95f)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x44553f[_0x3de1b0(0x5c2)];},DataManager[_0x45d586(0x721)]=function(_0x3201be){const _0x4bdec5=_0x45d586;return _0x3201be[_0x4bdec5(0x34a)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x3201be[_0x4bdec5(0x49b)];},DataManager['swapEnemyIDs']=function(_0x4415ac){const _0x2e4465=_0x45d586,_0x49b66c=$dataEnemies[_0x4415ac];if(_0x49b66c){if(_0x49b66c['note'][_0x2e4465(0x95f)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x56ca86=String(RegExp['$1'])[_0x2e4465(0xaea)](/[\r\n]+/)[_0x2e4465(0x4e7)](''),_0x14937a=this[_0x2e4465(0xa3d)](_0x56ca86);_0x4415ac=this[_0x2e4465(0x316)](_0x14937a)||_0x4415ac,_0x4415ac=DataManager[_0x2e4465(0x1d6)](_0x4415ac);}}return _0x4415ac;},DataManager['processRandomizedData']=function(_0x417986){const _0x17ea85=_0x45d586;let _0x5ef351=0x0;const _0x4a02ea={};for(const _0x326797 of _0x417986){if(_0x326797[_0x17ea85(0x95f)](/(.*):[ ](\d+)/i)){const _0x22ee49=String(RegExp['$1'])['trim'](),_0x3abfd1=Number(RegExp['$2']);_0x4a02ea[_0x22ee49]=_0x3abfd1,_0x5ef351+=_0x3abfd1;}else{if(_0x326797['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x5f51bd=String(RegExp['$1'])[_0x17ea85(0x379)](),_0x454ab9=Number(RegExp['$2']);_0x4a02ea[_0x5f51bd]=_0x454ab9,_0x5ef351+=_0x454ab9;}else _0x326797!==''&&(_0x4a02ea[_0x326797]=0x1,_0x5ef351++);}}if(_0x5ef351<=0x0)return'';let _0x4fe4c4=Math['random']()*_0x5ef351;for(const _0x458b1 in _0x4a02ea){_0x4fe4c4-=_0x4a02ea[_0x458b1];if(_0x4fe4c4<=0x0)return _0x458b1;}return'';},DataManager['checkAutoCustomActionSequenceNotetagEffect']=function(_0x45f04c){const _0x471b33=_0x45d586;if(!_0x45f04c)return![];if(!VisuMZ[_0x471b33(0x6fe)]['Settings'][_0x471b33(0x205)]['AutoNotetag'])return![];if(_0x45f04c[_0x471b33(0x34a)][_0x471b33(0x95f)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x45f04c[_0x471b33(0x34a)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x5513f2 of _0x45f04c['effects']){if(!_0x5513f2)continue;if(_0x5513f2[_0x471b33(0xa27)]===Game_Action[_0x471b33(0x5e3)])return!![];}return![];},DataManager['createTroopNote']=function(_0x3db84f){const _0x5a59a7=_0x45d586,_0x4959ad=$dataTroops[_0x3db84f];if(!_0x4959ad)return'';let _0x13f9eb='';_0x13f9eb+=_0x4959ad[_0x5a59a7(0x5c2)];for(const _0x3f7c46 of _0x4959ad['pages']){for(const _0x5d01a0 of _0x3f7c46[_0x5a59a7(0x505)]){[0x6c,0x198][_0x5a59a7(0x840)](_0x5d01a0[_0x5a59a7(0xa27)])&&(_0x13f9eb+='\x0a',_0x13f9eb+=_0x5d01a0[_0x5a59a7(0x8e0)][0x0]);}}return _0x13f9eb;},ConfigManager[_0x45d586(0xa29)]=ConfigManager[_0x45d586(0xa29)]??![],ConfigManager[_0x45d586(0x92c)]=ConfigManager[_0x45d586(0x92c)]??![],ConfigManager['visualHpGauge']=ConfigManager[_0x45d586(0xb83)]??!![],VisuMZ[_0x45d586(0x6fe)]['ConfigManager_makeData']=ConfigManager[_0x45d586(0x554)],ConfigManager[_0x45d586(0x554)]=function(){const _0x257a91=_0x45d586,_0x415684=VisuMZ[_0x257a91(0x6fe)][_0x257a91(0x684)]['call'](this);return _0x415684[_0x257a91(0xa29)]=this[_0x257a91(0xa29)],_0x415684[_0x257a91(0x92c)]=this['autoBattleUseSkills'],_0x415684[_0x257a91(0xb83)]=this['visualHpGauge'],_0x415684;},VisuMZ['BattleCore']['ConfigManager_applyData']=ConfigManager[_0x45d586(0x820)],ConfigManager[_0x45d586(0x820)]=function(_0x4bd142){const _0x451210=_0x45d586;VisuMZ[_0x451210(0x6fe)]['ConfigManager_applyData'][_0x451210(0x1b5)](this,_0x4bd142),_0x451210(0xa29)in _0x4bd142?this[_0x451210(0xa29)]=_0x4bd142['autoBattleAtStart']:this[_0x451210(0xa29)]=![],_0x451210(0x92c)in _0x4bd142?this[_0x451210(0x92c)]=_0x4bd142[_0x451210(0x92c)]:this[_0x451210(0x92c)]=![],_0x451210(0xb83)in _0x4bd142?this[_0x451210(0xb83)]=_0x4bd142['visualHpGauge']:this[_0x451210(0xb83)]=!![];},ImageManager['svActorHorzCells']=ImageManager[_0x45d586(0x280)]||0x9,ImageManager[_0x45d586(0x398)]=ImageManager['svActorVertCells']||0x6,VisuMZ[_0x45d586(0x6fe)]['BattleManager_setup']=BattleManager[_0x45d586(0x846)],BattleManager['setup']=function(_0x3db836,_0x458d66,_0x184882){const _0x2b367f=_0x45d586;VisuMZ[_0x2b367f(0x6fe)][_0x2b367f(0x2c1)]['call'](this,_0x3db836,_0x458d66,_0x184882),this[_0x2b367f(0xa8c)]={};},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x4c8)]=BattleManager[_0x45d586(0x2fc)],BattleManager['initMembers']=function(){const _0x480971=_0x45d586;VisuMZ[_0x480971(0x6fe)]['BattleManager_initMembers'][_0x480971(0x1b5)](this),this['_forcedBattlers']=[];},BattleManager[_0x45d586(0xb6a)]=function(){const _0x28ed1b=_0x45d586;if(!SceneManager[_0x28ed1b(0x81a)]())return;const _0x5a682a=SceneManager[_0x28ed1b(0x4f4)][_0x28ed1b(0x3c5)];if(_0x5a682a)_0x5a682a[_0x28ed1b(0x6d2)]();},BattleManager[_0x45d586(0x319)]=function(){const _0x511dcf=_0x45d586;if(BattleManager[_0x511dcf(0xad9)]())return _0x511dcf(0x442);return _0x511dcf(0x8e5);},BattleManager[_0x45d586(0x75a)]=function(_0x142dec){const _0x4187f2=_0x45d586;return _0x142dec=_0x142dec[_0x4187f2(0x689)]()['trim'](),this[_0x4187f2(0x319)]()===_0x142dec;},BattleManager[_0x45d586(0x4fe)]=function(){const _0x3438da=_0x45d586;return this[_0x3438da(0x75a)](_0x3438da(0x8e5));},BattleManager[_0x45d586(0x550)]=function(){const _0x9dfdc2=_0x45d586;return this[_0x9dfdc2(0x4fe)]();},BattleManager[_0x45d586(0x85f)]=function(){const _0x269348=_0x45d586;return!this[_0x269348(0x550)]();},BattleManager[_0x45d586(0xa79)]=function(){const _0x1e4e7b=_0x45d586;return!this['isTurnBased']()&&!this[_0x1e4e7b(0x85f)]();},BattleManager[_0x45d586(0x5dc)]=function(_0x4c5754){const _0x2a039a=_0x45d586;this[_0x2a039a(0xa8c)]=this[_0x2a039a(0xa8c)]||{};if(this[_0x2a039a(0xa8c)][_0x4c5754]!==undefined)return this[_0x2a039a(0xa8c)][_0x4c5754];this['_battlerKeyCache'][_0x4c5754]=null;const _0x82b67c=this[_0x2a039a(0x488)](),_0x41b32b=_0x82b67c['find'](_0x55c06a=>_0x55c06a[_0x2a039a(0x8da)]()===_0x4c5754);if(_0x41b32b)this[_0x2a039a(0xa8c)][_0x4c5754]=_0x41b32b;return this[_0x2a039a(0xa8c)][_0x4c5754];},Game_BattlerBase['prototype']['battlerKey']=function(){const _0x320895=_0x45d586;return _0x320895(0x2b0)[_0x320895(0x534)](this['isActor']()?_0x320895(0xb77):_0x320895(0x6bc),this[_0x320895(0x5c2)]()+'-'+(this[_0x320895(0x7f0)]()?this[_0x320895(0x533)]():this[_0x320895(0x302)]()));},Game_Action[_0x45d586(0x19f)][_0x45d586(0x1c4)]=function(_0x10b5b7){const _0xa28ed0=_0x45d586;if(this[_0xa28ed0(0x1cf)]!=='')return;typeof _0x10b5b7==='string'?this[_0xa28ed0(0x1cf)]=_0x10b5b7[_0xa28ed0(0x2ab)]()['trim']():this[_0xa28ed0(0x1cf)]=_0x10b5b7[_0xa28ed0(0x8da)]();},Game_Action['prototype'][_0x45d586(0x5f5)]=function(){const _0x236d95=_0x45d586;return[this[_0x236d95(0x20a)]()];},Game_Action['prototype'][_0x45d586(0x20a)]=function(){const _0x1e3f3a=_0x45d586,_0x356616=this[_0x1e3f3a(0x1cf)]||'',_0x3e5c0b=BattleManager[_0x1e3f3a(0x5dc)](_0x356616);if(!_0x3e5c0b)return this[_0x1e3f3a(0x824)]();if(!_0x3e5c0b[_0x1e3f3a(0x45d)]())return this[_0x1e3f3a(0x824)]();return _0x3e5c0b;},Game_Action['prototype'][_0x45d586(0x824)]=function(){const _0x4eec52=_0x45d586,_0x8ee42a=this[_0x4eec52(0x1cf)];return _0x8ee42a[_0x4eec52(0x95f)](/ACTOR/i)?this[_0x4eec52(0x904)]()[_0x4eec52(0x6be)]():this[_0x4eec52(0x276)]()['trueRandomTarget']();},BattleManager[_0x45d586(0x4ff)]=function(){const _0x4da43a=_0x45d586;return this[_0x4da43a(0x488)]()['filter'](_0x4a4c50=>_0x4a4c50[_0x4da43a(0x5bc)]());},BattleManager[_0x45d586(0x6f4)]=function(_0x22ab9d){const _0x3f7895=_0x45d586;_0x22ab9d===_0x3f7895(0x440)&&(this[_0x3f7895(0xba4)]=!![]),$gameParty[_0x3f7895(0x6f4)](_0x22ab9d),$gameTroop['processBattleCoreJS'](_0x22ab9d);},VisuMZ['BattleCore'][_0x45d586(0x5b3)]=BattleManager['startBattle'],BattleManager['startBattle']=function(){const _0x24d8a8=_0x45d586;this[_0x24d8a8(0x27c)]=![],this[_0x24d8a8(0xa4b)]=ConfigManager['autoBattleAtStart'],this[_0x24d8a8(0xba4)]=![],this[_0x24d8a8(0x6f4)](_0x24d8a8(0xaa9)),VisuMZ[_0x24d8a8(0x6fe)][_0x24d8a8(0x5b3)]['call'](this),this[_0x24d8a8(0x6f4)]('PostStartBattleJS');},BattleManager[_0x45d586(0x16d)]=function(_0x5e4b73){const _0x544af3=_0x45d586,_0x538aa2=VisuMZ[_0x544af3(0x6fe)][_0x544af3(0xa41)][_0x544af3(0x4c4)];_0x5e4b73!==_0x544af3(0x425)&&_0x538aa2[_0x544af3(0x248)]&&VisuMZ['BattleCore'][_0x544af3(0x508)](_0x538aa2[_0x544af3(0x248)])&&$gameTemp['reserveCommonEvent'](_0x538aa2[_0x544af3(0x248)]);const _0x22a4aa=_0x544af3(0x7d0)['format'](_0x5e4b73);_0x538aa2[_0x22a4aa]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x538aa2[_0x22a4aa])&&$gameTemp[_0x544af3(0x485)](_0x538aa2[_0x22a4aa]);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x6f8)]=BattleManager[_0x45d586(0x83f)],BattleManager[_0x45d586(0x83f)]=function(){const _0x47657f=_0x45d586;VisuMZ[_0x47657f(0x6fe)][_0x47657f(0x6f8)]['call'](this),SceneManager['isSceneBattle']()&&BattleManager['updateEvent']();},VisuMZ['BattleCore'][_0x45d586(0x2cf)]=BattleManager[_0x45d586(0xb2a)],BattleManager[_0x45d586(0xb2a)]=function(){const _0x5a6cf2=_0x45d586;if(this[_0x5a6cf2(0x5ca)]===_0x5a6cf2(0x345)){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ['BattleCore'][_0x5a6cf2(0x2cf)]['call'](this);},VisuMZ['BattleCore'][_0x45d586(0x6ec)]=BattleManager[_0x45d586(0xa22)],BattleManager[_0x45d586(0xa22)]=function(){const _0x1d89a4=_0x45d586;this[_0x1d89a4(0xba4)]=!![],this[_0x1d89a4(0x6f4)](_0x1d89a4(0x440)),VisuMZ['BattleCore']['BattleManager_processVictory'][_0x1d89a4(0x1b5)](this),this['processPostBattleCommonEvents']('Victory');},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x303)]=BattleManager[_0x45d586(0x491)],BattleManager[_0x45d586(0x491)]=function(){const _0x2384cf=_0x45d586;this[_0x2384cf(0xba4)]=!![],VisuMZ[_0x2384cf(0x6fe)][_0x2384cf(0x303)]['call'](this);},VisuMZ[_0x45d586(0x6fe)]['BattleManager_processDefeat']=BattleManager[_0x45d586(0x7b6)],BattleManager['processDefeat']=function(){const _0x3640b0=_0x45d586;this[_0x3640b0(0xba4)]=!![],this['processBattleCoreJS']('BattleDefeatJS'),VisuMZ[_0x3640b0(0x6fe)]['BattleManager_processDefeat'][_0x3640b0(0x1b5)](this),this[_0x3640b0(0x16d)](_0x3640b0(0x49c));},VisuMZ['BattleCore'][_0x45d586(0x454)]=BattleManager[_0x45d586(0x561)],BattleManager[_0x45d586(0x561)]=function(_0x4ef940){const _0x3d6f58=_0x45d586;this[_0x3d6f58(0x27c)]=!![],this['_autoBattle']=![],this['processBattleCoreJS'](_0x3d6f58(0x768)),VisuMZ[_0x3d6f58(0x6fe)][_0x3d6f58(0x454)][_0x3d6f58(0x1b5)](this,_0x4ef940),this['processBattleCoreJS'](_0x3d6f58(0x932));},VisuMZ['BattleCore'][_0x45d586(0x745)]=BattleManager[_0x45d586(0x74e)],BattleManager[_0x45d586(0x74e)]=function(){const _0x33eedc=_0x45d586;if(this[_0x33eedc(0x550)]())this['processBattleCoreJS'](_0x33eedc(0x1bb));VisuMZ[_0x33eedc(0x6fe)]['BattleManager_startTurn']['call'](this);if(this[_0x33eedc(0x550)]())this[_0x33eedc(0x6f4)]('PostStartTurnJS');},BattleManager['processTurn']=function(){const _0x298db7=_0x45d586,_0x5c17f2=this[_0x298db7(0x1ce)],_0x147b5e=_0x5c17f2[_0x298db7(0x74c)]();_0x147b5e?(_0x147b5e[_0x298db7(0x726)](),_0x147b5e[_0x298db7(0x7ce)]()?(this[_0x298db7(0x133)](),_0x5c17f2['removeCurrentAction']()):(_0x5c17f2[_0x298db7(0x9c1)](),this[_0x298db7(0xa59)]())):(this['endAction'](),this['_subject']=null);},VisuMZ['BattleCore']['BattleManager_startAction']=BattleManager['startAction'],BattleManager['startAction']=function(){const _0x147e83=_0x45d586,_0x4dbab0=this[_0x147e83(0x1ce)][_0x147e83(0x74c)](),_0x3605c4=this[_0x147e83(0x1ce)];_0x4dbab0&&_0x4dbab0[_0x147e83(0x3ac)]()===_0x3605c4&&_0x4dbab0[_0x147e83(0x707)]('PreStartActionJS'),VisuMZ['BattleCore']['BattleManager_startAction']['call'](this),_0x4dbab0&&_0x4dbab0[_0x147e83(0x3ac)]()===_0x3605c4&&_0x4dbab0[_0x147e83(0x707)](_0x147e83(0x581));},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x294)]=BattleManager[_0x45d586(0xa59)],BattleManager['endAction']=function(){const _0x21cc61=_0x45d586,_0x4c0288=this[_0x21cc61(0x9e9)],_0x8e9603=this['_subject'];_0x4c0288&&_0x4c0288!==this[_0x21cc61(0x333)]&&_0x4c0288[_0x21cc61(0x3ac)]()===_0x8e9603&&_0x4c0288[_0x21cc61(0x707)](_0x21cc61(0xaf1)),this[_0x21cc61(0x1ce)]?VisuMZ['BattleCore']['BattleManager_endAction'][_0x21cc61(0x1b5)](this):this[_0x21cc61(0x5ca)]=_0x21cc61(0x345),_0x4c0288&&_0x4c0288!==this[_0x21cc61(0x333)]&&_0x4c0288['subject']()===_0x8e9603&&_0x4c0288[_0x21cc61(0x707)]('PostEndActionJS'),this[_0x21cc61(0x284)](this['allBattleMembers']()),this[_0x21cc61(0x333)]=this[_0x21cc61(0x9e9)];},BattleManager['refreshBattlerMotions']=function(_0x2666ae){const _0x4c0ec1=_0x45d586;for(const _0x18bd90 of _0x2666ae){if(!_0x18bd90)continue;if(!_0x18bd90[_0x4c0ec1(0xa7b)]())continue;_0x18bd90[_0x4c0ec1(0xa7b)]()['refreshMotion']();}},BattleManager[_0x45d586(0x344)]=function(){const _0x5f3d16=_0x45d586;!this[_0x5f3d16(0x936)][_0x5f3d16(0x3d8)]()&&this[_0x5f3d16(0xa59)]();},Game_Battler['prototype']['onAllActionsEnd']=function(){const _0x4f12a1=_0x45d586;this[_0x4f12a1(0x893)]();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x33d898=VisuMZ[_0x4f12a1(0x621)][_0x4f12a1(0xa41)][_0x4f12a1(0x489)];_0x33d898&&_0x33d898[_0x4f12a1(0x22d)]===![]&&this['removeStatesAuto'](0x1);}else this['removeStatesAuto'](0x1);this[_0x4f12a1(0x44d)]();},VisuMZ['BattleCore'][_0x45d586(0x3a7)]=BattleManager[_0x45d586(0x3c6)],BattleManager[_0x45d586(0x3c6)]=function(_0x1d8939,_0x30be3f){const _0x3f0bd7=_0x45d586;this['_bypassCanCounterCheck']=!![],VisuMZ[_0x3f0bd7(0x6fe)][_0x3f0bd7(0x3a7)][_0x3f0bd7(0x1b5)](this,_0x1d8939,_0x30be3f),this['_bypassCanCounterCheck']=undefined;},BattleManager['makeEscapeRatio']=function(){const _0x222ae3=_0x45d586;this['_escapeRatio']=VisuMZ[_0x222ae3(0x6fe)][_0x222ae3(0xa41)][_0x222ae3(0x4c4)]['CalcEscapeRatioJS'][_0x222ae3(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa31)]=BattleManager[_0x45d586(0x47e)],BattleManager[_0x45d586(0x47e)]=function(){const _0x6b52ab=_0x45d586;this['processBattleCoreJS'](_0x6b52ab(0x46e)),BattleManager[_0x6b52ab(0x992)][_0x6b52ab(0x579)](),VisuMZ['BattleCore'][_0x6b52ab(0xa31)]['call'](this),this[_0x6b52ab(0x16d)](_0x6b52ab(0x484));},VisuMZ['BattleCore'][_0x45d586(0x9f3)]=BattleManager[_0x45d586(0x16c)],BattleManager[_0x45d586(0x16c)]=function(){const _0x338e10=_0x45d586;this[_0x338e10(0x6f4)](_0x338e10(0xaa3));const _0x5e36d9=this[_0x338e10(0x64b)];VisuMZ[_0x338e10(0x6fe)][_0x338e10(0x9f3)]['call'](this),this[_0x338e10(0x64b)]=_0x5e36d9+VisuMZ['BattleCore'][_0x338e10(0xa41)][_0x338e10(0x4c4)][_0x338e10(0x97e)]['call'](this),this['_inputting']=![],this[_0x338e10(0x16d)](_0x338e10(0x425));},BattleManager['displayStartMessages']=function(){const _0x5dcd9e=_0x45d586;let _0x2ab699=![];if(this['isDisplayEmergedEnemies']())for(const _0x3b5fda of $gameTroop[_0x5dcd9e(0x149)]()){this[_0x5dcd9e(0x936)][_0x5dcd9e(0x119)](_0x5dcd9e(0x53b),TextManager[_0x5dcd9e(0x247)]['format'](_0x3b5fda)),this[_0x5dcd9e(0x936)][_0x5dcd9e(0x119)](_0x5dcd9e(0x643)),_0x2ab699=!![];}if(this[_0x5dcd9e(0x1c1)])this['_logWindow'][_0x5dcd9e(0x119)](_0x5dcd9e(0x53b),TextManager[_0x5dcd9e(0x976)]['format']($gameParty['name']())),this[_0x5dcd9e(0x936)][_0x5dcd9e(0x119)]('wait');else this['_surprise']&&(this[_0x5dcd9e(0x936)]['push']('addText',TextManager[_0x5dcd9e(0x413)]['format']($gameParty[_0x5dcd9e(0x5c2)]())),this[_0x5dcd9e(0x936)][_0x5dcd9e(0x119)](_0x5dcd9e(0x643)));_0x2ab699&&(this[_0x5dcd9e(0x936)][_0x5dcd9e(0x119)](_0x5dcd9e(0x643)),this[_0x5dcd9e(0x936)][_0x5dcd9e(0x119)](_0x5dcd9e(0xb8d))),this['isTpb']()&&this[_0x5dcd9e(0x86d)]()&&(this[_0x5dcd9e(0x61c)]=![]);},BattleManager['isDisplayEmergedEnemies']=function(){const _0x157268=_0x45d586;if(BattleManager[_0x157268(0xa4b)])return![];return VisuMZ[_0x157268(0x6fe)][_0x157268(0xa41)][_0x157268(0x401)][_0x157268(0x4fa)];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x50a)]=BattleManager['startInput'],BattleManager[_0x45d586(0xba6)]=function(){const _0x266066=_0x45d586;VisuMZ['BattleCore'][_0x266066(0x50a)][_0x266066(0x1b5)](this),this[_0x266066(0x4fe)]()&&this[_0x266066(0x86d)]()&&!this['_surprise']&&$gameParty['canInput']()&&this[_0x266066(0xb88)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x1dc3e7=_0x45d586;return VisuMZ[_0x1dc3e7(0x6fe)][_0x1dc3e7(0xa41)][_0x1dc3e7(0x6f3)]['SkipPartyCmd'];},BattleManager['checkTpbInputOpen']=function(){const _0x759f7c=_0x45d586;this[_0x759f7c(0x5cf)]()&&this[_0x759f7c(0xb88)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x95b)]=Scene_Battle['prototype'][_0x45d586(0x264)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x264)]=function(){const _0x3d6040=_0x45d586;VisuMZ[_0x3d6040(0x6fe)][_0x3d6040(0x95b)][_0x3d6040(0x1b5)](this),BattleManager[_0x3d6040(0xad9)]()&&BattleManager[_0x3d6040(0x61c)]&&(BattleManager[_0x3d6040(0x61c)]=![],this[_0x3d6040(0xb6b)]());},BattleManager[_0x45d586(0x6bd)]=function(_0x2f6155,_0x51daf8,_0x2bf0d2){const _0x336a4c=_0x45d586;if(!_0x2bf0d2)return;if(!_0x2f6155)return;if(!_0x51daf8)return;const _0x2d099d=this['_action'];this[_0x336a4c(0x9e9)]=new Game_Action(_0x2f6155);if(DataManager[_0x336a4c(0x1c8)](_0x2bf0d2))this[_0x336a4c(0x9e9)][_0x336a4c(0x778)](_0x2bf0d2['id']);if(DataManager[_0x336a4c(0xb36)](_0x2bf0d2))this[_0x336a4c(0x9e9)][_0x336a4c(0x839)](_0x2bf0d2['id']);if(this[_0x336a4c(0x9e9)][_0x336a4c(0xba9)]())BattleManager[_0x336a4c(0x38c)](_0x2f6155,_0x51daf8);this[_0x336a4c(0x9e9)]=_0x2d099d;},BattleManager[_0x45d586(0xa24)]=function(_0x15245d,_0x5c35b2){const _0x5b19ca=_0x45d586;this[_0x5b19ca(0x9e9)][_0x5b19ca(0x4ce)]=_0x5c35b2,this['_logWindow']['displayReflection'](_0x5c35b2),this[_0x5b19ca(0x936)][_0x5b19ca(0x705)](_0x15245d,this['_action']),this[_0x5b19ca(0x9e9)][_0x5b19ca(0x6f1)](_0x15245d),this['_logWindow'][_0x5b19ca(0x512)](_0x15245d,_0x15245d);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x35d)]=BattleManager['makeActionOrders'],BattleManager['makeActionOrders']=function(){const _0x3d300a=_0x45d586;VisuMZ[_0x3d300a(0x6fe)]['BattleManager_makeActionOrders'][_0x3d300a(0x1b5)](this),this['_actionBattlers']=this[_0x3d300a(0xbc0)][_0x3d300a(0x229)](_0x5071b9=>_0x5071b9&&_0x5071b9[_0x3d300a(0x2bd)]());},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x2bc)]=BattleManager[_0x45d586(0xe9)],BattleManager[_0x45d586(0xe9)]=function(_0x2cf667){const _0x233842=_0x45d586;if(this[_0x233842(0x5ca)]===_0x233842(0x7b3))this[_0x233842(0x944)]();else this[_0x233842(0x5ca)]===_0x233842(0x66c)?this[_0x233842(0xce)]():VisuMZ[_0x233842(0x6fe)][_0x233842(0x2bc)][_0x233842(0x1b5)](this,_0x2cf667);},BattleManager['prepareCustomActionSequence']=function(){const _0x280f66=_0x45d586;this[_0x280f66(0x424)]=this[_0x280f66(0x708)][_0x280f66(0x25a)](0x0),this[_0x280f66(0x157)]=0x0,this[_0x280f66(0x798)]=this[_0x280f66(0x424)][0x0]||null,this[_0x280f66(0x5ca)]=_0x280f66(0x7b3);},BattleManager['updateCustomActionSequence']=function(){const _0x1001fc=_0x45d586;!this['updateEventMain']()&&!this[_0x1001fc(0x936)][_0x1001fc(0x3d8)]()&&(this[_0x1001fc(0x5ca)]=_0x1001fc(0xaf9));},BattleManager[_0x45d586(0x66c)]=function(_0x5b7442){const _0xd0fb78=_0x45d586;this[_0xd0fb78(0xbc0)][_0xd0fb78(0x4e7)](_0x5b7442);if(_0x5b7442===this['_subject'])return;const _0x5609c2=JsonEx[_0xd0fb78(0x9cc)](_0x5b7442[_0xd0fb78(0x74c)]());this[_0xd0fb78(0x99a)][_0xd0fb78(0x119)]([_0x5b7442,_0x5609c2]);},BattleManager[_0x45d586(0x807)]=function(){},BattleManager[_0x45d586(0x72d)]=function(){const _0x53bca8=_0x45d586;if(this['isTpb']())this[_0x53bca8(0x5ca)]='turn';else this[_0x53bca8(0x99a)][_0x53bca8(0x1c9)]>0x0?this[_0x53bca8(0x5ca)]=_0x53bca8(0x345):this['startInput']();},BattleManager[_0x45d586(0x6c3)]=function(){const _0x3c5508=_0x45d586,_0x1e2bd6=this[_0x3c5508(0x1ce)];_0x1e2bd6&&this[_0x3c5508(0xad9)]()&&_0x1e2bd6[_0x3c5508(0x4c2)](_0x3c5508(0x28a));for(;;){const _0x5c5b8b=this[_0x3c5508(0x9e4)]();if(!_0x5c5b8b)return null;if(_0x5c5b8b[_0x3c5508(0x77b)]()&&_0x5c5b8b[_0x3c5508(0x45d)]())return _0x5c5b8b;}},BattleManager['getNextSubjectFromPool']=function(){const _0x4b5164=_0x45d586;if(this['_forcedBattlers'][_0x4b5164(0x1c9)]>0x0){const _0x31c735=this[_0x4b5164(0x99a)][_0x4b5164(0x6b4)](),_0x2ffb3d=_0x31c735[0x0];return _0x2ffb3d['_actions']=_0x2ffb3d[_0x4b5164(0x55f)]||[],_0x2ffb3d[_0x4b5164(0x55f)][0x0]=_0x31c735[0x1],_0x2ffb3d;}else return this[_0x4b5164(0xbc0)]['shift']();},VisuMZ[_0x45d586(0x6fe)]['Game_Battler_forceAction']=Game_Battler[_0x45d586(0x19f)][_0x45d586(0x66c)],Game_Battler[_0x45d586(0x19f)][_0x45d586(0x66c)]=function(_0x7a0475,_0x20eac6){const _0x1ad222=_0x45d586;VisuMZ[_0x1ad222(0x6fe)][_0x1ad222(0x795)][_0x1ad222(0x1b5)](this,_0x7a0475,_0x20eac6),this[_0x1ad222(0x55f)][this[_0x1ad222(0x55f)][_0x1ad222(0x1c9)]-0x1][_0x1ad222(0xa87)]=!![];},Game_Interpreter[_0x45d586(0x19f)]['command339']=function(_0x395856){return this['iterateBattler'](_0x395856[0x0],_0x395856[0x1],_0x4342fa=>{const _0x30eb7f=_0x442c;!_0x4342fa['isDeathStateAffected']()&&(_0x4342fa[_0x30eb7f(0x66c)](_0x395856[0x2],_0x395856[0x3]),BattleManager[_0x30eb7f(0x66c)](_0x4342fa));}),!![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x894)]=Game_Battler['prototype']['makeSpeed'],Game_Battler[_0x45d586(0x19f)][_0x45d586(0x9d6)]=function(){const _0xca5ef9=_0x45d586;VisuMZ[_0xca5ef9(0x6fe)]['Game_Battler_makeSpeed'][_0xca5ef9(0x1b5)](this),this[_0xca5ef9(0x55f)]['length']<=0x0&&(this[_0xca5ef9(0x571)]=Number[_0xca5ef9(0x8dd)]);},BattleManager[_0x45d586(0xa68)]=function(){const _0x54de00=_0x45d586;if(VisuMZ[_0x54de00(0x6fe)][_0x54de00(0xa41)]['Damage'][_0x54de00(0x2da)]??!![])return![];return SceneManager['isSceneBattle']()&&this[_0x54de00(0xba4)];},VisuMZ[_0x45d586(0x6fe)]['BattleManager_selectNextCommand']=BattleManager[_0x45d586(0xb88)],BattleManager[_0x45d586(0xb88)]=function(){const _0x3d465e=_0x45d586;this['isTpb']()?this[_0x3d465e(0x19e)]():VisuMZ['BattleCore']['BattleManager_selectNextCommand'][_0x3d465e(0x1b5)](this);},BattleManager[_0x45d586(0x19e)]=function(){const _0x2ed39b=_0x45d586;if(this[_0x2ed39b(0x386)]){if(this[_0x2ed39b(0x386)][_0x2ed39b(0xb88)]())return;this[_0x2ed39b(0x5a9)](),this[_0x2ed39b(0x25b)](),!this[_0x2ed39b(0x1ce)]&&!this[_0x2ed39b(0x386)]&&SceneManager['_scene'][_0x2ed39b(0x5b1)]();}else!this['_subject']&&this[_0x2ed39b(0x339)]();},BattleManager[_0x45d586(0x25b)]=function(){const _0x76eba4=_0x45d586;(!this[_0x76eba4(0x5cf)]()||this[_0x76eba4(0x1f6)]())&&(this[_0x76eba4(0x59f)]&&(!$gameParty[_0x76eba4(0xb5c)]()[_0x76eba4(0x840)](this[_0x76eba4(0x59f)])&&(this['_tpbSceneChangeCacheActor']=null)),!this[_0x76eba4(0x59f)]?(this[_0x76eba4(0x6ea)](),this[_0x76eba4(0x386)]=null,this[_0x76eba4(0x7c4)]=![]):this[_0x76eba4(0x2e3)]());},BattleManager[_0x45d586(0x2e3)]=function(){const _0x28e7c1=_0x45d586;!$gameParty['battleMembers']()[_0x28e7c1(0x840)](this[_0x28e7c1(0x59f)])&&(this['_tpbSceneChangeCacheActor']=null),this[_0x28e7c1(0x59f)]?(this[_0x28e7c1(0x386)]=this[_0x28e7c1(0x59f)],this[_0x28e7c1(0x386)]['_tpbState']=_0x28e7c1(0x122),this[_0x28e7c1(0x7c4)]=!![],this[_0x28e7c1(0x59f)]=null):(this[_0x28e7c1(0x6ea)](),this[_0x28e7c1(0x386)]=null,this['_inputting']=![]);},VisuMZ['BattleCore'][_0x45d586(0x2c4)]=BattleManager[_0x45d586(0xa8a)],BattleManager[_0x45d586(0xa8a)]=function(){const _0x4df0c0=_0x45d586;return this['_phase']===_0x4df0c0(0x7b3)?this['battleCoreTpbMainPhase']():VisuMZ[_0x4df0c0(0x6fe)]['BattleManager_isTpbMainPhase'][_0x4df0c0(0x1b5)](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x4dbe77=_0x45d586;return this[_0x4dbe77(0x971)]();},VisuMZ[_0x45d586(0x6fe)]['BattleManager_cancelActorInput']=BattleManager['cancelActorInput'],BattleManager[_0x45d586(0x6ea)]=function(){const _0x378a19=_0x45d586;this['isTpb']()&&this['_phase']===_0x378a19(0x8d4)&&(this[_0x378a19(0x386)]=null),VisuMZ['BattleCore'][_0x378a19(0x22f)][_0x378a19(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)]['BattleManager_inputtingAction']=BattleManager[_0x45d586(0x517)],BattleManager['inputtingAction']=function(){const _0xabb589=_0x45d586,_0x397f15=this[_0xabb589(0x386)];if(_0x397f15&&!_0x397f15[_0xabb589(0x517)]()){const _0x34d839=_0x397f15[_0xabb589(0x563)];_0x397f15['_actions'][_0x34d839]=new Game_Action(_0x397f15);}return VisuMZ['BattleCore'][_0xabb589(0x148)][_0xabb589(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xf2)]=BattleManager[_0x45d586(0xb92)],BattleManager[_0x45d586(0xb92)]=function(_0x3b33c5){const _0x359bc3=_0x45d586;if(this[_0x359bc3(0x9e9)]['isForFriend']())return![];return VisuMZ[_0x359bc3(0x6fe)][_0x359bc3(0xf2)][_0x359bc3(0x1b5)](this,_0x3b33c5);},SceneManager[_0x45d586(0x81a)]=function(){const _0x859aa8=_0x45d586;return this[_0x859aa8(0x4f4)]&&this[_0x859aa8(0x4f4)][_0x859aa8(0xb62)]===Scene_Battle;},SceneManager[_0x45d586(0x8cd)]=function(){const _0xa7d711=_0x45d586;return Spriteset_Battle[_0xa7d711(0x19f)]['isFlipped']();},SceneManager[_0x45d586(0x55e)]=function(){const _0x4c6b1e=_0x45d586;if(SceneManager[_0x4c6b1e(0x3ca)](Scene_Options))return!![];return![];},SceneManager[_0x45d586(0x74a)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x45d586(0x81f)]=function(_0x21f13e){const _0x106e2e=_0x45d586;if(!SceneManager[_0x106e2e(0x81a)]())return!![];const _0x124839=[_0x106e2e(0x928),_0x106e2e(0x7e1),_0x106e2e(0x8af)];return _0x124839['includes'](_0x21f13e[_0x106e2e(0x5c2)]);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x3c1)]=SceneManager['push'],SceneManager[_0x45d586(0x119)]=function(_0x56baee){const _0x2d3c54=_0x45d586;if(!SceneManager[_0x2d3c54(0x81f)](_0x56baee))return this[_0x2d3c54(0x3df)](_0x56baee);VisuMZ[_0x2d3c54(0x6fe)][_0x2d3c54(0x3c1)][_0x2d3c54(0x1b5)](this,_0x56baee);},SceneManager[_0x45d586(0x3df)]=function(_0x4ab3d2){const _0x22949c=_0x45d586;if(!$gameTemp[_0x22949c(0x292)]())return;if(this[_0x22949c(0x7b2)])return;this[_0x22949c(0x7b2)]=!![];let _0x1e4ff5='';_0x1e4ff5+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x1e4ff5+='\x20to\x20%1\x20midbattle.'[_0x22949c(0x534)](_0x4ab3d2[_0x22949c(0x5c2)]),alert(_0x1e4ff5);},VisuMZ['BattleCore'][_0x45d586(0x2db)]=Game_Temp['prototype'][_0x45d586(0x6d1)],Game_Temp[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(){const _0x9ec9ac=_0x45d586;VisuMZ[_0x9ec9ac(0x6fe)]['Game_Temp_initialize'][_0x9ec9ac(0x1b5)](this),this[_0x9ec9ac(0x40f)]=[];},VisuMZ['BattleCore'][_0x45d586(0x8a5)]=Game_Temp['prototype'][_0x45d586(0x131)],Game_Temp[_0x45d586(0x19f)]['requestAnimation']=function(_0x1360f8,_0x3d5a29,_0x3a9ac7){const _0x1e8758=_0x45d586;_0x1360f8=_0x1360f8[_0x1e8758(0x229)]((_0x4f0004,_0x5f17d7,_0x58b3f5)=>_0x58b3f5[_0x1e8758(0xa63)](_0x4f0004)===_0x5f17d7);SceneManager[_0x1e8758(0x81a)]()&&SceneManager[_0x1e8758(0x8cd)]()&&(_0x3a9ac7=!_0x3a9ac7);VisuMZ[_0x1e8758(0x6fe)][_0x1e8758(0x8a5)]['call'](this,_0x1360f8,_0x3d5a29,_0x3a9ac7);SceneManager[_0x1e8758(0x81a)]()&&BattleManager[_0x1e8758(0x992)][_0x1e8758(0xa57)]();for(const _0x541f7a of _0x1360f8){_0x541f7a&&_0x541f7a[_0x1e8758(0x690)]&&_0x541f7a[_0x1e8758(0x690)]()&&_0x541f7a[_0x1e8758(0xb84)]();}},Game_Temp[_0x45d586(0x19f)]['setLastPluginCommandInterpreter']=function(_0x5922a7){const _0xd56cbd=_0x45d586;this[_0xd56cbd(0x9b2)]=_0x5922a7;},Game_Temp[_0x45d586(0x19f)][_0x45d586(0x421)]=function(){const _0x7c53c9=_0x45d586;return this[_0x7c53c9(0x9b2)];},Game_Temp['prototype'][_0x45d586(0x2e4)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x45d586(0x19f)]['applyForcedGameTroopSettingsBattleCore']=function(_0x1aa09a){const _0x1a991=_0x45d586;$gameMap&&$dataMap&&$dataMap[_0x1a991(0x34a)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x1a991(0x34a)]);const _0x4d9708=$dataTroops[_0x1aa09a];if(_0x4d9708){let _0x24f8e7=DataManager[_0x1a991(0x350)](_0x4d9708['id']);this[_0x1a991(0x86f)](_0x24f8e7);}},Game_Temp['prototype'][_0x45d586(0x86f)]=function(_0x31a8ce){const _0x5629fd=_0x45d586;if(!_0x31a8ce)return;if(_0x31a8ce['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x5e40f0=String(RegExp['$1']);if(_0x5e40f0[_0x5629fd(0x95f)](/DEFAULT/i))this[_0x5629fd(0x4f0)]=_0x5629fd(0x915);else{if(_0x5e40f0[_0x5629fd(0x95f)](/LIST/i))this[_0x5629fd(0x4f0)]=_0x5629fd(0x505);else{if(_0x5e40f0[_0x5629fd(0x95f)](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0x5e40f0['match'](/PORTRAIT/i))this[_0x5629fd(0x4f0)]=_0x5629fd(0x376);else{if(_0x5e40f0[_0x5629fd(0x95f)](/BORDER/i))this[_0x5629fd(0x4f0)]=_0x5629fd(0x70e);else{if(_0x5e40f0[_0x5629fd(0x95f)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x5629fd(0x7b1)]?this[_0x5629fd(0x4f0)]=_0x5629fd(0x5d5):this['_forcedBattleLayout']='default';else _0x5e40f0['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x5629fd(0xb8f)]?this['_forcedBattleLayout']=_0x5629fd(0x8d3):this['_forcedBattleLayout']='default');}}}}}}},VisuMZ['BattleCore'][_0x45d586(0xafb)]=Game_Temp[_0x45d586(0x19f)][_0x45d586(0xa20)],Game_Temp[_0x45d586(0x19f)][_0x45d586(0xa20)]=function(_0x6da11b,_0x5968d8){const _0x2a8b56=_0x45d586;SceneManager[_0x2a8b56(0x81a)]()?this[_0x2a8b56(0x226)](_0x6da11b,_0x5968d8):VisuMZ['BattleCore']['Game_Temp_requestBalloon']['call'](this,_0x6da11b,_0x5968d8);},Game_Temp['prototype'][_0x45d586(0x226)]=function(_0x464405,_0x37b953){const _0x5d5931=_0x45d586,_0x535e62={'target':_0x464405,'balloonId':_0x37b953};this[_0x5d5931(0x40f)]=this[_0x5d5931(0x40f)]||[],this[_0x5d5931(0x40f)][_0x5d5931(0x119)](_0x535e62);},Game_Temp['prototype']['retrieveBattleBalloon']=function(){const _0x4661e5=_0x45d586;return this[_0x4661e5(0x40f)]=this[_0x4661e5(0x40f)]||[],this[_0x4661e5(0x40f)]['shift']();},Game_Temp[_0x45d586(0x19f)]['clearBattleBalloons']=function(){this['_battleBalloonQueue']=[];},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0xa77)]=function(){const _0x52e4df=_0x45d586;this[_0x52e4df(0x297)]===undefined&&(this[_0x52e4df(0x297)]=[]);for(const _0x5659b9 of this[_0x52e4df(0x297)]){!_0x5659b9[_0x52e4df(0x723)]()&&this[_0x52e4df(0x474)](_0x5659b9);}this['processBattleBalloonRequests']();},Spriteset_Battle[_0x45d586(0x19f)]['processBattleBalloonRequests']=function(){const _0x5c18b5=_0x45d586;for(;;){const _0x264fa9=$gameTemp[_0x5c18b5(0x749)]();if(_0x264fa9)this[_0x5c18b5(0xb46)](_0x264fa9);else break;}},Spriteset_Battle[_0x45d586(0x19f)]['createBattleBalloon']=function(_0x589f28){const _0xe771e1=_0x45d586,_0x1abeab=this[_0xe771e1(0x44b)](_0x589f28[_0xe771e1(0x371)]);if(_0x1abeab){let _0x39f835=null;Imported[_0xe771e1(0x57e)]&&Array[_0xe771e1(0x10a)](_0x589f28[_0xe771e1(0x825)])?_0x39f835=new Sprite_IconBalloon():_0x39f835=new Sprite_Balloon(),_0x39f835[_0xe771e1(0x180)]=_0x589f28[_0xe771e1(0x371)],_0x39f835[_0xe771e1(0x798)]=_0x1abeab,_0x39f835[_0xe771e1(0x798)]['_character']=_0x1abeab,_0x39f835[_0xe771e1(0x846)](_0x1abeab,_0x589f28[_0xe771e1(0x825)]),BattleManager[_0xe771e1(0x57a)](_0x39f835),this[_0xe771e1(0x297)][_0xe771e1(0x119)](_0x39f835);}},Spriteset_Battle[_0x45d586(0x19f)]['removeBattleBalloon']=function(_0x1fefda){const _0x226a28=_0x45d586;this[_0x226a28(0x297)]['remove'](_0x1fefda),BattleManager[_0x226a28(0x789)](_0x1fefda),_0x1fefda[_0x226a28(0x9ac)]();},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x92d)]=function(_0x27557a,_0x5bcb5e){},Sprite_Battler[_0x45d586(0x19f)]['isSpriteVS8dir']=function(){return![];},Spriteset_Battle['prototype'][_0x45d586(0x853)]=function(){const _0x1e989f=_0x45d586;return this[_0x1e989f(0x297)]=this[_0x1e989f(0x297)]||[],this['_battleBalloonSprites'][_0x1e989f(0x1c9)]>0x0;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x87b)]=Game_System[_0x45d586(0x19f)]['initialize'],Game_System[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(){const _0x4b028a=_0x45d586;VisuMZ[_0x4b028a(0x6fe)]['Game_System_initialize'][_0x4b028a(0x1b5)](this),this[_0x4b028a(0x3fa)]();},Game_System[_0x45d586(0x19f)][_0x45d586(0x3fa)]=function(){const _0x76bede=_0x45d586;this[_0x76bede(0x570)]=this[_0x76bede(0x570)]||[];},Game_System['prototype'][_0x45d586(0x672)]=function(){const _0x29c637=_0x45d586;if(this['_defeatedEnemies']===undefined)this[_0x29c637(0x3fa)]();return this['_defeatedEnemies'];},Game_System[_0x45d586(0x19f)][_0x45d586(0xa15)]=function(_0xad9b2d){const _0x588b62=_0x45d586;if(this[_0x588b62(0x570)]===undefined)this[_0x588b62(0x3fa)]();if(!_0xad9b2d)return;if(this[_0x588b62(0x570)][_0x588b62(0x840)](_0xad9b2d))return;this[_0x588b62(0x570)][_0x588b62(0x119)](_0xad9b2d),this['_defeatedEnemies'][_0x588b62(0x680)]((_0x47fc24,_0x39e5e2)=>_0x47fc24-_0x39e5e2);},VisuMZ['BattleCore'][_0x45d586(0x3b8)]=Game_BattlerBase[_0x45d586(0x19f)]['addNewState'],Game_BattlerBase['prototype'][_0x45d586(0x6fb)]=function(_0x453cb4){const _0x552894=_0x45d586,_0x4f10cc=this[_0x552894(0x45d)](),_0x25172a=this[_0x552894(0x5f7)]();VisuMZ[_0x552894(0x6fe)][_0x552894(0x3b8)]['call'](this,_0x453cb4),this[_0x552894(0x690)]()&&_0x4f10cc&&this[_0x552894(0x1e3)]()&&(this['_visualHpGauge_JustDied']=!this[_0x552894(0x5cd)](),$gameSystem[_0x552894(0xa15)](this[_0x552894(0x4a5)]())),SceneManager[_0x552894(0x81a)]()&&_0x25172a!==this['stateMotionIndex']()&&(this[_0x552894(0xa7b)]()&&this['battler']()[_0x552894(0x67b)]());},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x5cd)]=function(){const _0x536dc3=_0x45d586;return $gameSystem['getDefeatedEnemies']()['includes'](this[_0x536dc3(0x5d1)]);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x53c)]=Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x3d5)],Game_BattlerBase['prototype'][_0x45d586(0x3d5)]=function(_0x43fde6){const _0x4c5212=_0x45d586;VisuMZ[_0x4c5212(0x6fe)]['Game_BattlerBase_eraseState']['call'](this,_0x43fde6),this[_0x4c5212(0x690)]()&&_0x43fde6===this[_0x4c5212(0x19d)]()&&this[_0x4c5212(0x45d)]()&&(this[_0x4c5212(0xe5)]=![]),!this[_0x4c5212(0xb94)]&&!this[_0x4c5212(0xba1)]&&SceneManager[_0x4c5212(0x81a)]()&&this['requestMotionRefresh']();},VisuMZ[_0x45d586(0x6fe)]['Game_Action_clear']=Game_Action[_0x45d586(0x19f)][_0x45d586(0xb8d)],Game_Action['prototype'][_0x45d586(0xb8d)]=function(){const _0x4a4584=_0x45d586;VisuMZ[_0x4a4584(0x6fe)][_0x4a4584(0xa99)][_0x4a4584(0x1b5)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x4a4584(0x97c)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x4a4584(0x68d)]=_0x4a4584(0x915),this[_0x4a4584(0xaad)]();},Game_Action[_0x45d586(0x19f)][_0x45d586(0xaad)]=function(){const _0x20b63b=_0x45d586;this[_0x20b63b(0x1cf)]='';},VisuMZ['BattleCore'][_0x45d586(0x999)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x70a)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x70a)]=function(_0x56298c){const _0x1797b4=_0x45d586;VisuMZ['BattleCore']['Game_Action_setSubject'][_0x1797b4(0x1b5)](this,_0x56298c),this[_0x1797b4(0xaad)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x751)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x839)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x839)]=function(_0x4478a8){const _0x3bedcf=_0x45d586;VisuMZ[_0x3bedcf(0x6fe)]['Game_Action_setSkill'][_0x3bedcf(0x1b5)](this,_0x4478a8),this[_0x3bedcf(0xaad)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x5bf)]=Game_Action['prototype'][_0x45d586(0x778)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x778)]=function(_0x20ef3a){const _0x47517e=_0x45d586;VisuMZ[_0x47517e(0x6fe)][_0x47517e(0x5bf)][_0x47517e(0x1b5)](this,_0x20ef3a),this['clearTargetBattlerKey']();},Game_Action['prototype'][_0x45d586(0x2b8)]=function(_0x2e4925,_0x5bc6f5){const _0x36bb42=_0x45d586;return VisuMZ[_0x36bb42(0x6fe)]['Settings'][_0x36bb42(0x244)][_0x36bb42(0x73d)][_0x36bb42(0x1b5)](this,_0x2e4925,_0x5bc6f5);},Game_Action[_0x45d586(0x19f)][_0x45d586(0xb0a)]=function(_0x522d9c,_0x1f272c){const _0x110767=_0x45d586;return VisuMZ['BattleCore'][_0x110767(0xa41)][_0x110767(0x244)][_0x110767(0x760)][_0x110767(0x1b5)](this,_0x522d9c,_0x1f272c);},Game_Action['prototype'][_0x45d586(0x3de)]=function(_0x1ae89d,_0x41bcfe){const _0x516460=_0x45d586;return VisuMZ[_0x516460(0x6fe)]['Settings'][_0x516460(0x244)][_0x516460(0x81d)][_0x516460(0x1b5)](this,_0x1ae89d,_0x41bcfe);},VisuMZ['BattleCore']['Game_Action_itemHit']=Game_Action[_0x45d586(0x19f)][_0x45d586(0x23f)],Game_Action['prototype'][_0x45d586(0x23f)]=function(_0x4d9f8e){const _0x2acf8c=_0x45d586,_0x16b0c0=this[_0x2acf8c(0xba9)]()[_0x2acf8c(0x34a)];if(_0x16b0c0[_0x2acf8c(0x95f)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x16b0c0[_0x2acf8c(0x95f)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x3a7fcb=VisuMZ[_0x2acf8c(0x6fe)][_0x2acf8c(0x14b)]['call'](this,_0x4d9f8e);return _0x3a7fcb=this[_0x2acf8c(0x97c)]['hitRate']*_0x3a7fcb+this[_0x2acf8c(0x97c)]['hitFlat'],$gameParty[_0x2acf8c(0x1d1)]()&&(_0x3a7fcb=this[_0x2acf8c(0x196)](_0x3a7fcb,_0x4d9f8e)),_0x3a7fcb;}}},VisuMZ[_0x45d586(0x6fe)]['Game_Action_updateLastTarget']=Game_Action['prototype']['updateLastTarget'],Game_Action[_0x45d586(0x19f)][_0x45d586(0x246)]=function(_0x36c8e7){const _0x3aa9c3=_0x45d586;this['_bypass_applyBattleCoreHitRateJS']=!![],VisuMZ[_0x3aa9c3(0x6fe)][_0x3aa9c3(0x72b)][_0x3aa9c3(0x1b5)](this,_0x36c8e7),this[_0x3aa9c3(0xa03)]=undefined;},Game_Action[_0x45d586(0x19f)][_0x45d586(0x1c2)]=function(_0x40fb96){const _0x2d5ec0=_0x45d586;window['action']=this,window['a']=this['subject'](),window['b']=_0x40fb96,window[_0x2d5ec0(0xa02)]=this[_0x2d5ec0(0x3ac)](),window[_0x2d5ec0(0x371)]=_0x40fb96,window['obj']=this['item'](),window[_0x2d5ec0(0x76c)]=this[_0x2d5ec0(0xba9)](),window[_0x2d5ec0(0xba9)]=this[_0x2d5ec0(0xba9)]();},Game_Action[_0x45d586(0x19f)][_0x45d586(0x9da)]=function(_0x3446ca){const _0x24fc05=_0x45d586;window[_0x24fc05(0xaf9)]=undefined,window['a']=undefined,window['b']=undefined,window[_0x24fc05(0xa02)]=undefined,window[_0x24fc05(0x371)]=undefined,window['obj']=undefined,window[_0x24fc05(0x76c)]=undefined,window[_0x24fc05(0xba9)]=undefined;},Game_Action[_0x45d586(0x19f)][_0x45d586(0x196)]=function(_0x2e978d,_0x32f6c4){const _0x5e4d3c=_0x45d586;if(this[_0x5e4d3c(0xa03)])return _0x2e978d;this['declareGlobalVariables'](_0x32f6c4);if(this[_0x5e4d3c(0xba9)]()){let _0x54e58c=VisuMZ[_0x5e4d3c(0x6fe)][_0x5e4d3c(0x2f1)](this[_0x5e4d3c(0xba9)](),'jsAccuracy');VisuMZ[_0x5e4d3c(0x6fe)]['JS'][_0x54e58c]&&(_0x2e978d=VisuMZ[_0x5e4d3c(0x6fe)]['JS'][_0x54e58c][_0x5e4d3c(0x1b5)](this,this[_0x5e4d3c(0x3ac)](),_0x32f6c4,this['item'](),_0x2e978d));}for(const _0x1c30d9 of this[_0x5e4d3c(0x3ac)]()[_0x5e4d3c(0xa0d)]()){if(!_0x1c30d9)continue;key=VisuMZ[_0x5e4d3c(0x6fe)][_0x5e4d3c(0x2f1)](_0x1c30d9,_0x5e4d3c(0x5d0)),VisuMZ[_0x5e4d3c(0x6fe)]['JS'][key]&&(_0x2e978d=VisuMZ[_0x5e4d3c(0x6fe)]['JS'][key][_0x5e4d3c(0x1b5)](this,this[_0x5e4d3c(0x3ac)](),_0x32f6c4,this[_0x5e4d3c(0xba9)](),_0x2e978d));}for(const _0x436aff of _0x32f6c4[_0x5e4d3c(0xa0d)]()){if(!_0x436aff)continue;key=VisuMZ['BattleCore'][_0x5e4d3c(0x2f1)](_0x436aff,_0x5e4d3c(0x22e)),VisuMZ[_0x5e4d3c(0x6fe)]['JS'][key]&&(_0x2e978d=VisuMZ[_0x5e4d3c(0x6fe)]['JS'][key][_0x5e4d3c(0x1b5)](this,this[_0x5e4d3c(0x3ac)](),_0x32f6c4,this[_0x5e4d3c(0xba9)](),_0x2e978d));}return this[_0x5e4d3c(0x9da)](_0x32f6c4),_0x2e978d;},Game_Action[_0x45d586(0x19f)][_0x45d586(0x18e)]=function(_0x1e287c){const _0xf1f95=_0x45d586;if(!this[_0xf1f95(0xba9)]()[_0xf1f95(0xb5d)][_0xf1f95(0x1f7)])return 0x0;let _0x3a0030=VisuMZ[_0xf1f95(0x6fe)][_0xf1f95(0xa41)]['Damage'][_0xf1f95(0x763)][_0xf1f95(0x1b5)](this,_0x1e287c);return _0x3a0030=this['_multipliers'][_0xf1f95(0x4ae)]*_0x3a0030+this[_0xf1f95(0x97c)]['criticalHitFlat'],$gameParty[_0xf1f95(0x1d1)]()&&(_0x3a0030=this['applyBattleCoreCriticalHitRateJS'](_0x3a0030,_0x1e287c)),_0x3a0030;},Game_Action[_0x45d586(0x19f)]['applyBattleCoreCriticalHitRateJS']=function(_0x34707e,_0x4214e9){const _0x46db6b=_0x45d586;this[_0x46db6b(0x1c2)](_0x4214e9),window[_0x46db6b(0xa26)]=_0x34707e;{const _0x12828e=this[_0x46db6b(0x3ac)]()[_0x46db6b(0xa0d)]();for(const _0x204a79 of _0x12828e){if(!_0x204a79)continue;if(_0x204a79['note'][_0x46db6b(0x95f)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x534da0=String(RegExp['$1']);try{eval(_0x534da0);}catch(_0x3bc6b1){if($gameTemp[_0x46db6b(0x292)]())console[_0x46db6b(0x833)](_0x3bc6b1);}}}}{const _0x11326c=_0x4214e9['traitObjects']();for(const _0x2ef294 of _0x11326c){if(!_0x2ef294)continue;if(_0x2ef294['note'][_0x46db6b(0x95f)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x32bc62=String(RegExp['$1']);try{eval(_0x32bc62);}catch(_0x46e3fe){if($gameTemp['isPlaytest']())console[_0x46db6b(0x833)](_0x46e3fe);}}}}return _0x34707e=window[_0x46db6b(0xa26)],this[_0x46db6b(0x9da)](_0x4214e9),_0x34707e;},Game_Action[_0x45d586(0x19f)]['applyBattleCoreCriticalHitRateJS']=function(_0x319933,_0x5b1de7){const _0x4ea006=_0x45d586;this[_0x4ea006(0x1c2)](_0x5b1de7);for(const _0x1ecdc8 of this[_0x4ea006(0x3ac)]()[_0x4ea006(0xa0d)]()){if(!_0x1ecdc8)continue;key=VisuMZ[_0x4ea006(0x6fe)]['createKeyJS'](_0x1ecdc8,_0x4ea006(0x7ab)),VisuMZ[_0x4ea006(0x6fe)]['JS'][key]&&(_0x319933=VisuMZ[_0x4ea006(0x6fe)]['JS'][key][_0x4ea006(0x1b5)](this,this[_0x4ea006(0x3ac)](),_0x5b1de7,this[_0x4ea006(0xba9)](),_0x319933));}for(const _0x23c62f of _0x5b1de7[_0x4ea006(0xa0d)]()){if(!_0x23c62f)continue;key=VisuMZ[_0x4ea006(0x6fe)][_0x4ea006(0x2f1)](_0x23c62f,_0x4ea006(0xb98)),VisuMZ[_0x4ea006(0x6fe)]['JS'][key]&&(_0x319933=VisuMZ[_0x4ea006(0x6fe)]['JS'][key][_0x4ea006(0x1b5)](this,this[_0x4ea006(0x3ac)](),_0x5b1de7,this[_0x4ea006(0xba9)](),_0x319933));}return this[_0x4ea006(0x9da)](_0x5b1de7),_0x319933;},Game_Action[_0x45d586(0x19f)]['applyCritical']=function(_0x14281a){const _0x15d4ab=_0x45d586;return _0x14281a=VisuMZ['BattleCore'][_0x15d4ab(0xa41)][_0x15d4ab(0x244)][_0x15d4ab(0x2a9)][_0x15d4ab(0x1b5)](this,_0x14281a),_0x14281a=this[_0x15d4ab(0x97c)][_0x15d4ab(0x7ac)]*_0x14281a+this[_0x15d4ab(0x97c)]['criticalDmgFlat'],_0x14281a;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x396)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x649)],Game_Action['prototype'][_0x45d586(0x649)]=function(_0x4e8ccc){const _0x4f47f4=_0x45d586;if(this['_customDamageFormula']!==_0x4f47f4(0x915))return this['customDamageFormula'](_0x4e8ccc);else return DataManager[_0x4f47f4(0x64e)](this[_0x4f47f4(0xba9)]())===_0x4f47f4(0x5e1)?VisuMZ[_0x4f47f4(0x6fe)][_0x4f47f4(0x396)][_0x4f47f4(0x1b5)](this,_0x4e8ccc):this[_0x4f47f4(0x380)](_0x4e8ccc);},Game_Action['prototype'][_0x45d586(0x94f)]=function(_0x134a80){const _0x4ba424=_0x45d586;this[_0x4ba424(0x68d)]=_0x134a80;},Game_Action[_0x45d586(0x19f)]['customDamageFormula']=function(_0x6fd27a){const _0x3aca6e=_0x45d586,_0x427c9a=this[_0x3aca6e(0xba9)](),_0xe72ad4=_0x427c9a['damage'][_0x3aca6e(0x17a)];_0x427c9a[_0x3aca6e(0xb5d)][_0x3aca6e(0x17a)]=this[_0x3aca6e(0x68d)];let _0x2a26ef=VisuMZ['BattleCore'][_0x3aca6e(0x396)][_0x3aca6e(0x1b5)](this,_0x6fd27a);return _0x427c9a[_0x3aca6e(0xb5d)]['formula']=_0xe72ad4,_0x2a26ef;},Game_Action[_0x45d586(0x19f)][_0x45d586(0x2a2)]=function(){const _0x36058d=_0x45d586;if(this[_0x36058d(0xba9)]()[_0x36058d(0x34a)][_0x36058d(0x95f)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x5f4458=String(RegExp['$1'])[_0x36058d(0x689)]()['trim']();return _0x5f4458;}return _0x36058d(0x5e1);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x380)]=function(_0x4103cb){const _0x322c1a=_0x45d586,_0x78d7f7=DataManager[_0x322c1a(0x64e)](this[_0x322c1a(0xba9)]()),_0x1aefbf=VisuMZ['DamageStyles'][_0x78d7f7];try{return _0x1aefbf[_0x322c1a(0x6e9)][_0x322c1a(0x1b5)](this,_0x4103cb);}catch(_0x5eebae){if($gameTemp[_0x322c1a(0x292)]())console[_0x322c1a(0x833)](_0x5eebae);return VisuMZ[_0x322c1a(0x6fe)][_0x322c1a(0x396)][_0x322c1a(0x1b5)](this);}},Game_Action[_0x45d586(0x19f)][_0x45d586(0x8f2)]=function(_0x53a273,_0x25dcd7){const _0x4fe2a1=_0x45d586;if(this[_0x4fe2a1(0x13a)]())return _0x25dcd7;const _0x554d4e=this[_0x4fe2a1(0x3ac)](),_0x220bd8=_0x53a273;let _0x4e3cce=[],_0x583e58=[];_0x4e3cce[_0x4fe2a1(0x119)](this[_0x4fe2a1(0xb73)][_0x4fe2a1(0x4e9)],this['_armorPenetration'][_0x4fe2a1(0x69a)]),_0x583e58[_0x4fe2a1(0x119)](this[_0x4fe2a1(0xb73)][_0x4fe2a1(0x11c)],this[_0x4fe2a1(0xb73)][_0x4fe2a1(0x1fb)]);const _0xa4ca13=this[_0x4fe2a1(0x560)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x1c1256=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x9ba039=this[_0x4fe2a1(0x560)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x50c9e8=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x4e3cce=_0x4e3cce[_0x4fe2a1(0xb10)](_0x220bd8[_0x4fe2a1(0xa0d)]()[_0x4fe2a1(0x7a1)](_0x4f9fea=>_0x4f9fea&&_0x4f9fea[_0x4fe2a1(0x34a)]['match'](_0xa4ca13)?Number(RegExp['$1']):0x0)),_0x583e58=_0x583e58['concat'](_0x220bd8[_0x4fe2a1(0xa0d)]()[_0x4fe2a1(0x7a1)](_0x5ab0a9=>_0x5ab0a9&&_0x5ab0a9[_0x4fe2a1(0x34a)][_0x4fe2a1(0x95f)](_0x1c1256)?Number(RegExp['$1'])/0x64:0x0)),_0x4e3cce=_0x4e3cce[_0x4fe2a1(0xb10)](_0x554d4e[_0x4fe2a1(0xa0d)]()[_0x4fe2a1(0x7a1)](_0x1ce1c6=>_0x1ce1c6&&_0x1ce1c6[_0x4fe2a1(0x34a)][_0x4fe2a1(0x95f)](_0x9ba039)?Number(RegExp['$1']):0x0)),_0x583e58=_0x583e58['concat'](_0x554d4e[_0x4fe2a1(0xa0d)]()[_0x4fe2a1(0x7a1)](_0x3d3302=>_0x3d3302&&_0x3d3302[_0x4fe2a1(0x34a)][_0x4fe2a1(0x95f)](_0x50c9e8)?Number(RegExp['$1'])/0x64:0x0)),this[_0x4fe2a1(0xba9)]()[_0x4fe2a1(0x34a)][_0x4fe2a1(0x95f)](_0x9ba039)&&_0x4e3cce[_0x4fe2a1(0x119)](Number(RegExp['$1'])),this[_0x4fe2a1(0xba9)]()[_0x4fe2a1(0x34a)]['match'](_0x50c9e8)&&_0x583e58[_0x4fe2a1(0x119)](Number(RegExp['$1'])),_0x25dcd7=_0x4e3cce[_0x4fe2a1(0x25e)]((_0x1550b6,_0x260151)=>_0x1550b6-_0x260151,_0x25dcd7),_0x25dcd7>0x0&&(_0x25dcd7=_0x583e58[_0x4fe2a1(0x25e)]((_0x4f781d,_0x403958)=>_0x4f781d*(0x1-_0x403958),_0x25dcd7)),_0x25dcd7;},VisuMZ[_0x45d586(0x6fe)]['Game_Action_executeDamage']=Game_Action[_0x45d586(0x19f)]['executeDamage'],Game_Action['prototype']['executeDamage']=function(_0x90defd,_0x9ecd56){const _0x8c65d0=_0x45d586;_0x9ecd56=_0x9ecd56*this[_0x8c65d0(0x97c)][_0x8c65d0(0xb79)],_0x9ecd56+=this[_0x8c65d0(0x97c)][_0x8c65d0(0x67f)]*(_0x9ecd56>=0x0?0x1:-0x1),_0x9ecd56=this[_0x8c65d0(0x3d9)](_0x8c65d0(0x2c5),_0x90defd,_0x9ecd56,![]),_0x9ecd56=this['applyDamageCaps'](_0x9ecd56),_0x9ecd56>0x0?_0x9ecd56=Math[_0x8c65d0(0xb32)](_0x9ecd56):_0x9ecd56=Math['floor'](_0x9ecd56),this['_executedValue']=_0x9ecd56,this[_0x8c65d0(0x71a)]=this[_0x8c65d0(0x71a)]||0x0,this[_0x8c65d0(0x71a)]+=_0x9ecd56,VisuMZ['BattleCore'][_0x8c65d0(0x63c)][_0x8c65d0(0x1b5)](this,_0x90defd,_0x9ecd56),this[_0x8c65d0(0x3d9)](_0x8c65d0(0x813),_0x90defd,_0x9ecd56,!![]);},Game_Action[_0x45d586(0x19f)][_0x45d586(0xbdf)]=function(_0x5d06b5){if(this['isBypassDamageCap']())return _0x5d06b5;return _0x5d06b5=this['applySoftDamageCap'](_0x5d06b5),_0x5d06b5=this['applyHardDamageCap'](_0x5d06b5),_0x5d06b5;},Game_Action[_0x45d586(0x19f)][_0x45d586(0xbd1)]=function(){const _0x2abc4e=_0x45d586,_0x54f323=/<BYPASS DAMAGE CAP>/i;if(this[_0x2abc4e(0xba9)]()[_0x2abc4e(0x34a)][_0x2abc4e(0x95f)](_0x54f323))return!![];if(this['subject']()['traitObjects']()['some'](_0x33fd0a=>_0x33fd0a&&_0x33fd0a[_0x2abc4e(0x34a)][_0x2abc4e(0x95f)](_0x54f323)))return!![];return!VisuMZ['BattleCore'][_0x2abc4e(0xa41)][_0x2abc4e(0x244)]['EnableDamageCap'];},Game_Action[_0x45d586(0x19f)]['applySoftDamageCap']=function(_0x456d46){const _0x5548e9=_0x45d586;if(!VisuMZ[_0x5548e9(0x6fe)]['Settings']['Damage']['EnableSoftCap'])return _0x456d46;const _0x1bbf01=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x5548e9(0xba9)]()[_0x5548e9(0x34a)][_0x5548e9(0x95f)](_0x1bbf01))return _0x456d46;if(this[_0x5548e9(0x3ac)]()[_0x5548e9(0xa0d)]()['some'](_0x1bb12d=>_0x1bb12d&&_0x1bb12d['note']['match'](_0x1bbf01)))return _0x456d46;const _0x32d231=_0x456d46<0x0?-0x1:0x1;_0x456d46=Math[_0x5548e9(0xb5e)](_0x456d46);let _0x4c9c31=this[_0x5548e9(0x3ac)]()[_0x5548e9(0x445)]();this['item']()['note']['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x4c9c31+=Number(RegExp['$1'])/0x64);_0x4c9c31=_0x4c9c31['clamp'](0.01,0x1);const _0x9a56b=this['getHardDamageCap'](),_0x16b05a=_0x4c9c31*_0x9a56b;if(_0x456d46>_0x16b05a&&_0x9a56b>_0x16b05a){_0x456d46-=_0x16b05a;const _0x3b9465=VisuMZ[_0x5548e9(0x6fe)][_0x5548e9(0xa41)][_0x5548e9(0x244)][_0x5548e9(0x3bd)],_0x1caea7=Math[_0x5548e9(0x61a)](0x1-_0x456d46/((_0x9a56b-_0x16b05a)*_0x3b9465+_0x456d46),0.01);_0x456d46*=_0x1caea7,_0x456d46+=_0x16b05a;}return _0x456d46*_0x32d231;},Game_Action[_0x45d586(0x19f)][_0x45d586(0x828)]=function(){const _0x332058=_0x45d586;return this['item']()[_0x332058(0x34a)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x332058(0x3ac)]()['hardDamageCap']();},Game_Action['prototype'][_0x45d586(0x441)]=function(_0x2b6129){const _0x2271cf=_0x45d586;let _0x1971ee=this[_0x2271cf(0x828)]();return _0x2b6129[_0x2271cf(0xa3f)](-_0x1971ee,_0x1971ee);},Game_Action[_0x45d586(0x19f)]['shouldDisperseDamage']=function(){const _0x27413a=_0x45d586;if(!this[_0x27413a(0xba9)]())return![];if(!$gameParty[_0x27413a(0x1d1)]())return![];return(this[_0x27413a(0xba9)]()['note']||'')[_0x27413a(0x95f)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x885)]=function(_0x44abb6){const _0x3ed23a=_0x45d586;if(this[_0x3ed23a(0x249)]()){let _0x5f0a14=BattleManager[_0x3ed23a(0x708)];_0x44abb6/=_0x5f0a14[_0x3ed23a(0x1c9)],this['isAttack']()&&(_0x44abb6*=this[_0x3ed23a(0x3ac)]()[_0x3ed23a(0xd8)]()+0x1),_0x44abb6=_0x44abb6>0x0?Math['ceil'](_0x44abb6):Math[_0x3ed23a(0x85a)](_0x44abb6);}return _0x44abb6;},VisuMZ[_0x45d586(0x6fe)]['Game_Action_makeDamageValueDisperse']=Game_Action[_0x45d586(0x19f)][_0x45d586(0x2b8)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x2b8)]=function(_0x1b782e,_0x307689){const _0x1a8a0e=_0x45d586;let _0x4b8d65=VisuMZ[_0x1a8a0e(0x6fe)][_0x1a8a0e(0x476)]['call'](this,_0x1b782e,_0x307689);return this[_0x1a8a0e(0x885)](_0x4b8d65);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x65d)]=function(_0x8c0cd,_0x3a5b8d){const _0x5f3221=_0x45d586;let _0x5d7ded=(_0x8c0cd['mhp']*_0x3a5b8d['value1']+_0x3a5b8d[_0x5f3221(0x93d)])*_0x8c0cd['rec'];_0x5d7ded=this[_0x5f3221(0x885)](_0x5d7ded),this[_0x5f3221(0x1c8)]()&&(_0x5d7ded*=this[_0x5f3221(0x3ac)]()[_0x5f3221(0x736)]),_0x5d7ded=Math[_0x5f3221(0x85a)](_0x5d7ded),_0x5d7ded!==0x0&&(_0x8c0cd['gainHp'](_0x5d7ded),this[_0x5f3221(0x5c3)](_0x8c0cd));},Game_Action['prototype'][_0x45d586(0xbc4)]=function(_0x40f1f7,_0x5b1ac7){const _0x2daa57=_0x45d586;let _0x58088d=(_0x40f1f7[_0x2daa57(0x13c)]*_0x5b1ac7[_0x2daa57(0x1ba)]+_0x5b1ac7[_0x2daa57(0x93d)])*_0x40f1f7[_0x2daa57(0x90a)];_0x58088d=this[_0x2daa57(0x885)](_0x58088d),this['isItem']()&&(_0x58088d*=this[_0x2daa57(0x3ac)]()[_0x2daa57(0x736)]),_0x58088d=Math[_0x2daa57(0x85a)](_0x58088d),_0x58088d!==0x0&&(_0x40f1f7[_0x2daa57(0x8ef)](_0x58088d),this[_0x2daa57(0x5c3)](_0x40f1f7));},Game_Action['prototype'][_0x45d586(0x667)]=function(_0x3904e3,_0x435364){const _0x4b463b=_0x45d586;let _0x27c709=Math[_0x4b463b(0x85a)](_0x435364[_0x4b463b(0x1ba)]);_0x27c709=this[_0x4b463b(0x885)](_0x27c709),_0x27c709!==0x0&&(_0x3904e3[_0x4b463b(0x732)](_0x27c709),this[_0x4b463b(0x5c3)](_0x3904e3));},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xbb8)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x6f1)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x6f1)]=function(_0x38daa8){const _0x3abe85=_0x45d586;if(_0x38daa8&&_0x38daa8[_0x3abe85(0x690)]())_0x38daa8[_0x3abe85(0xb84)]();this[_0x3abe85(0x3d9)]('PreApply%1JS',_0x38daa8,0x0,!![]),VisuMZ[_0x3abe85(0x6fe)][_0x3abe85(0xbb8)]['call'](this,_0x38daa8),this['applyBattleCoreJS']('PostApply%1JS',_0x38daa8,this['_executedValue']||0x0,!![]),this['applyResultSwitches'](_0x38daa8);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x3d9)]=function(_0xd58cb,_0x44e3e0,_0xf6fb17,_0x552465){const _0x3e8759=_0x45d586;if(this[_0x3e8759(0xba1)]||this[_0x3e8759(0xb94)])return;_0xf6fb17=_0xf6fb17||0x0;const _0x4b3bf6=_0xf6fb17,_0x3e7cf0=VisuMZ[_0x3e8759(0x6fe)]['Settings'][_0x3e8759(0x4c4)],_0x5254d2=_0xd58cb[_0x3e8759(0x534)]('');if(_0x3e7cf0[_0x5254d2]){_0xf6fb17=_0x3e7cf0[_0x5254d2][_0x3e8759(0x1b5)](this,_0xf6fb17,_0x44e3e0);if(_0x552465)_0xf6fb17=_0x4b3bf6;}let _0x490874=VisuMZ['BattleCore']['createKeyJS'](this[_0x3e8759(0xba9)](),_0xd58cb[_0x3e8759(0x534)](''));if(VisuMZ[_0x3e8759(0x6fe)]['JS'][_0x490874]){_0xf6fb17=VisuMZ[_0x3e8759(0x6fe)]['JS'][_0x490874][_0x3e8759(0x1b5)](this,this[_0x3e8759(0x3ac)](),_0x44e3e0,this[_0x3e8759(0xba9)](),_0xf6fb17);if(_0x552465)_0xf6fb17=_0x4b3bf6;}for(const _0x2b964e of this[_0x3e8759(0x3ac)]()[_0x3e8759(0xa0d)]()){if(!_0x2b964e)continue;_0x490874=VisuMZ[_0x3e8759(0x6fe)][_0x3e8759(0x2f1)](_0x2b964e,_0xd58cb[_0x3e8759(0x534)]('AsUser'));if(VisuMZ[_0x3e8759(0x6fe)]['JS'][_0x490874]){_0xf6fb17=VisuMZ[_0x3e8759(0x6fe)]['JS'][_0x490874][_0x3e8759(0x1b5)](this,this[_0x3e8759(0x3ac)](),_0x44e3e0,_0x2b964e,_0xf6fb17);if(_0x552465)_0xf6fb17=_0x4b3bf6;}}for(const _0x1417f6 of _0x44e3e0[_0x3e8759(0xa0d)]()){if(!_0x1417f6)continue;_0x490874=VisuMZ[_0x3e8759(0x6fe)][_0x3e8759(0x2f1)](_0x1417f6,_0xd58cb[_0x3e8759(0x534)](_0x3e8759(0x457)));if(VisuMZ['BattleCore']['JS'][_0x490874]){_0xf6fb17=VisuMZ[_0x3e8759(0x6fe)]['JS'][_0x490874][_0x3e8759(0x1b5)](this,this[_0x3e8759(0x3ac)](),_0x44e3e0,_0x1417f6,_0xf6fb17);if(_0x552465)_0xf6fb17=_0x4b3bf6;}}return _0xf6fb17;},Game_Action[_0x45d586(0x19f)][_0x45d586(0x707)]=function(_0x3b07ec){const _0x550988=_0x45d586,_0x1afee4=this[_0x550988(0x71a)]||0x0,_0xb1719f=VisuMZ[_0x550988(0x6fe)][_0x550988(0xa41)]['Mechanics'],_0xc1f0c6=_0x3b07ec[_0x550988(0x534)]('');_0xb1719f[_0xc1f0c6]&&_0xb1719f[_0xc1f0c6][_0x550988(0x1b5)](this,_0x1afee4);let _0x8af9d4=VisuMZ[_0x550988(0x6fe)][_0x550988(0x2f1)](this[_0x550988(0xba9)](),_0x3b07ec);VisuMZ['BattleCore']['JS'][_0x8af9d4]&&VisuMZ[_0x550988(0x6fe)]['JS'][_0x8af9d4]['call'](this,this[_0x550988(0x3ac)](),this['subject'](),this[_0x550988(0xba9)](),_0x1afee4);for(const _0x2818a5 of this['subject']()['traitObjects']()){if(!_0x2818a5)continue;_0x8af9d4=VisuMZ['BattleCore'][_0x550988(0x2f1)](_0x2818a5,_0x3b07ec),VisuMZ[_0x550988(0x6fe)]['JS'][_0x8af9d4]&&VisuMZ[_0x550988(0x6fe)]['JS'][_0x8af9d4][_0x550988(0x1b5)](this,this['subject'](),this[_0x550988(0x3ac)](),_0x2818a5,_0x1afee4);}},Game_Action[_0x45d586(0x19f)][_0x45d586(0x9fd)]=function(){const _0x5d4b72=_0x45d586;return VisuMZ[_0x5d4b72(0x6fe)][_0x5d4b72(0xa41)][_0x5d4b72(0x4c4)]['CalcActionSpeedJS']['call'](this);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x76f)]=function(){const _0x369f86=_0x45d586;return VisuMZ[_0x369f86(0x6fe)]['Settings'][_0x369f86(0x4c4)][_0x369f86(0x41f)];},Game_Action[_0x45d586(0x19f)][_0x45d586(0x814)]=function(){const _0x51ba82=_0x45d586;if(this['_targetBattlerKey']===_0x51ba82(0x7a7))return![];if(this['_targetBattlerKey']===_0x51ba82(0x245))return![];if(!this['item']())return![];return this['item']()[_0x51ba82(0x34a)][_0x51ba82(0x95f)](/<JS TARGETS>/i);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x892)]=function(){const _0x59d1d5=_0x45d586;if(this[_0x59d1d5(0x1cf)]===_0x59d1d5(0x7a7))return![];if(this[_0x59d1d5(0x1cf)]===_0x59d1d5(0x245))return![];if(!this[_0x59d1d5(0x6cf)]&&this[_0x59d1d5(0x3ac)]()[_0x59d1d5(0xb4e)]())return![];if(this[_0x59d1d5(0x814)]())return!![];if(!this[_0x59d1d5(0xba9)]())return![];return typeof this[_0x59d1d5(0xba9)]()['scope']===_0x59d1d5(0x832);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x8eb)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x29f)],Game_Action['prototype']['isForOpponent']=function(){const _0x32b252=_0x45d586;if(this[_0x32b252(0x1cf)]===_0x32b252(0x7a7))return![];if(this[_0x32b252(0x1cf)]===_0x32b252(0x245))return!![];return this[_0x32b252(0x892)]()&&!this[_0x32b252(0x814)]()?this[_0x32b252(0x38f)]():VisuMZ[_0x32b252(0x6fe)][_0x32b252(0x8eb)][_0x32b252(0x1b5)](this);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x38f)]=function(){const _0x3f13ca=_0x45d586,_0x20da30=String(this[_0x3f13ca(0xba9)]()[_0x3f13ca(0x657)]);if(_0x20da30[_0x3f13ca(0x95f)](/ANY/i))return!![];return _0x20da30[_0x3f13ca(0x95f)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x611)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x979)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x979)]=function(){const _0x554e0b=_0x45d586;if(this[_0x554e0b(0x1cf)]==='all\x20actors')return!![];if(this[_0x554e0b(0x1cf)]===_0x554e0b(0x245))return![];return this['isBattleCoreTargetScope']()&&!this[_0x554e0b(0x814)]()?this[_0x554e0b(0x364)]():VisuMZ[_0x554e0b(0x6fe)]['Game_Action_isForFriend']['call'](this);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x364)]=function(){const _0x335a65=_0x45d586,_0x1fa57c=String(this[_0x335a65(0xba9)]()[_0x335a65(0x657)]);return _0x1fa57c[_0x335a65(0x95f)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x652)]=function(){const _0x327129=_0x45d586;if(this['isBattleCoreTargetScope']()&&!this[_0x327129(0x814)]()){const _0x407079=String(this['item']()['scope']);return _0x407079[_0x327129(0x95f)](/(?:ENEMY|FOE)/i)&&_0x407079[_0x327129(0x95f)](/OR/i)&&_0x407079[_0x327129(0x95f)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action['prototype']['isForAnyoneFocusFriends']=function(){const _0x213c1e=_0x45d586;if(this[_0x213c1e(0x652)]()){const _0x5d6fde=String(this[_0x213c1e(0xba9)]()[_0x213c1e(0x657)]);if(_0x5d6fde[_0x213c1e(0x95f)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x45d586(0x19f)][_0x45d586(0x4b2)]=function(){const _0x5e65ed=_0x45d586;if(this[_0x5e65ed(0x652)]()){const _0x5670fc=String(this[_0x5e65ed(0xba9)]()[_0x5e65ed(0x657)]);if(_0x5670fc[_0x5e65ed(0x95f)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x4c1)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x674)],Game_Action['prototype'][_0x45d586(0x674)]=function(){const _0x278dab=_0x45d586;if(this[_0x278dab(0x1cf)]===_0x278dab(0x7a7))return!![];return this['isBattleCoreTargetScope']()&&!this[_0x278dab(0x814)]()?this[_0x278dab(0x908)]():VisuMZ[_0x278dab(0x6fe)][_0x278dab(0x4c1)][_0x278dab(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)]['Game_Action_isForDeadFriend']=Game_Action['prototype'][_0x45d586(0x99b)],Game_Action[_0x45d586(0x19f)]['isForDeadFriend']=function(){const _0x394cc9=_0x45d586;if(this[_0x394cc9(0x1cf)]===_0x394cc9(0x7a7))return VisuMZ[_0x394cc9(0x6fe)][_0x394cc9(0x224)][_0x394cc9(0x1b5)](this);return VisuMZ['BattleCore'][_0x394cc9(0x224)][_0x394cc9(0x1b5)](this);},Game_Action['prototype'][_0x45d586(0x908)]=function(){const _0x16cb8c=_0x45d586;if(this[_0x16cb8c(0x652)]())return!![];return![];},Game_Action['prototype'][_0x45d586(0x998)]=function(){const _0x4b067f=_0x45d586;return this[_0x4b067f(0xba9)]()&&this[_0x4b067f(0xba9)]()['note'][_0x4b067f(0x95f)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x2b4)]=Game_Action[_0x45d586(0x19f)]['isForOne'],Game_Action[_0x45d586(0x19f)]['isForOne']=function(){const _0x359f28=_0x45d586;if(this[_0x359f28(0x1cf)]===_0x359f28(0x7a7))return![];if(this[_0x359f28(0x1cf)]===_0x359f28(0x245))return![];return this[_0x359f28(0x892)]()&&!this[_0x359f28(0x814)]()?this[_0x359f28(0x42a)]():VisuMZ[_0x359f28(0x6fe)]['Game_Action_isForOne'][_0x359f28(0x1b5)](this);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x42a)]=function(){const _0x25d0d1=_0x45d586;if(this[_0x25d0d1(0x652)]())return!![];return![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x327)]=Game_Action[_0x45d586(0x19f)]['isForRandom'],Game_Action[_0x45d586(0x19f)]['isForRandom']=function(){const _0x29d372=_0x45d586;if(this[_0x29d372(0x1cf)]===_0x29d372(0x7a7))return![];if(this[_0x29d372(0x1cf)]==='all\x20enemies')return![];return this[_0x29d372(0x892)]()&&!this[_0x29d372(0x814)]()?this[_0x29d372(0xa8d)]():VisuMZ[_0x29d372(0x6fe)][_0x29d372(0x327)][_0x29d372(0x1b5)](this);},Game_Action['prototype'][_0x45d586(0xa8d)]=function(){const _0x429873=_0x45d586,_0xdb9337=String(this[_0x429873(0xba9)]()[_0x429873(0x657)]);return _0xdb9337['match'](/(?:RAND|RANDOM)/i);},VisuMZ[_0x45d586(0x6fe)]['Game_Action_isForAll']=Game_Action[_0x45d586(0x19f)]['isForAll'],Game_Action['prototype'][_0x45d586(0xb67)]=function(){const _0x2411e0=_0x45d586;if(this[_0x2411e0(0x1cf)]===_0x2411e0(0x7a7))return!![];if(this['_targetBattlerKey']===_0x2411e0(0x245))return!![];return VisuMZ[_0x2411e0(0x6fe)][_0x2411e0(0x5d8)][_0x2411e0(0x1b5)](this);},Game_Action['prototype'][_0x45d586(0x1f3)]=function(){const _0x1913dd=_0x45d586;if(!this['item']())return![];if(this[_0x1913dd(0x99b)]())return![];return(this[_0x1913dd(0xba9)]()[_0x1913dd(0x34a)]||'')[_0x1913dd(0x95f)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x5c5)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0xb55)],Game_Action[_0x45d586(0x19f)][_0x45d586(0xb55)]=function(_0x446b26){const _0x437b50=_0x45d586;if(this[_0x437b50(0x998)]()&&_0x446b26===this['subject']())return![];return VisuMZ[_0x437b50(0x6fe)][_0x437b50(0x5c5)]['call'](this,_0x446b26);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x715)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x752)],Game_Action['prototype'][_0x45d586(0x752)]=function(){const _0x4a18e8=_0x45d586,_0x59d9ba=VisuMZ[_0x4a18e8(0x6fe)]['Game_Action_itemTargetCandidates'][_0x4a18e8(0x1b5)](this);if(this[_0x4a18e8(0x998)]())_0x59d9ba['remove'](this[_0x4a18e8(0x3ac)]());return _0x59d9ba;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x111)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x312)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x312)]=function(){const _0x2f367b=_0x45d586;return this['isBattleCoreTargetScope']()&&!this[_0x2f367b(0x814)]()?this[_0x2f367b(0x377)]():VisuMZ[_0x2f367b(0x6fe)][_0x2f367b(0x111)]['call'](this);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x377)]=function(){const _0x280678=_0x45d586,_0x2abd33=String(this[_0x280678(0xba9)]()['scope']);if(_0x2abd33[_0x280678(0x95f)](/RANDOM/i))return![];if(_0x2abd33[_0x280678(0x95f)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x2abd33[_0x280678(0x95f)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x2abd33[_0x280678(0x95f)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x2abd33[_0x280678(0x95f)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x280678(0x6fe)][_0x280678(0x111)][_0x280678(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x187)]=Game_Action['prototype'][_0x45d586(0x48b)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x48b)]=function(){const _0x14ccc5=_0x45d586;let _0x40cd69=[];return this[_0x14ccc5(0x892)]()?this[_0x14ccc5(0x814)]()?_0x40cd69=this[_0x14ccc5(0x872)]():_0x40cd69=this[_0x14ccc5(0xaff)]():_0x40cd69=VisuMZ[_0x14ccc5(0x6fe)]['Game_Action_makeTargets']['call'](this),_0x40cd69=this['applyTargetFilters'](_0x40cd69),_0x40cd69;},Game_Action['prototype'][_0x45d586(0x170)]=function(){const _0x4e35cc=_0x45d586;return this[_0x4e35cc(0x3ac)]()['isActor']()&&!this['subject']()['isAutoBattle']();},Game_Action['prototype'][_0x45d586(0x872)]=function(){const _0x4b5b7a=_0x45d586,_0x22040d=VisuMZ[_0x4b5b7a(0x6fe)][_0x4b5b7a(0x2f1)](this[_0x4b5b7a(0xba9)](),'Targets');if(VisuMZ[_0x4b5b7a(0x6fe)]['JS'][_0x22040d]){targets=VisuMZ[_0x4b5b7a(0x6fe)]['Game_Action_makeTargets']['call'](this);const _0x4e96ab=VisuMZ[_0x4b5b7a(0x6fe)][_0x4b5b7a(0x2f1)](this[_0x4b5b7a(0xba9)](),_0x4b5b7a(0xba0));return targets=VisuMZ[_0x4b5b7a(0x6fe)]['JS'][_0x4e96ab]['call'](this,this[_0x4b5b7a(0x3ac)](),targets),this[_0x4b5b7a(0x661)](targets);}return this[_0x4b5b7a(0xaff)]();},Game_Action['prototype'][_0x45d586(0xaff)]=function(){const _0x3e714e=_0x45d586;let _0x54b85b=[];const _0x4db42d=String(this[_0x3e714e(0xba9)]()[_0x3e714e(0x657)]);if(this[_0x3e714e(0x4b2)]())return this['isSubjectValidForAnyoneSelect']()?(_0x54b85b=this[_0x3e714e(0x5f5)](),this[_0x3e714e(0x661)](_0x54b85b)):(this['_targetIndex']=-0x1,_0x54b85b[_0x3e714e(0x119)](...this[_0x3e714e(0xb7a)]()),this[_0x3e714e(0x661)](_0x54b85b));if(this[_0x3e714e(0x92f)]()){if(this[_0x3e714e(0x170)]())return _0x54b85b=this['getBattlerKeyTargets'](),this['repeatTargets'](_0x54b85b);else{if(Imported[_0x3e714e(0x12c)]){if(VisuMZ['BattleAI'][_0x3e714e(0x23e)]<1.19){let _0x474840='';_0x474840+=_0x3e714e(0xa2c),_0x474840+='in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20',_0x474840+=_0x3e714e(0x87c),alert(_0x474840),SceneManager[_0x3e714e(0x16f)]();}}return this[_0x3e714e(0x157)]=-0x1,_0x54b85b['push'](...this[_0x3e714e(0x592)]()),this[_0x3e714e(0x661)](_0x54b85b);}}if(_0x4db42d[_0x3e714e(0x95f)](/(\d+) RANDOM ANY/i)){let _0xb49b98=Number(RegExp['$1']);while(_0xb49b98--){const _0x54c58a=Math[_0x3e714e(0x356)](0x2)===0x0?this[_0x3e714e(0x276)]():this[_0x3e714e(0x904)]();_0x54b85b[_0x3e714e(0x119)](_0x54c58a[_0x3e714e(0x6be)]());}return this[_0x3e714e(0x661)](_0x54b85b);}if(_0x4db42d[_0x3e714e(0x95f)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x41cdd4=Number(RegExp['$1']);while(_0x41cdd4--){_0x54b85b[_0x3e714e(0x119)](this[_0x3e714e(0x276)]()[_0x3e714e(0x6be)]());}return this[_0x3e714e(0x661)](_0x54b85b);}if(_0x4db42d[_0x3e714e(0x95f)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x5cac39=Number(RegExp['$1']);while(_0x5cac39--){_0x54b85b['push'](this['friendsUnit']()[_0x3e714e(0x6be)]());}return this[_0x3e714e(0x661)](_0x54b85b);}if(_0x4db42d[_0x3e714e(0x95f)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x54b85b[_0x3e714e(0x119)](...this[_0x3e714e(0x904)]()[_0x3e714e(0x60c)]()['filter'](_0x39d812=>_0x39d812!==this[_0x3e714e(0x3ac)]())),this[_0x3e714e(0x661)](_0x54b85b);return VisuMZ[_0x3e714e(0x6fe)]['Game_Action_makeTargets']['call'](this);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x9e7)]=function(_0x408070){const _0x11b45f=_0x45d586,_0x264bdb=[];for(let _0x4c38d7=0x0;_0x4c38d7<this[_0x11b45f(0x52c)]();_0x4c38d7++){_0x264bdb[_0x11b45f(0x119)](_0x408070[_0x11b45f(0x6be)]());}return _0x264bdb;},Game_Action[_0x45d586(0x19f)][_0x45d586(0x985)]=function(_0x331fad){const _0x5f041b=_0x45d586;if(!this[_0x5f041b(0xba9)]())return _0x331fad;const _0x27511a=this[_0x5f041b(0xba9)]()[_0x5f041b(0x34a)];if(this[_0x5f041b(0x998)]()){this[_0x5f041b(0xb67)]()&&_0x331fad[_0x5f041b(0x4e7)](this[_0x5f041b(0x3ac)]());if(_0x331fad[_0x5f041b(0x840)](this['subject']())){const _0x23490d=this[_0x5f041b(0x904)]()[_0x5f041b(0x60c)]()[_0x5f041b(0x4e7)](this['subject']());if(_0x23490d[_0x5f041b(0x1c9)]>0x0){_0x23490d[_0x5f041b(0x680)]((_0x193df0,_0x72b88)=>_0x193df0['hpRate']()-_0x72b88[_0x5f041b(0xb14)]());while(_0x331fad['includes'](this['subject']())){const _0x5bb68c=_0x331fad[_0x5f041b(0xa63)](this[_0x5f041b(0x3ac)]());_0x331fad[_0x5bb68c]=_0x23490d[Math['randomInt'](_0x23490d[_0x5f041b(0x1c9)])];}}else _0x331fad[_0x5f041b(0x4e7)](this[_0x5f041b(0x3ac)]());}}return _0x331fad;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x8de)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x1a3)],Game_Action['prototype'][_0x45d586(0x1a3)]=function(_0x581240,_0x1cbbfc){const _0x48b580=_0x45d586;VisuMZ['BattleCore'][_0x48b580(0x8de)][_0x48b580(0x1b5)](this,_0x581240,_0x1cbbfc);if(!_0x581240[_0x48b580(0x711)]())return;for(const _0x18a397 of this['subject']()['attackStates']()){if(_0x18a397===_0x581240[_0x48b580(0x19d)]()){let _0x57afed=_0x1cbbfc[_0x48b580(0x1ba)];_0x57afed*=_0x581240[_0x48b580(0xbbf)](_0x18a397),_0x57afed*=this['subject']()[_0x48b580(0x1dd)](_0x18a397),_0x57afed*=this['lukEffectRate'](_0x581240),Math[_0x48b580(0x201)]()<_0x57afed&&(_0x581240[_0x48b580(0xa73)]=!![],this[_0x48b580(0x5c3)](_0x581240));}}},VisuMZ[_0x45d586(0x6fe)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x45d586(0x19f)][_0x45d586(0x8f5)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x8f5)]=function(_0xc30dc7,_0xe6cc3a){const _0x7dbe6d=_0x45d586;VisuMZ[_0x7dbe6d(0x6fe)][_0x7dbe6d(0x8b2)][_0x7dbe6d(0x1b5)](this,_0xc30dc7,_0xe6cc3a);if(!_0xc30dc7[_0x7dbe6d(0x711)]())return;if(_0xe6cc3a['dataId']!==_0xc30dc7[_0x7dbe6d(0x19d)]())return;let _0x2ed1a1=_0xe6cc3a['value1'];!this[_0x7dbe6d(0x13a)]()&&(_0x2ed1a1*=_0xc30dc7[_0x7dbe6d(0xbbf)](_0xe6cc3a[_0x7dbe6d(0x70b)]),_0x2ed1a1*=this[_0x7dbe6d(0x899)](_0xc30dc7)),Math[_0x7dbe6d(0x201)]()<_0x2ed1a1&&(_0xc30dc7['_deathStateApplied']=!![],this['makeSuccess'](_0xc30dc7));},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xaf3)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x29a)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x29a)]=function(){const _0x20eb1a=_0x45d586;VisuMZ[_0x20eb1a(0x6fe)][_0x20eb1a(0xaf3)]['call'](this),this[_0x20eb1a(0x69f)](),this['resetResultSwitches']();},Game_Action[_0x45d586(0x19f)][_0x45d586(0x69f)]=function(){const _0x493fe8=_0x45d586;if(!SceneManager['isSceneBattle']())return;const _0x4a131d=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x5d07b0=this[_0x493fe8(0xba9)]()[_0x493fe8(0x34a)]['match'](_0x4a131d);if(_0x5d07b0)for(const _0x5ef2ca of _0x5d07b0){if(!_0x5ef2ca)continue;_0x5ef2ca[_0x493fe8(0x95f)](_0x4a131d);const _0x431998=String(RegExp['$1'])[_0x493fe8(0xaea)](',')[_0x493fe8(0x7a1)](_0x355a05=>String(_0x355a05)['trim']()),_0x1c54cf=_0x431998[_0x493fe8(0x7a1)](_0x37ee72=>DataManager[_0x493fe8(0x468)](_0x37ee72));for(const _0x435abd of _0x1c54cf){const _0x239095=$dataCommonEvents[_0x435abd];_0x239095&&$gameTemp[_0x493fe8(0x485)](_0x435abd);}}},DataManager[_0x45d586(0x468)]=function(_0x223642){const _0x5ac850=_0x45d586;_0x223642=_0x223642[_0x5ac850(0x689)]()[_0x5ac850(0x379)](),this[_0x5ac850(0x8aa)]=this[_0x5ac850(0x8aa)]||{};if(this[_0x5ac850(0x8aa)][_0x223642])return this['_commonEventIDs'][_0x223642];for(const _0x44aaf2 of $dataCommonEvents){if(!_0x44aaf2)continue;let _0x198200=_0x44aaf2['name'];_0x198200=_0x198200[_0x5ac850(0x646)](/\x1I\[(\d+)\]/gi,''),_0x198200=_0x198200[_0x5ac850(0x646)](/\\I\[(\d+)\]/gi,''),this[_0x5ac850(0x8aa)][_0x198200[_0x5ac850(0x689)]()[_0x5ac850(0x379)]()]=_0x44aaf2['id'];}return this[_0x5ac850(0x8aa)][_0x223642]||0x0;},Game_Action[_0x45d586(0x19f)]['resetResultSwitches']=function(){const _0x129494=_0x45d586;if(!SceneManager['isSceneBattle']())return;const _0x35b0f7=VisuMZ[_0x129494(0x6fe)][_0x129494(0xa41)][_0x129494(0x4c4)];_0x35b0f7['SwitchCritical']&&$gameSwitches[_0x129494(0x177)](_0x35b0f7[_0x129494(0xafe)],![]),_0x35b0f7[_0x129494(0x72e)]&&$gameSwitches[_0x129494(0x177)](_0x35b0f7['SwitchMissEvade'],![]),_0x35b0f7[_0x129494(0x9fc)]&&$gameVariables[_0x129494(0x177)](_0x35b0f7[_0x129494(0x9fc)],0x0),_0x35b0f7[_0x129494(0x6a8)]&&$gameVariables[_0x129494(0x177)](_0x35b0f7[_0x129494(0x6a8)],0x0);},Game_Action[_0x45d586(0x19f)][_0x45d586(0x2f6)]=function(_0x3853e2){const _0x243551=_0x45d586;if(!SceneManager[_0x243551(0x81a)]())return;if(!_0x3853e2)return;const _0x15265c=_0x3853e2[_0x243551(0x116)](),_0x281d1c=VisuMZ[_0x243551(0x6fe)][_0x243551(0xa41)][_0x243551(0x4c4)];_0x281d1c['SwitchCritical']&&_0x15265c[_0x243551(0x1f7)]&&$gameSwitches[_0x243551(0x177)](_0x281d1c[_0x243551(0xafe)],!![]);_0x281d1c[_0x243551(0x72e)]&&(_0x15265c[_0x243551(0xa1f)]||_0x15265c[_0x243551(0x67e)])&&$gameSwitches['setValue'](_0x281d1c[_0x243551(0x72e)],!![]);if(_0x281d1c[_0x243551(0x9fc)]){let _0x2d8416=$gameVariables[_0x243551(0x72a)](_0x281d1c[_0x243551(0x9fc)]);_0x15265c[_0x243551(0x541)]>0x0&&(_0x2d8416+=Math[_0x243551(0xb5e)](_0x15265c[_0x243551(0x541)])),$gameVariables[_0x243551(0x177)](_0x281d1c[_0x243551(0x9fc)],_0x2d8416);}if(_0x281d1c[_0x243551(0x6a8)]){let _0x32f436=$gameVariables[_0x243551(0x72a)](_0x281d1c[_0x243551(0x6a8)]);_0x15265c['hpDamage']<0x0&&(_0x32f436+=Math[_0x243551(0xb5e)](_0x15265c[_0x243551(0x541)])),$gameVariables[_0x243551(0x177)](_0x281d1c[_0x243551(0x6a8)],_0x32f436);}},VisuMZ[_0x45d586(0x6fe)]['LifeStealRegExp']={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa32)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x589)],Game_Action[_0x45d586(0x19f)]['executeHpDamage']=function(_0x5c519f,_0x2f0133){const _0x349845=_0x45d586;VisuMZ[_0x349845(0x6fe)][_0x349845(0xa32)]['call'](this,_0x5c519f,_0x2f0133);!this[_0x349845(0x1a8)]()&&_0x5c519f&&_0x5c519f['result']()[_0x349845(0x541)]>0x0&&this[_0x349845(0x699)]('HP',_0x5c519f,_0x5c519f[_0x349845(0x116)]()[_0x349845(0x541)]);if(_0x5c519f){this['_executeHpDamage']=this[_0x349845(0x202)]||{};const _0x621f9c=_0x5c519f[_0x349845(0x8da)]();this[_0x349845(0x202)][_0x621f9c]=_0x2f0133;}},Game_Action['prototype'][_0x45d586(0xb9a)]=function(_0x405738){const _0x3dcf57=_0x45d586;this['_executeHpDamage']=this[_0x3dcf57(0x202)]||{};const _0x4c2261=_0x405738[_0x3dcf57(0x8da)]();return this['_executeHpDamage'][_0x4c2261]||0x0;},VisuMZ['BattleCore'][_0x45d586(0xad1)]=Game_Action[_0x45d586(0x19f)]['executeMpDamage'],Game_Action[_0x45d586(0x19f)]['executeMpDamage']=function(_0x2267ae,_0x254af2){const _0x36f1ef=_0x45d586;VisuMZ[_0x36f1ef(0x6fe)][_0x36f1ef(0xad1)][_0x36f1ef(0x1b5)](this,_0x2267ae,_0x254af2),!this[_0x36f1ef(0x1a8)]()&&_0x2267ae&&_0x2267ae[_0x36f1ef(0x116)]()['mpDamage']>0x0&&this[_0x36f1ef(0x699)]('MP',_0x2267ae,_0x2267ae[_0x36f1ef(0x116)]()[_0x36f1ef(0x7fe)]);},Game_Action['prototype']['performLifeSteal']=function(_0x3201ad,_0x11cfed,_0x4736df){const _0xa5a96d=_0x45d586;_0x3201ad=_0x3201ad[_0xa5a96d(0x689)]()[_0xa5a96d(0x379)]();const _0xe3f7d6=this[_0xa5a96d(0xb82)](_0x3201ad,_0x11cfed);if(_0xe3f7d6<=0x0)return;const _0x252623=Math[_0xa5a96d(0x31d)](_0x4736df*_0xe3f7d6);if(_0x252623<=0x0)return;let _0x42518c=this[_0xa5a96d(0x3ac)]();if(this[_0xa5a96d(0x4ce)])_0x42518c=this[_0xa5a96d(0x4ce)];const _0x909714=_0x11cfed[_0xa5a96d(0x39d)](_0x3201ad)?-0x1:0x1;if(_0x3201ad==='HP')_0x42518c[_0xa5a96d(0x76e)](_0x909714*_0x252623);if(_0x3201ad==='MP')_0x42518c[_0xa5a96d(0x8ef)](_0x909714*_0x252623);},Game_Action['prototype'][_0x45d586(0xb82)]=function(_0x20ae0d,_0x7034cf){const _0x1cb463=_0x45d586;if(this['isCancelLifeSteal'](_0x20ae0d))return 0x0;if(this[_0x1cb463(0x3ac)]()['isDisarmLifeSteal'](_0x20ae0d))return 0x0;if(_0x7034cf[_0x1cb463(0x704)](_0x20ae0d))return 0x0;let _0x61885d=0x0;return _0x61885d+=this[_0x1cb463(0x89d)](_0x20ae0d),_0x61885d+=this[_0x1cb463(0x3ac)]()[_0x1cb463(0xb82)](_0x20ae0d,this[_0x1cb463(0xba9)]()['hitType']),_0x61885d[_0x1cb463(0xa3f)](0x0,0x1);},Game_Action['prototype'][_0x45d586(0xa65)]=function(_0x316613){const _0x398bf0=_0x45d586;_0x316613=_0x316613[_0x398bf0(0x689)]()[_0x398bf0(0x379)]();const _0x3d5f8e=VisuMZ[_0x398bf0(0x6fe)][_0x398bf0(0x2f2)],_0x2c5b08=this[_0x398bf0(0xba9)]()[_0x398bf0(0x34a)]||'';if(_0x2c5b08[_0x398bf0(0x95f)](_0x3d5f8e[_0x398bf0(0x7c1)]))return!![];if(_0x316613==='HP'&&_0x2c5b08[_0x398bf0(0x95f)](_0x3d5f8e[_0x398bf0(0x1b7)]))return!![];if(_0x316613==='MP'&&_0x2c5b08['match'](_0x3d5f8e[_0x398bf0(0xb30)]))return!![];return![];},Game_Action['prototype'][_0x45d586(0x89d)]=function(_0x3f6e8b){const _0xe71e7e=_0x45d586,_0x6df9cb=VisuMZ[_0xe71e7e(0x6fe)][_0xe71e7e(0x2f2)],_0x2e75c7=this[_0xe71e7e(0xba9)]()['note']||'';_0x3f6e8b=_0x3f6e8b[_0xe71e7e(0x689)]()[_0xe71e7e(0x379)]();const _0x108beb=_0x2e75c7[_0xe71e7e(0x95f)](_0x6df9cb[_0xe71e7e(0xb61)]);if(_0x108beb)for(const _0x1ef7a9 of _0x108beb){_0x1ef7a9[_0xe71e7e(0x95f)](_0x6df9cb[_0xe71e7e(0xb61)]);const _0xdc0d15=String(RegExp['$1'])[_0xe71e7e(0x689)]()[_0xe71e7e(0x379)](),_0x2514f1=Number(RegExp['$2'])*0.01;if(_0xdc0d15!==_0x3f6e8b)continue;return _0x2514f1;}return 0x0;},Game_BattlerBase[_0x45d586(0x19f)]['lifeStealRate']=function(_0x26db11,_0x5eefa7){const _0x34970b=_0x45d586,_0x189315=VisuMZ['BattleCore']['LifeStealRegExp'];let _0x371ec2=0x0;_0x26db11=_0x26db11[_0x34970b(0x689)]()[_0x34970b(0x379)]();for(const _0x31c9bc of this['traitObjects']()){if(!_0x31c9bc)continue;const _0x3b07a7=_0x31c9bc[_0x34970b(0x34a)]||'',_0xc1fca4=_0x3b07a7[_0x34970b(0x95f)](_0x189315['lifeStealTrait']);if(_0xc1fca4)for(const _0x5c4c17 of _0xc1fca4){_0x5c4c17['match'](_0x189315['lifeStealTrait']);const _0x44eae7=String(RegExp['$1'])['toUpperCase']()['trim'](),_0x215f55=String(RegExp['$2']),_0x46e039=Number(RegExp['$3'])*0.01;if(_0x44eae7!==_0x26db11)continue;if(_0x5eefa7===Game_Action[_0x34970b(0x9c8)]&&_0x215f55[_0x34970b(0x95f)](/CERTAIN/i))_0x371ec2+=_0x46e039;else{if(_0x5eefa7===Game_Action[_0x34970b(0x43c)]&&_0x215f55['match'](/PHYS/i))_0x371ec2+=_0x46e039;else _0x5eefa7===Game_Action['HITTYPE_MAGICAL']&&_0x215f55[_0x34970b(0x95f)](/MAGIC/i)&&(_0x371ec2+=_0x46e039);}}}return _0x371ec2;},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0xa2b)]=function(_0x2e68f4){const _0x25adc0=_0x45d586;_0x2e68f4=_0x2e68f4[_0x25adc0(0x689)]()[_0x25adc0(0x379)]();const _0x4b41e0=VisuMZ['BattleCore']['LifeStealRegExp'];for(const _0xac7791 of this['traitObjects']()){if(!_0xac7791)continue;const _0x2618d3=_0xac7791[_0x25adc0(0x34a)]||'';if(_0x2618d3[_0x25adc0(0x95f)](_0x4b41e0[_0x25adc0(0xaf4)]))return!![];if(_0x2e68f4==='HP'&&_0x2618d3[_0x25adc0(0x95f)](_0x4b41e0['disarmHpLifeSteal']))return!![];if(_0x2e68f4==='MP'&&_0x2618d3[_0x25adc0(0x95f)](_0x4b41e0['disarmMpLifeSteal']))return!![];}return![];},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x39d)]=function(_0x4696b3){const _0xa18a25=_0x45d586;_0x4696b3=_0x4696b3[_0xa18a25(0x689)]()[_0xa18a25(0x379)]();const _0x540e5a=VisuMZ[_0xa18a25(0x6fe)][_0xa18a25(0x2f2)];for(const _0x41b069 of this['traitObjects']()){if(!_0x41b069)continue;const _0x5ba60f=_0x41b069[_0xa18a25(0x34a)]||'';if(_0x5ba60f['match'](_0x540e5a[_0xa18a25(0x851)]))return!![];if(_0x4696b3==='HP'&&_0x5ba60f[_0xa18a25(0x95f)](_0x540e5a[_0xa18a25(0x2f9)]))return!![];if(_0x4696b3==='MP'&&_0x5ba60f[_0xa18a25(0x95f)](_0x540e5a[_0xa18a25(0x9e1)]))return!![];}return![];},Game_BattlerBase[_0x45d586(0x19f)]['isGuardLifeSteal']=function(_0x1df530){const _0x14d7d9=_0x45d586;_0x1df530=_0x1df530[_0x14d7d9(0x689)]()[_0x14d7d9(0x379)]();const _0x2a5436=VisuMZ[_0x14d7d9(0x6fe)][_0x14d7d9(0x2f2)];for(const _0x322410 of this[_0x14d7d9(0xa0d)]()){if(!_0x322410)continue;const _0x206a89=_0x322410[_0x14d7d9(0x34a)]||'';if(_0x206a89[_0x14d7d9(0x95f)](_0x2a5436['guardLifeSteal']))return!![];if(_0x1df530==='HP'&&_0x206a89[_0x14d7d9(0x95f)](_0x2a5436[_0x14d7d9(0x4c6)]))return!![];if(_0x1df530==='MP'&&_0x206a89[_0x14d7d9(0x95f)](_0x2a5436['guardMpLifeSteal']))return!![];}return![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x4e5)]=Game_BattlerBase['prototype'][_0x45d586(0x2fc)],Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x2fc)]=function(){const _0x26c4b8=_0x45d586;VisuMZ[_0x26c4b8(0x6fe)][_0x26c4b8(0x4e5)]['call'](this),this[_0x26c4b8(0x738)]();},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x738)]=function(){const _0x1b4f52=_0x45d586;this[_0x1b4f52(0x309)]=![];},VisuMZ['BattleCore'][_0x45d586(0x530)]=Game_BattlerBase['prototype'][_0x45d586(0x291)],Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x291)]=function(){const _0xe7b26b=_0x45d586;this[_0xe7b26b(0x420)]={},VisuMZ[_0xe7b26b(0x6fe)][_0xe7b26b(0x530)][_0xe7b26b(0x1b5)](this);},Game_BattlerBase['prototype'][_0x45d586(0xaec)]=function(_0x39bd02){const _0x149372=_0x45d586;return this[_0x149372(0x420)]=this[_0x149372(0x420)]||{},this[_0x149372(0x420)][_0x39bd02]!==undefined;},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x43b)]=function(){const _0x19a58e=_0x45d586;if(this[_0x19a58e(0x420)]['hardDamageCap']!==undefined)return this[_0x19a58e(0x420)][_0x19a58e(0x43b)];const _0x535bef=/<DAMAGE CAP:[ ](\d+)>/i,_0x69172b=this[_0x19a58e(0xa0d)]()[_0x19a58e(0x7a1)](_0xebfd47=>_0xebfd47&&_0xebfd47[_0x19a58e(0x34a)]['match'](_0x535bef)?Number(RegExp['$1']):0x0);let _0x3442f6=_0x69172b[_0x19a58e(0x1c9)]>0x0?Math['max'](..._0x69172b):0x0;if(_0x3442f6<=0x0)_0x3442f6=VisuMZ[_0x19a58e(0x6fe)][_0x19a58e(0xa41)]['Damage']['DefaultHardCap'];return this[_0x19a58e(0x420)][_0x19a58e(0x43b)]=_0x3442f6,this[_0x19a58e(0x420)][_0x19a58e(0x43b)];},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x445)]=function(){const _0x50612e=_0x45d586;if(this[_0x50612e(0x420)][_0x50612e(0xa9d)]!==undefined)return this[_0x50612e(0x420)][_0x50612e(0xa9d)];let _0x42c987=VisuMZ[_0x50612e(0x6fe)][_0x50612e(0xa41)][_0x50612e(0x244)]['DefaultSoftCap'];const _0x46fe1d=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x2dab52=this[_0x50612e(0xa0d)]()[_0x50612e(0x7a1)](_0x2d9586=>_0x2d9586&&_0x2d9586[_0x50612e(0x34a)][_0x50612e(0x95f)](_0x46fe1d)?Number(RegExp['$1'])/0x64:0x0);return _0x42c987=_0x2dab52[_0x50612e(0x25e)]((_0x58613d,_0x2a3f6c)=>_0x58613d+_0x2a3f6c,_0x42c987),this[_0x50612e(0x420)][_0x50612e(0xa9d)]=_0x42c987,this[_0x50612e(0x420)][_0x50612e(0xa9d)][_0x50612e(0xa3f)](0.01,0x1);},VisuMZ[_0x45d586(0x6fe)]['Game_BattlerBase_die']=Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x67c)],Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x67c)]=function(){const _0x209fd1=_0x45d586;VisuMZ[_0x209fd1(0x6fe)]['Game_BattlerBase_die']['call'](this),SceneManager['isSceneBattle']()&&(this[_0x209fd1(0x135)](_0x209fd1(0x898)),this[_0x209fd1(0x124)]=undefined);},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0xa7b)]=function(){const _0x53419e=_0x45d586;if(!SceneManager[_0x53419e(0x81a)]())return null;if(!SceneManager[_0x53419e(0x4f4)][_0x53419e(0x992)])return null;return SceneManager[_0x53419e(0x4f4)]['_spriteset'][_0x53419e(0x44b)](this);},Game_BattlerBase['prototype'][_0x45d586(0x710)]=function(){const _0x4a7993=_0x45d586;return VisuMZ[_0x4a7993(0x6fe)][_0x4a7993(0xa41)]['Actor'][_0x4a7993(0x8ad)];},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x492)]=function(){const _0x8f101=_0x45d586;return VisuMZ[_0x8f101(0x6fe)][_0x8f101(0xa41)][_0x8f101(0x540)][_0x8f101(0x677)];},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x11a)]=function(){const _0x1609f6=_0x45d586;return this[_0x1609f6(0x7f0)]&&this[_0x1609f6(0x7f0)]()?VisuMZ[_0x1609f6(0x6fe)][_0x1609f6(0xa41)][_0x1609f6(0x540)][_0x1609f6(0x20b)]:VisuMZ['BattleCore'][_0x1609f6(0xa41)][_0x1609f6(0x401)][_0x1609f6(0x20b)];},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0xd2)]=function(){return!![];},Game_BattlerBase[_0x45d586(0x19f)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x45d586(0x436)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x45d586(0x4fb)]=function(_0x418910){const _0x5e2dd6=_0x45d586;if(!_0x418910)return 0x0;let _0x839aa0=0x0;const _0x5021e7=_0x418910[_0x5e2dd6(0x34a)];return _0x5021e7[_0x5e2dd6(0x95f)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x839aa0+=Number(RegExp['$1'])),_0x5021e7[_0x5e2dd6(0x95f)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x839aa0+=Number(RegExp['$1'])),_0x839aa0;},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x301)]=function(_0x34f4fc){const _0x5c28b5=_0x45d586;if(!_0x34f4fc)return 0x0;let _0x42fd73=0x0;const _0x44c655=_0x34f4fc[_0x5c28b5(0x34a)];return _0x44c655['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x42fd73+=Number(RegExp['$1'])),_0x44c655[_0x5c28b5(0x95f)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x42fd73+=Number(RegExp['$2'])),_0x42fd73;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x449)]=Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x876)],Game_BattlerBase['prototype']['isStateResist']=function(_0x148486){const _0x54657f=_0x45d586;if(_0x148486===this[_0x54657f(0x19d)]()&&this[_0x54657f(0x711)]())return!![];return VisuMZ[_0x54657f(0x6fe)][_0x54657f(0x449)]['call'](this,_0x148486);},Game_BattlerBase['prototype'][_0x45d586(0x711)]=function(){const _0x3053aa=_0x45d586;return this[_0x3053aa(0x309)];},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x2d7)]=function(_0x4576c2){const _0x573c19=_0x45d586;_0x4576c2?this[_0x573c19(0x300)]():this[_0x573c19(0x5ef)]();},Game_BattlerBase[_0x45d586(0x19f)]['addImmortal']=function(){const _0x32cb70=_0x45d586;if(this['isDead']())return;this[_0x32cb70(0x309)]=!![],this[_0x32cb70(0xa73)]=![];},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x5ef)]=function(){const _0x42b37a=_0x45d586,_0x4e2884=this[_0x42b37a(0x45d)]();this[_0x42b37a(0x309)]=![],_0x4e2884&&this[_0x42b37a(0xa73)]&&this['die'](),this[_0x42b37a(0xa73)]=![],this[_0x42b37a(0x291)](),this[_0x42b37a(0x1e3)]()&&_0x4e2884&&(this[_0x42b37a(0xa50)](),this[_0x42b37a(0x58c)]());},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x991)]=Game_Action['prototype']['numRepeats'],Game_Action[_0x45d586(0x19f)][_0x45d586(0x318)]=function(){const _0x227ebe=_0x45d586;return this['item']()?VisuMZ['BattleCore'][_0x227ebe(0x991)][_0x227ebe(0x1b5)](this):0x0;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x497)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x473)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x473)]=function(){const _0x10c1f7=_0x45d586;if(this['subject']()&&this[_0x10c1f7(0x3ac)]()['canAttack']())VisuMZ['BattleCore']['Game_Action_setAttack'][_0x10c1f7(0x1b5)](this);else BattleManager[_0x10c1f7(0xa08)]?VisuMZ[_0x10c1f7(0x6fe)][_0x10c1f7(0x497)][_0x10c1f7(0x1b5)](this):this[_0x10c1f7(0xb8d)]();},VisuMZ[_0x45d586(0x6fe)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x5a1)],Game_BattlerBase['prototype'][_0x45d586(0x5a1)]=function(){const _0x211b70=_0x45d586;if(!this[_0x211b70(0xb78)]())return![];return VisuMZ[_0x211b70(0x6fe)][_0x211b70(0x990)][_0x211b70(0x1b5)](this);},Game_BattlerBase[_0x45d586(0x19f)]['canAttackBattleCore']=function(){const _0x4ab493=_0x45d586;for(const _0x541ba6 of this['traitObjects']()){if(!_0x541ba6)continue;if(_0x541ba6[_0x4ab493(0x34a)][_0x4ab493(0x95f)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x823)]=Game_Action[_0x45d586(0x19f)]['setGuard'],Game_Action['prototype'][_0x45d586(0x7dc)]=function(){const _0x59c127=_0x45d586;this['subject']()[_0x59c127(0x36e)]()&&VisuMZ[_0x59c127(0x6fe)][_0x59c127(0x823)][_0x59c127(0x1b5)](this);},VisuMZ['BattleCore'][_0x45d586(0x626)]=Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x36e)],Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x36e)]=function(){const _0x19d26f=_0x45d586;if(!this['canGuardBattleCore']())return![];return VisuMZ[_0x19d26f(0x6fe)]['Game_BattlerBase_canGuard'][_0x19d26f(0x1b5)](this);},Game_BattlerBase[_0x45d586(0x19f)]['canGuardBattleCore']=function(){const _0x49a363=_0x45d586;for(const _0x7778ed of this['traitObjects']()){if(!_0x7778ed)continue;if(_0x7778ed[_0x49a363(0x34a)][_0x49a363(0x95f)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0x45d586(0x3f5)]=function(){const _0x39fd09=_0x45d586;for(const _0x341e5a of this[_0x39fd09(0xa0d)]()){if(!_0x341e5a)continue;if(_0x341e5a[_0x39fd09(0x34a)][_0x39fd09(0x95f)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x829)]=Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x1a1)],Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x1a1)]=function(_0x536860){const _0x159cee=_0x45d586;if(_0x536860&&_0x536860[_0x159cee(0x34a)]['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x162ca7=this[_0x159cee(0x904)]()['aliveMembers']();if(_0x162ca7[_0x159cee(0x1c9)]===0x1&&_0x162ca7[0x0]===this)return![];}return VisuMZ[_0x159cee(0x6fe)][_0x159cee(0x829)][_0x159cee(0x1b5)](this,_0x536860);},Game_Battler['prototype'][_0x45d586(0x76f)]=function(){const _0x1e3f4e=_0x45d586;return VisuMZ['BattleCore']['Settings'][_0x1e3f4e(0x4c4)][_0x1e3f4e(0x41f)];},VisuMZ['BattleCore']['Game_Battler_regenerateAll']=Game_Battler['prototype'][_0x45d586(0x750)],Game_Battler[_0x45d586(0x19f)]['regenerateAll']=function(){const _0x216ad9=_0x45d586;if(SceneManager[_0x216ad9(0x81a)]()){if(BattleManager[_0x216ad9(0xad9)]()){if(this[_0x216ad9(0x158)]()<=0x0)return;}else{if($gameTroop[_0x216ad9(0x158)]()<=0x0)return;}}if(SceneManager['isSceneBattle']()&&BattleManager[_0x216ad9(0xad9)]()&&this[_0x216ad9(0x854)]===Graphics[_0x216ad9(0x4f8)])return;this[_0x216ad9(0x854)]=Graphics[_0x216ad9(0x4f8)],SceneManager[_0x216ad9(0x81a)]()&&this[_0x216ad9(0x6f4)](_0x216ad9(0xbcc)),VisuMZ[_0x216ad9(0x6fe)][_0x216ad9(0xa6c)]['call'](this),SceneManager[_0x216ad9(0x81a)]()&&(this[_0x216ad9(0x40b)](),this[_0x216ad9(0x6f4)](_0x216ad9(0x6a2)));},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x40b)]=function(){const _0x12ed8f=_0x45d586;if(SceneManager[_0x12ed8f(0x81a)]())for(const _0x1e326f of this[_0x12ed8f(0xa0d)]()){if(!_0x1e326f)continue;this[_0x12ed8f(0x5e6)](_0x1e326f);}},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x5e6)]=function(_0x12505f){const _0x27e47a=_0x45d586;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager[_0x27e47a(0x81a)]())return;if(this[_0x27e47a(0x1e3)]())return;if(this[_0x27e47a(0x714)]())return;if(_0x12505f[_0x27e47a(0x34a)][_0x27e47a(0x95f)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x19a21b=Number(RegExp['$1']);$gameTemp[_0x27e47a(0x3a0)]([this],_0x19a21b,![],![]);}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x9eb)]=Game_Battler['prototype'][_0x45d586(0xa5d)],Game_Battler[_0x45d586(0x19f)][_0x45d586(0xa5d)]=function(){const _0x746da=_0x45d586;this[_0x746da(0x6f4)](_0x746da(0x1bb)),VisuMZ[_0x746da(0x6fe)][_0x746da(0x9eb)][_0x746da(0x1b5)](this),this[_0x746da(0x6f4)](_0x746da(0x725));},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x98b)]=Game_Battler['prototype'][_0x45d586(0x6e3)],Game_Battler[_0x45d586(0x19f)]['onTurnEnd']=function(){const _0x5047ef=_0x45d586;this['processBattleCoreJS']('PreEndTurnJS'),VisuMZ['BattleCore'][_0x5047ef(0x98b)]['call'](this),VisuMZ[_0x5047ef(0x6fe)][_0x5047ef(0xa41)]['Mechanics'][_0x5047ef(0xb16)]&&this[_0x5047ef(0x44d)](),this[_0x5047ef(0x6f4)](_0x5047ef(0x76b));},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x6f4)]=function(_0x3ae9a9){const _0x57a27f=_0x45d586;if(this[_0x57a27f(0xba1)]||this[_0x57a27f(0xb94)])return;const _0x5192be=VisuMZ['BattleCore']['Settings'][_0x57a27f(0x4c4)];if(_0x5192be[_0x3ae9a9])_0x5192be[_0x3ae9a9][_0x57a27f(0x1b5)](this);for(const _0x503d23 of this['traitObjects']()){if(!_0x503d23)continue;key=VisuMZ[_0x57a27f(0x6fe)][_0x57a27f(0x2f1)](_0x503d23,_0x3ae9a9),VisuMZ[_0x57a27f(0x6fe)]['JS'][key]&&VisuMZ[_0x57a27f(0x6fe)]['JS'][key][_0x57a27f(0x1b5)](this,this,this,_0x503d23,0x0);}},Game_Battler[_0x45d586(0x19f)]['chantStyle']=function(){const _0x416e3c=_0x45d586;return VisuMZ[_0x416e3c(0x6fe)][_0x416e3c(0xa41)][_0x416e3c(0x540)][_0x416e3c(0x779)]||![];},Game_Battler[_0x45d586(0x19f)]['isChanting']=function(){const _0x47fa32=_0x45d586;if(this[_0x47fa32(0x75e)]()){if(this[_0x47fa32(0x522)]()){if(this[_0x47fa32(0x55f)]['some'](_0x1f599c=>_0x1f599c['item']()&&_0x1f599c[_0x47fa32(0x8a9)]()))return!![];}else{if(this[_0x47fa32(0x55f)][_0x47fa32(0x314)](_0x2844d0=>_0x2844d0[_0x47fa32(0xba9)]()&&_0x2844d0[_0x47fa32(0x206)]()))return!![];}}if(BattleManager[_0x47fa32(0xad9)]()&&this[_0x47fa32(0x452)]===_0x47fa32(0xfc))return this[_0x47fa32(0x522)]()?this[_0x47fa32(0x74c)]()&&this[_0x47fa32(0x74c)]()[_0x47fa32(0xba9)]()&&this['currentAction']()[_0x47fa32(0x8a9)]():this[_0x47fa32(0x74c)]()&&this[_0x47fa32(0x74c)]()[_0x47fa32(0xba9)]()&&this[_0x47fa32(0x74c)]()[_0x47fa32(0x206)]();return![];},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x812)]=function(){const _0x44f185=_0x45d586;if(BattleManager[_0x44f185(0xad9)]()&&this[_0x44f185(0x452)]===_0x44f185(0xfc))return this[_0x44f185(0x522)]()?this[_0x44f185(0x74c)]()&&this[_0x44f185(0x74c)]()[_0x44f185(0xba9)]()&&!this[_0x44f185(0x74c)]()[_0x44f185(0x8a9)]():this['currentAction']()&&this['currentAction']()[_0x44f185(0xba9)]()&&!this[_0x44f185(0x74c)]()['isMagicSkill']();return![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x8ba)]=Game_Battler[_0x45d586(0x19f)][_0x45d586(0x564)],Game_Battler[_0x45d586(0x19f)][_0x45d586(0x564)]=function(){const _0x3d496c=_0x45d586;VisuMZ[_0x3d496c(0x6fe)][_0x3d496c(0x8ba)][_0x3d496c(0x1b5)](this),this[_0x3d496c(0xba3)]=[];},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x254)]=function(){const _0x42645c=_0x45d586;if(!this[_0x42645c(0xba3)])this[_0x42645c(0x564)]();return this[_0x42645c(0xba3)][_0x42645c(0x1c9)]>0x0;},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x466)]=function(){const _0x2af2a2=_0x45d586;if(!SceneManager[_0x2af2a2(0x81a)]())return;if(BattleManager[_0x2af2a2(0xa68)]())return;if(!this['_damagePopupArray'])this[_0x2af2a2(0x564)]();this[_0x2af2a2(0x349)]();const _0x35237b=this[_0x2af2a2(0xa7b)]();if(_0x35237b)_0x35237b[_0x2af2a2(0x56b)]();},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x349)]=function(){const _0x191a45=_0x45d586,_0x2e3a19=this['result']();if(_0x2e3a19[_0x191a45(0xa1f)]||_0x2e3a19[_0x191a45(0x67e)]){const _0x20acc3=JsonEx[_0x191a45(0x9cc)](_0x2e3a19);_0x20acc3[_0x191a45(0x625)]=![],_0x20acc3[_0x191a45(0x7fe)]=0x0,this['_damagePopupArray'][_0x191a45(0x119)](_0x20acc3);if(!_0x2e3a19[_0x191a45(0x541)]&&!_0x2e3a19[_0x191a45(0x7fe)])return;}if(_0x2e3a19[_0x191a45(0x625)]){const _0x722a88=JsonEx[_0x191a45(0x9cc)](_0x2e3a19);_0x722a88['missed']=![],_0x722a88[_0x191a45(0x67e)]=![],_0x722a88[_0x191a45(0x7fe)]=0x0,this[_0x191a45(0xba3)]['push'](_0x722a88);}if(_0x2e3a19[_0x191a45(0x7fe)]!==0x0){const _0x1f75bc=JsonEx[_0x191a45(0x9cc)](_0x2e3a19);_0x1f75bc[_0x191a45(0xa1f)]=![],_0x1f75bc[_0x191a45(0x67e)]=![],_0x1f75bc[_0x191a45(0x625)]=![],this['_damagePopupArray']['push'](_0x1f75bc);}},Game_Battler[_0x45d586(0x19f)]['getNextDamagePopup']=function(){const _0x5c5666=_0x45d586;if(!this[_0x5c5666(0xba3)])this[_0x5c5666(0x564)]();return VisuMZ[_0x5c5666(0x6fe)][_0x5c5666(0xa41)]['Damage'][_0x5c5666(0xde)]?this['_damagePopupArray']['shift']():this[_0x5c5666(0xba3)]['pop']();},Game_Battler[_0x45d586(0x19f)]['setupTextPopup']=function(_0x37467b,_0x43f5b0){const _0x34efa9=_0x45d586;if(!SceneManager[_0x34efa9(0x81a)]())return;if(BattleManager[_0x34efa9(0xa68)]())return;if(!this['battler']())return;if(_0x37467b[_0x34efa9(0x1c9)]<=0x0)return;_0x43f5b0=_0x43f5b0||{},_0x43f5b0['textColor']=_0x43f5b0[_0x34efa9(0x614)]||'#ffffff',_0x43f5b0[_0x34efa9(0xa36)]=_0x43f5b0[_0x34efa9(0xa36)]||[0x0,0x0,0x0,0x0],_0x43f5b0[_0x34efa9(0xbe7)]=_0x43f5b0['flashDuration']||0x0,this[_0x34efa9(0xa7b)]()[_0x34efa9(0x3e4)](_0x37467b,_0x43f5b0);},Game_Battler['prototype']['setupIconTextPopup']=function(_0x5c6f76,_0x411f08,_0x26190c){const _0x92ead8=_0x45d586;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x92ead8(0xa68)]())return;if(!this[_0x92ead8(0xa7b)]())return;if(_0x411f08[_0x92ead8(0x1c9)]<=0x0)return;_0x26190c=_0x26190c||{},_0x26190c['textColor']=_0x26190c[_0x92ead8(0x614)]||'#ffffff',_0x26190c['flashColor']=_0x26190c[_0x92ead8(0xa36)]||[0x0,0x0,0x0,0x0],_0x26190c[_0x92ead8(0xbe7)]=_0x26190c['flashDuration']||0x0,this[_0x92ead8(0xa7b)]()[_0x92ead8(0x775)](_0x5c6f76,_0x411f08,_0x26190c);},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x654)]=function(){const _0x1dd362=_0x45d586;if(this['isHidden']())return![];if(this['isAlive']()&&this[_0x1dd362(0x2bd)]())return!![];if(this[_0x1dd362(0x690)]()&&this['hasSvBattler']()){if(this[_0x1dd362(0x1e3)]()&&this[_0x1dd362(0xad2)]())return![];}else{if(this[_0x1dd362(0x1e3)]())return![];}return!![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x8d5)]=Game_Battler[_0x45d586(0x19f)][_0x45d586(0x2fe)],Game_Battler[_0x45d586(0x19f)][_0x45d586(0x2fe)]=function(){const _0x1a2972=_0x45d586;VisuMZ['BattleCore'][_0x1a2972(0x8d5)]['call'](this),this[_0x1a2972(0x288)]();},Game_Battler[_0x45d586(0x19f)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x8c7)]=function(){return![];},VisuMZ['BattleCore'][_0x45d586(0x8a0)]=Game_Battler[_0x45d586(0x19f)][_0x45d586(0x28b)],Game_Battler[_0x45d586(0x19f)][_0x45d586(0x28b)]=function(_0x1c92d6){const _0x5ccb9d=_0x45d586;VisuMZ[_0x5ccb9d(0x6fe)]['Game_Battler_onBattleStart'][_0x5ccb9d(0x1b5)](this,_0x1c92d6),this[_0x5ccb9d(0xdc)](_0x1c92d6),this[_0x5ccb9d(0x564)]();},Game_Battler[_0x45d586(0x19f)][_0x45d586(0xdc)]=function(_0x23baa0){const _0x6d8657=_0x45d586;this[_0x6d8657(0x3f8)](![]),this[_0x6d8657(0x233)]=undefined,this[_0x6d8657(0x71c)]=undefined;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xe2)]=Game_Battler[_0x45d586(0x19f)][_0x45d586(0x6d5)],Game_Battler[_0x45d586(0x19f)]['onBattleEnd']=function(){const _0x50c608=_0x45d586;VisuMZ[_0x50c608(0x6fe)]['Game_Battler_onBattleEnd']['call'](this),this['onBattleEndBattleCore']();},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x3f1)]=function(){const _0x1c5497=_0x45d586;this[_0x1c5497(0x233)]=undefined,this[_0x1c5497(0x71c)]=undefined;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x3d4)]=Game_Battler[_0x45d586(0x19f)][_0x45d586(0x4dd)],Game_Battler['prototype']['performActionStart']=function(_0x50b81b){const _0xd97a26=_0x45d586;VisuMZ[_0xd97a26(0x6fe)][_0xd97a26(0x3d4)][_0xd97a26(0x1b5)](this,_0x50b81b);if(!_0x50b81b['isGuard']()){const _0x266bb5=this[_0xd97a26(0xa7b)]();_0x266bb5&&_0x266bb5[_0xd97a26(0xa96)]();}this[_0xd97a26(0x3f8)](![]);},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x9df)]=function(){const _0x23ae22=_0x45d586;this[_0x23ae22(0x124)]=undefined;const _0xb09209=this['_flinched'];this[_0x23ae22(0x4c3)]=![];if(BattleManager[_0x23ae22(0x971)]()&&this[_0x23ae22(0x917)]()){const _0x5ee029=this['battler']();if(_0x5ee029&&_0xb09209)_0x5ee029['stepForward']();return;}const _0x55fa06=this['battler']();if(_0x55fa06)_0x55fa06[_0x23ae22(0x27e)]();this[_0x23ae22(0x3f8)](![]),this[_0x23ae22(0x58c)]();},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x6f0)]=function(_0x35d13a){const _0x971c12=_0x45d586;if(_0x35d13a['isAttack']())this[_0x971c12(0x3d6)]();else{if(_0x35d13a[_0x971c12(0x73f)]())this[_0x971c12(0x135)](_0x971c12(0x59d));else{if(_0x35d13a['isMagical']())this[_0x971c12(0x135)](_0x971c12(0x5a5));else{if(_0x35d13a['isSkill']())[0x1,0x2,0x5,0x6]['includes'](_0x35d13a[_0x971c12(0xba9)]()[_0x971c12(0xb5d)]['type'])?this[_0x971c12(0x3d6)]():this[_0x971c12(0x135)](_0x971c12(0x76c));else _0x35d13a[_0x971c12(0x1c8)]()&&this[_0x971c12(0x135)]('item');}}}},Game_Battler['prototype']['getAttackMotion']=function(){const _0x3811ab=_0x45d586;return $dataSystem[_0x3811ab(0x18a)][0x0];},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x118)]=function(){const _0xb8a000=_0x45d586,_0x32b054=this[_0xb8a000(0x786)]();return _0x32b054?_0x32b054['weaponImageId']:0x0;},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x90f)]=function(_0x47b586){const _0x81a179=_0x45d586;if(!$gameSystem[_0x81a179(0x138)]())return;const _0x8ba355=this[_0x81a179(0xa7b)](),_0xb4300d=_0x47b586['battler']();if(!_0x8ba355||!_0xb4300d)return;const _0x1bab0c=_0xb4300d[_0x81a179(0x5bb)],_0x4054f7=_0xb4300d[_0x81a179(0x83d)];this[_0x81a179(0xb12)](_0x1bab0c,_0x4054f7,0x0,![],_0x81a179(0xa8e),-0x1),_0x8ba355[_0x81a179(0x8f0)]();const _0x1d615a=VisuMZ[_0x81a179(0x6fe)][_0x81a179(0xa41)][_0x81a179(0x205)];let _0x4f6bc6=(_0xb4300d[_0x81a179(0x7ea)]+_0x8ba355[_0x81a179(0x7ea)])/0x2;_0x4f6bc6*=this['isActor']()?0x1:-0x1;let _0x3c2e87=_0x1d615a[_0x81a179(0x761)]*(this['isActor']()?0x1:-0x1);_0x47b586[_0x81a179(0x5f3)](_0x4f6bc6,_0x3c2e87,0x0,![],'Linear'),_0xb4300d[_0x81a179(0x8f0)]();},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x135)]=function(_0x2dbe68){const _0xdb9f4b=_0x45d586;if(SceneManager[_0xdb9f4b(0x81a)]()){const _0xd6f524=this[_0xdb9f4b(0xa7b)]();_0xd6f524&&(_0xd6f524[_0xdb9f4b(0xbc6)](_0x2dbe68),['swing','thrust',_0xdb9f4b(0x46b)][_0xdb9f4b(0x840)](_0x2dbe68)&&this['performWeaponAnimation']());}this['clearFreezeMotion']();},Game_Battler['prototype'][_0x45d586(0x256)]=function(){},Game_Battler[_0x45d586(0x19f)][_0x45d586(0xbd2)]=function(_0x521ea2){const _0x155856=_0x45d586;if(SceneManager[_0x155856(0x81a)]()){const _0x17c727=this[_0x155856(0xa7b)]();if(_0x17c727)_0x17c727[_0x155856(0x4d7)](_0x521ea2);}},Game_Battler['prototype'][_0x45d586(0x9f1)]=function(){const _0x5000d3=_0x45d586;if(SceneManager[_0x5000d3(0x81a)]()){const _0x489ff8=this[_0x5000d3(0x118)]();this[_0x5000d3(0xbd2)](_0x489ff8);}},Game_Battler['prototype'][_0x45d586(0x3a3)]=function(_0x4fe83d,_0x1c4c47){const _0x2866c3=_0x45d586;if(!_0x4fe83d)return;if(!_0x4fe83d[_0x2866c3(0xba9)]())return;if(_0x4fe83d[_0x2866c3(0xe4)]())return;if(_0x4fe83d[_0x2866c3(0x73f)]())return;if(_0x4fe83d[_0x2866c3(0x1c8)]())return;if($gameTemp[_0x2866c3(0x910)])return;let _0x3ea5a2=0x0;const _0x3f5cd0=VisuMZ[_0x2866c3(0x6fe)][_0x2866c3(0xa41)][_0x2866c3(0x205)],_0x200bd9=_0x4fe83d[_0x2866c3(0xba9)]()[_0x2866c3(0x34a)];if(_0x200bd9[_0x2866c3(0x95f)](/<CAST ANIMATION: (\d+)>/i))_0x3ea5a2=Number(RegExp['$1']);else{if(_0x200bd9['match'](/<NO CAST ANIMATION>/i))return;else{if(_0x4fe83d[_0x2866c3(0x13a)]())_0x3ea5a2=_0x3f5cd0[_0x2866c3(0xab5)];else{if(_0x4fe83d[_0x2866c3(0x560)]())_0x3ea5a2=_0x3f5cd0[_0x2866c3(0x733)];else _0x4fe83d[_0x2866c3(0x8a9)]()&&(_0x3ea5a2=_0x3f5cd0[_0x2866c3(0x4de)]);}}}_0x3ea5a2>0x0&&$gameTemp[_0x2866c3(0x131)]([this],_0x3ea5a2,!!_0x1c4c47);},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x857)]=function(){const _0xb0f42c=_0x45d586;SoundManager[_0xb0f42c(0x169)]();let _0x569bf5=VisuMZ[_0xb0f42c(0x6fe)][_0xb0f42c(0xa41)][_0xb0f42c(0x205)][_0xb0f42c(0x747)];_0x569bf5>0x0&&(Imported[_0xb0f42c(0xbc5)]?$gameTemp['requestFauxAnimation']([this],_0x569bf5):$gameTemp[_0xb0f42c(0x131)]([this],_0x569bf5));},Game_Battler[_0x45d586(0x19f)][_0x45d586(0xaf5)]=function(){const _0x482e0e=_0x45d586;if(!$gameSystem['isSideView']())return![];if(!BattleManager[_0x482e0e(0x971)]())return![];if(!this[_0x482e0e(0x45d)]())return![];if(this[_0x482e0e(0x917)]())return!![];if(this['isTpbReady']())return!![];if(this[_0x482e0e(0x91d)]>=0x1)return!![];return![];},VisuMZ[_0x45d586(0x6fe)]['Game_Battler_performDamage']=Game_Battler[_0x45d586(0x19f)][_0x45d586(0xa04)],Game_Battler['prototype']['performDamage']=function(){const _0x37ace8=_0x45d586;this[_0x37ace8(0xaf5)]()&&(this['_performDamageMotion']=!![]),VisuMZ['BattleCore']['Game_Battler_performDamage'][_0x37ace8(0x1b5)](this),this[_0x37ace8(0x964)](),this['performShakeFlinch']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x577)]=Game_Battler[_0x45d586(0x19f)][_0x45d586(0x863)],Game_Battler[_0x45d586(0x19f)][_0x45d586(0x863)]=function(){const _0x35b3cb=_0x45d586;this[_0x35b3cb(0xaf5)]()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x35b3cb(0x6fe)][_0x35b3cb(0x577)][_0x35b3cb(0x1b5)](this),this[_0x35b3cb(0x964)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x1ef)]=Game_Battler[_0x45d586(0x19f)][_0x45d586(0x7ad)],Game_Battler[_0x45d586(0x19f)]['performEvasion']=function(){const _0x3949f2=_0x45d586;this[_0x3949f2(0xaf5)]()&&(this[_0x3949f2(0x124)]=!![]),VisuMZ[_0x3949f2(0x6fe)][_0x3949f2(0x1ef)][_0x3949f2(0x1b5)](this),this[_0x3949f2(0x964)]();},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x964)]=function(){const _0x1e4a02=_0x45d586;if(!$gameSystem['isSideView']())return;if(this[_0x1e4a02(0x4c3)])return;this[_0x1e4a02(0x4c3)]=!![];const _0x34273d=this[_0x1e4a02(0xa7b)]();if(_0x34273d)_0x34273d['stepFlinch']();},Game_Battler['prototype'][_0x45d586(0x348)]=function(){const _0x1bf161=_0x45d586;if(!this[_0x1bf161(0xa48)]())return;const _0x577a1b=VisuMZ['BattleCore'][_0x1bf161(0xa41)][_0x1bf161(0x540)];if(!(_0x577a1b['ShakeFlinch']??![]))return;if(this[_0x1bf161(0x797)]<=0x0)return;const _0x5d236e=this[_0x1bf161(0xa7b)]();if(_0x5d236e){const _0xe27ada=this[_0x1bf161(0x797)],_0x36e22c=(_0xe27ada/this[_0x1bf161(0x447)])[_0x1bf161(0xa3f)](0.8,0x1),_0x30e808=_0x577a1b[_0x1bf161(0x11f)]??0x30,_0xec2e10=_0x36e22c*_0x30e808;_0x5d236e[_0x1bf161(0xa1b)](_0xec2e10,_0x36e22c);}},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x58c)]=function(){const _0x3ebb52=_0x45d586;if(this[_0x3ebb52(0x1e3)]()&&this['_motionType']!==_0x3ebb52(0x898)){this['requestMotion']('dead');return;}if(this[_0x3ebb52(0x1e3)]()&&this[_0x3ebb52(0x816)]===_0x3ebb52(0x898))return;if(!!this[_0x3ebb52(0x981)])return;if(this['isEnemy']()){if(!this[_0x3ebb52(0x9b9)]()&&this!==BattleManager['_subject']){if(this['battler']())this[_0x3ebb52(0xa7b)]()[_0x3ebb52(0x67b)]();}this[_0x3ebb52(0x288)]();return;}if(this[_0x3ebb52(0x816)]===_0x3ebb52(0x9e2))return;if(this[_0x3ebb52(0x816)]===_0x3ebb52(0x942)&&!BattleManager['isInputting']())return;if(this['_motionType']==='guard'&&!BattleManager[_0x3ebb52(0x917)]())return;this[_0x3ebb52(0x2fe)]();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x3ebb52(0x1ce)])return;if(this[_0x3ebb52(0xa7b)]()&&BattleManager[_0x3ebb52(0x917)]()){this[_0x3ebb52(0xa7b)]()[_0x3ebb52(0x67b)](),this[_0x3ebb52(0x288)]();return;}this['battler']()&&BattleManager[_0x3ebb52(0x971)]()&&this!==BattleManager['_subject']&&this[_0x3ebb52(0xa7b)]()[_0x3ebb52(0x67b)]();},Game_Enemy['prototype'][_0x45d586(0x9b9)]=function(){const _0x2dcede=_0x45d586;if(!this[_0x2dcede(0x199)]())return![];const _0x2baf38=this['battler']();if(!_0x2baf38)return![];const _0x336568=_0x2baf38[_0x2dcede(0x82f)];if(!_0x336568)return![];const _0x51c81d=_0x336568['_motion'];return _0x51c81d&&!_0x51c81d[_0x2dcede(0x45f)];},Game_Battler[_0x45d586(0x19f)]['isBattlerFlipped']=function(){const _0x448129=_0x45d586;return this[_0x448129(0x6d3)];},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x3f8)]=function(_0x55f204){const _0x4b7950=_0x45d586;if(!$gameSystem[_0x4b7950(0x138)]())return;this[_0x4b7950(0x6d3)]=_0x55f204;const _0x2b7ae3=this[_0x4b7950(0xa7b)]();if(_0x2b7ae3)_0x2b7ae3['updateFlip']();},Game_Battler[_0x45d586(0x19f)][_0x45d586(0xb49)]=function(_0x170eee,_0x5868b2,_0x521991){const _0x508e43=_0x45d586;if(!$gameSystem[_0x508e43(0x138)]())return;const _0x911a8b=this[_0x508e43(0xa7b)]();if(!_0x911a8b)return;if(_0x170eee===_0x911a8b[_0x508e43(0x5bb)])return;let _0x5863cb=![];if(this['isActor']()){if(_0x170eee>_0x911a8b[_0x508e43(0x5bb)])_0x5863cb=!![];if(_0x170eee<_0x911a8b[_0x508e43(0x5bb)])_0x5863cb=![];}else{if(this['isEnemy']()){if(_0x170eee>_0x911a8b[_0x508e43(0x5bb)])_0x5863cb=![];if(_0x170eee<_0x911a8b['_baseX'])_0x5863cb=!![];}};this[_0x508e43(0x3f8)](_0x521991?!_0x5863cb:_0x5863cb),_0x911a8b[_0x508e43(0x40e)]();},Game_Battler['prototype']['moveBattlerDistance']=function(_0x23c342,_0x41c777,_0x305859,_0x4d61c0,_0x597471){const _0x779d43=_0x45d586;if(!$gameSystem[_0x779d43(0x138)]())return;const _0x4dc127=this['battler']();if(!_0x4dc127)return;if(_0x4d61c0)this['setBattlerFacePoint'](_0x23c342+_0x4dc127['_baseX'],_0x41c777+_0x4dc127[_0x779d43(0x83d)],![]);_0x23c342+=_0x4dc127[_0x779d43(0x5bb)]-_0x4dc127[_0x779d43(0x47c)],_0x41c777+=_0x4dc127[_0x779d43(0x83d)]-_0x4dc127[_0x779d43(0xac0)],_0x4dc127['startMove'](_0x23c342,_0x41c777,_0x305859);if(Imported[_0x779d43(0xbc5)])_0x4dc127[_0x779d43(0x594)](_0x597471||_0x779d43(0xa8e));},Game_Battler['prototype'][_0x45d586(0xb12)]=function(_0x58aa9c,_0x5938bd,_0x34640c,_0x3bd147,_0x3373f9,_0x1ede50){const _0x59a2ab=_0x45d586;if(!$gameSystem[_0x59a2ab(0x138)]())return;const _0x26b1e7=this[_0x59a2ab(0xa7b)]();if(!_0x26b1e7)return;if(_0x58aa9c===Infinity||_0x5938bd===Infinity)return;if(isNaN(_0x58aa9c)||isNaN(_0x5938bd))return;_0x1ede50=_0x1ede50||0x0;if(_0x1ede50>0x0){if(_0x26b1e7[_0x59a2ab(0x5bb)]>_0x58aa9c)_0x58aa9c+=_0x26b1e7[_0x59a2ab(0x7ea)]/0x2+_0x1ede50;if(_0x26b1e7[_0x59a2ab(0x5bb)]<_0x58aa9c)_0x58aa9c-=_0x26b1e7[_0x59a2ab(0x7ea)]/0x2+_0x1ede50;}if(_0x3bd147)this[_0x59a2ab(0xb49)](_0x58aa9c,_0x5938bd,![]);_0x58aa9c-=_0x26b1e7[_0x59a2ab(0x47c)],_0x5938bd-=_0x26b1e7[_0x59a2ab(0xac0)],_0x26b1e7['startMove'](_0x58aa9c,_0x5938bd,_0x34640c);if(Imported['VisuMZ_0_CoreEngine'])_0x26b1e7[_0x59a2ab(0x594)](_0x3373f9||'Linear');},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x639)]=function(_0x5e75b3,_0x36660b,_0x3ccc1e,_0x2e57ac,_0x41d2fe){const _0x15626b=_0x45d586;if(!$gameSystem[_0x15626b(0x138)]())return;const _0x1ea57a=this[_0x15626b(0xa7b)]();if(!_0x1ea57a)return;if(_0x2e57ac)this['setBattlerFacePoint'](_0x5e75b3+_0x1ea57a[_0x15626b(0x5bb)],_0x36660b+_0x1ea57a[_0x15626b(0x83d)],![]);_0x5e75b3+=_0x1ea57a['_homeX'],_0x36660b+=_0x1ea57a[_0x15626b(0xac0)],_0x1ea57a[_0x15626b(0x84a)](_0x5e75b3,_0x36660b,_0x3ccc1e,_0x41d2fe),this[_0x15626b(0x233)]=_0x5e75b3,this[_0x15626b(0x71c)]=_0x36660b;},Game_Battler[_0x45d586(0x19f)][_0x45d586(0xb0f)]=function(_0x2dfc9b,_0x4eadb4,_0x5d9f7f,_0x5ab3f1,_0x8863db,_0x4d065d){const _0x58f9f9=_0x45d586;if(!$gameSystem[_0x58f9f9(0x138)]())return;const _0x52bfe=this[_0x58f9f9(0xa7b)]();if(!_0x52bfe)return;_0x4d065d=_0x4d065d||0x0;if(_0x4d065d>0x0){if(_0x52bfe[_0x58f9f9(0x5bb)]>_0x2dfc9b)_0x2dfc9b+=_0x52bfe['width']/0x2+_0x4d065d;if(_0x52bfe[_0x58f9f9(0x5bb)]<_0x2dfc9b)_0x2dfc9b-=_0x52bfe[_0x58f9f9(0x7ea)]/0x2+_0x4d065d;}if(_0x5ab3f1)this['setBattlerFacePoint'](_0x2dfc9b,_0x4eadb4,![]);_0x52bfe[_0x58f9f9(0x84a)](_0x2dfc9b,_0x4eadb4,_0x5d9f7f,_0x8863db),this[_0x58f9f9(0x233)]=_0x2dfc9b,this[_0x58f9f9(0x71c)]=_0x4eadb4;},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x648)]=function(_0x4da74b,_0x5a6187,_0x2ff7b7){const _0x276531=_0x45d586;if(!$gameSystem[_0x276531(0x138)]())return;const _0x1d9ded=this[_0x276531(0xa7b)]();if(!_0x1d9ded)return;_0x1d9ded['startFloat'](_0x4da74b,_0x5a6187,_0x2ff7b7);},Game_Battler['prototype'][_0x45d586(0x5f1)]=function(_0x265b6b,_0x2a9981){const _0x46ed18=_0x45d586;if(!$gameSystem[_0x46ed18(0x138)]())return;const _0x12bf32=this[_0x46ed18(0xa7b)]();if(!_0x12bf32)return;_0x12bf32[_0x46ed18(0x434)](_0x265b6b,_0x2a9981);},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x658)]=function(_0x2e3690,_0x5b3b48,_0x2547f7,_0xaf243e){const _0x1c31e3=_0x45d586;if(!$gameSystem['isSideView']())return;const _0xa9e6b8=this[_0x1c31e3(0xa7b)]();if(!_0xa9e6b8)return;_0xa9e6b8[_0x1c31e3(0x384)](_0x2e3690,_0x5b3b48,_0x2547f7,_0xaf243e);},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x567)]=function(_0x24e029,_0x2555dc,_0x35b064,_0x2dc32d){const _0x4e1977=_0x45d586;if(!$gameSystem[_0x4e1977(0x138)]())return;const _0x7b5e07=this[_0x4e1977(0xa7b)]();if(!_0x7b5e07)return;this[_0x4e1977(0x7f0)]()&&(_0x24e029*=-0x1,_0x2555dc*=-0x1),_0x7b5e07[_0x4e1977(0xbe0)](_0x24e029,_0x2555dc,_0x35b064,_0x2dc32d);},Game_Battler['prototype'][_0x45d586(0x43a)]=function(_0x352788,_0x5602c6,_0x9ebf9e,_0x37bfe3){const _0x37b1af=_0x45d586;if(!$gameSystem[_0x37b1af(0x138)]())return;const _0xaae496=this[_0x37b1af(0xa7b)]();if(!_0xaae496)return;_0xaae496[_0x37b1af(0x406)](_0x352788,_0x5602c6,_0x9ebf9e,_0x37bfe3);},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x6a1)]=function(_0x272628,_0x571d8a,_0x1c91bf){const _0x1eccb1=_0x45d586;if(!$gameSystem[_0x1eccb1(0x138)]())return;const _0x30bb37=this['battler']();if(!_0x30bb37)return;_0x30bb37[_0x1eccb1(0xaeb)](_0x272628,_0x571d8a,_0x1c91bf);},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x288)]=function(){const _0x126170=_0x45d586,_0x53fde3=!!this[_0x126170(0x981)];this[_0x126170(0x981)]=undefined,_0x53fde3&&(this[_0x126170(0x58c)](),this['clearFreezeMotionForWeapons']());},Game_Battler['prototype'][_0x45d586(0x3b1)]=function(){const _0x4d3fc8=_0x45d586;if(!SceneManager['isSceneBattle']())return;const _0x34c72f=this['battler']();if(!_0x34c72f)return;let _0x5bd88e=this[_0x4d3fc8(0x7f0)]()?_0x34c72f[_0x4d3fc8(0x91c)]:_0x34c72f[_0x4d3fc8(0x82f)][_0x4d3fc8(0x91c)];_0x5bd88e&&_0x5bd88e['setup'](0x0);},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x651)]=function(_0x316f13,_0x34cb8,_0x488f4b){const _0x316087=_0x45d586;if(this['isEnemy']()&&!this[_0x316087(0x199)]())return;let _0x4f975e=0x0,_0x4ca20e=0x0;_0x316f13[_0x316087(0x95f)](/ATTACK[ ](\d+)/i)&&(_0x4ca20e=Number(RegExp['$1']),_0x4ca20e--);if(this[_0x316087(0x7f0)]()){const _0x5becf7=this['weapons']();_0x4f975e=_0x5becf7[_0x4ca20e]?_0x5becf7[_0x4ca20e]['wtypeId']:0x0;}else this[_0x316087(0x690)]()&&(_0x4f975e=this['svBattlerData']()[_0x316087(0xa4d)]||0x0);const _0x32b4c1=$dataSystem[_0x316087(0x18a)][_0x4f975e];_0x316f13[_0x316087(0x95f)](/attack/i)&&(_0x316f13=[_0x316087(0x849),_0x316087(0x470),_0x316087(0x46b)][_0x32b4c1['type']]||'swing'),this[_0x316087(0x981)]={'motionType':_0x316f13,'weaponImageId':_0x34cb8?_0x32b4c1[_0x316087(0x877)]:0x0,'pattern':_0x488f4b};},Game_Battler[_0x45d586(0x19f)]['isFriendly']=function(_0x3bf2c2){const _0x20def4=_0x45d586;if(!_0x3bf2c2)return![];return _0x3bf2c2[_0x20def4(0x904)]()===this[_0x20def4(0x904)]();},Game_Battler['prototype'][_0x45d586(0x638)]=function(_0x21ccff){const _0x16c3cf=_0x45d586;if(!_0x21ccff)return![];return _0x21ccff[_0x16c3cf(0x276)]()===this[_0x16c3cf(0x904)]();},Game_Battler[_0x45d586(0x19f)][_0x45d586(0xb4d)]=function(){return![];},Game_Actor[_0x45d586(0x19f)][_0x45d586(0xb4d)]=function(){const _0x304891=_0x45d586;return this[_0x304891(0x3ea)]()[_0x304891(0x95f)](/\$/i);},Game_Enemy['prototype'][_0x45d586(0xb4d)]=function(){const _0x159c5c=_0x45d586;return this['hasSvBattler']()&&this[_0x159c5c(0xb90)]()[_0x159c5c(0x95f)](/\$/i);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xf9)]=Game_Actor[_0x45d586(0x19f)][_0x45d586(0x846)],Game_Actor[_0x45d586(0x19f)][_0x45d586(0x846)]=function(_0x46398c){const _0x138df0=_0x45d586;VisuMZ[_0x138df0(0x6fe)][_0x138df0(0xf9)][_0x138df0(0x1b5)](this,_0x46398c),this[_0x138df0(0x4aa)]();},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x4aa)]=function(){const _0x36bfa3=_0x45d586;this[_0x36bfa3(0x114)]='',this[_0x36bfa3(0xb77)]()&&this[_0x36bfa3(0xb77)]()[_0x36bfa3(0x34a)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x6df)]=function(){const _0x5beec9=_0x45d586;if(this[_0x5beec9(0x8bf)]()!=='')return this[_0x5beec9(0x8bf)]();else{if(Imported[_0x5beec9(0x9cd)]&&this['getMenuImage']()!=='')return this[_0x5beec9(0x228)]();}return'';},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x8bf)]=function(){const _0xdbcf67=_0x45d586;if(this[_0xdbcf67(0x114)]===undefined)this[_0xdbcf67(0x4aa)]();return this[_0xdbcf67(0x114)];},Game_Actor['prototype'][_0x45d586(0xacb)]=function(_0x47ab97){const _0x35b66c=_0x45d586;if(this[_0x35b66c(0x114)]===undefined)this[_0x35b66c(0x4aa)]();this[_0x35b66c(0x114)]=_0x47ab97;if(SceneManager[_0x35b66c(0x81a)]()&&$gameParty[_0x35b66c(0xb5c)]()[_0x35b66c(0x840)](this)){const _0x30082c=SceneManager[_0x35b66c(0x4f4)][_0x35b66c(0x3c5)];_0x30082c&&_0x30082c['refreshActorPortrait'](this);}},Game_Actor[_0x45d586(0x19f)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x4cd)]=function(){const _0x3852d2=_0x45d586;if(!this[_0x3852d2(0xb4e)]()&&BattleManager[_0x3852d2(0xa4b)])return!![];return Game_Battler[_0x3852d2(0x19f)][_0x3852d2(0x4cd)][_0x3852d2(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xac6)]=Game_Actor[_0x45d586(0x19f)][_0x45d586(0x8ff)],Game_Actor[_0x45d586(0x19f)][_0x45d586(0x8ff)]=function(){const _0x2245c3=_0x45d586;if(BattleManager[_0x2245c3(0xa4b)]&&!ConfigManager['autoBattleUseSkills'])return this['makeActionListAutoAttack']();else{return VisuMZ[_0x2245c3(0x6fe)][_0x2245c3(0xac6)][_0x2245c3(0x1b5)](this);;}},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x32e)]=function(){const _0x1ea2c4=_0x45d586,_0x2c5587=[],_0x4c5dc7=new Game_Action(this);return _0x4c5dc7[_0x1ea2c4(0x473)](),_0x2c5587[_0x1ea2c4(0x119)](_0x4c5dc7),_0x2c5587;},Game_Actor[_0x45d586(0x19f)]['battleCommands']=function(){const _0xfbccb5=_0x45d586;return this[_0xfbccb5(0x4bd)]()[_0xfbccb5(0x34a)][_0xfbccb5(0x95f)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0xfbccb5(0xaea)](/[\r\n]+/):VisuMZ[_0xfbccb5(0x6fe)][_0xfbccb5(0xa41)][_0xfbccb5(0x1a0)][_0xfbccb5(0x84f)];},Game_Actor[_0x45d586(0x19f)]['svBattlerAnchorX']=function(){const _0x429a8e=_0x45d586;if(this[_0x429a8e(0x420)][_0x429a8e(0x808)]!==undefined)return this['_cache']['svAnchorX'];return this[_0x429a8e(0xb77)]()[_0x429a8e(0x34a)][_0x429a8e(0x95f)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x429a8e(0x420)]['svAnchorX']=eval(RegExp['$1']),this[_0x429a8e(0x420)][_0x429a8e(0x52a)]=eval(RegExp['$2'])):this[_0x429a8e(0x420)][_0x429a8e(0x808)]=Game_Battler[_0x429a8e(0x19f)][_0x429a8e(0x710)][_0x429a8e(0x1b5)](this),this[_0x429a8e(0x420)][_0x429a8e(0x808)];},Game_Actor['prototype']['svBattlerAnchorY']=function(){const _0x577468=_0x45d586;if(this[_0x577468(0x420)][_0x577468(0x52a)]!==undefined)return this['_cache'][_0x577468(0x52a)];return this['actor']()[_0x577468(0x34a)][_0x577468(0x95f)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x577468(0x420)][_0x577468(0x808)]=eval(RegExp['$1']),this[_0x577468(0x420)][_0x577468(0x52a)]=eval(RegExp['$2'])):this[_0x577468(0x420)][_0x577468(0x52a)]=Game_Battler[_0x577468(0x19f)][_0x577468(0x492)]['call'](this),this[_0x577468(0x420)][_0x577468(0x52a)];},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x11a)]=function(){const _0x9b4068=_0x45d586;if(this[_0x9b4068(0x420)]['svShadow']!==undefined)return this[_0x9b4068(0x420)][_0x9b4068(0x482)];if(this[_0x9b4068(0xb77)]()[_0x9b4068(0x34a)][_0x9b4068(0x95f)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x9b4068(0x420)][_0x9b4068(0x482)]=!![];else this['actor']()['note'][_0x9b4068(0x95f)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x9b4068(0x420)][_0x9b4068(0x482)]=![]:this[_0x9b4068(0x420)][_0x9b4068(0x482)]=Game_Battler[_0x9b4068(0x19f)][_0x9b4068(0x11a)][_0x9b4068(0x1b5)](this);return this[_0x9b4068(0x420)][_0x9b4068(0x482)];},Game_Actor['prototype'][_0x45d586(0xd2)]=function(){const _0x42c8f8=_0x45d586;return VisuMZ['BattleCore']['Settings'][_0x42c8f8(0x540)]['SmoothImage'];},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x256)]=function(){const _0x176ba3=_0x45d586,_0x50ca90=this[_0x176ba3(0x633)](),_0x2516d7=_0x50ca90[0x0]?_0x50ca90[0x0][_0x176ba3(0xa4d)]:0x0,_0x430f09=$dataSystem[_0x176ba3(0x18a)][_0x2516d7];_0x430f09&&this[_0x176ba3(0xbd2)](_0x430f09[_0x176ba3(0x877)]);},Game_Actor[_0x45d586(0x19f)][_0x45d586(0xa5e)]=function(_0x3bf06a){const _0x369cfd=_0x45d586;Game_Battler[_0x369cfd(0x19f)][_0x369cfd(0xa5e)]['call'](this,_0x3bf06a),this[_0x369cfd(0x6f0)](_0x3bf06a);},Game_Actor[_0x45d586(0x19f)]['getAttackMotion']=function(){const _0x10c7cd=_0x45d586,_0x525e4e=this[_0x10c7cd(0x633)](),_0x77d22b=_0x525e4e[0x0]?_0x525e4e[0x0][_0x10c7cd(0xa4d)]:0x0;return $dataSystem['attackMotions'][_0x77d22b];},Game_Actor[_0x45d586(0x19f)]['attackAnimationIdSlot']=function(_0x4c0c11){const _0x3f6be9=_0x45d586;_0x4c0c11=_0x4c0c11||0x1,_0x4c0c11--;const _0x327e13=this[_0x3f6be9(0x633)]();return _0x327e13[_0x4c0c11]?_0x327e13[_0x4c0c11]['animationId']:0x0;},Game_Actor['prototype'][_0x45d586(0xbbc)]=function(_0x585b55){const _0x142a1d=_0x45d586;_0x585b55=_0x585b55||0x1,_0x585b55--;const _0x444845=this[_0x142a1d(0x633)](),_0x729c83=_0x444845[_0x585b55]?_0x444845[_0x585b55][_0x142a1d(0xa4d)]:0x0;return $dataSystem['attackMotions'][_0x729c83];},Game_Actor[_0x45d586(0x19f)][_0x45d586(0xb2f)]=function(_0x4939a1){const _0x1a4bd8=_0x45d586;_0x4939a1=_0x4939a1||0x1,_0x4939a1--;const _0x4ccaee=this[_0x1a4bd8(0x633)](),_0x4aef5f=_0x4ccaee[_0x4939a1]?_0x4ccaee[_0x4939a1]['wtypeId']:0x0,_0x3b924e=$dataSystem[_0x1a4bd8(0x18a)][_0x4aef5f];if(_0x3b924e){if(_0x3b924e[_0x1a4bd8(0x267)]===0x0)this['requestMotion'](_0x1a4bd8(0x849));else{if(_0x3b924e[_0x1a4bd8(0x267)]===0x1)this[_0x1a4bd8(0x135)]('swing');else _0x3b924e[_0x1a4bd8(0x267)]===0x2&&this['requestMotion'](_0x1a4bd8(0x46b));}this[_0x1a4bd8(0xbd2)](_0x3b924e[_0x1a4bd8(0x877)]);}},Game_Battler[_0x45d586(0x19f)][_0x45d586(0xa9a)]=function(_0x3f990f){const _0x389a82=_0x45d586;if(this['isActor']()){const _0x292196=this[_0x389a82(0x633)]();if(_0x292196[_0x389a82(0x1c9)]>0x0){const _0x3aefb6=_0x292196[_0x3f990f];if(_0x3aefb6)_0x3f990f=this['equips']()[_0x389a82(0xa63)](_0x3aefb6);}}this[_0x389a82(0x845)]=_0x3f990f||0x0,this[_0x389a82(0x420)]={};},Game_Battler['prototype']['nextActiveWeaponSlot']=function(){const _0x42e412=_0x45d586;this[_0x42e412(0x845)]=this[_0x42e412(0x845)]||0x0,this[_0x42e412(0x845)]++,this['_cache']={};},Game_Battler[_0x45d586(0x19f)][_0x45d586(0x140)]=function(){const _0x3f8016=_0x45d586;this[_0x3f8016(0x845)]=undefined,this[_0x3f8016(0x420)]={};},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x207)]=Game_Actor['prototype'][_0x45d586(0x54a)],Game_Actor[_0x45d586(0x19f)][_0x45d586(0x54a)]=function(){const _0x1d60c2=_0x45d586;let _0x1847ad=VisuMZ['BattleCore'][_0x1d60c2(0x207)]['call'](this);if(this[_0x1d60c2(0x8db)])return _0x1847ad;if(this[_0x1d60c2(0x845)]!==undefined){this['_tempEquipCheck']=!![];const _0x4e0455=this[_0x1d60c2(0x1e1)]();for(let _0x5c4b2c=0x0;_0x5c4b2c<_0x4e0455[_0x1d60c2(0x1c9)];_0x5c4b2c++){_0x4e0455[_0x5c4b2c]===0x1&&this[_0x1d60c2(0x845)]!==_0x5c4b2c&&(_0x1847ad[_0x5c4b2c]=null);}this[_0x1d60c2(0x8db)]=undefined;}return _0x1847ad;},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x7fa)]=function(_0x278e7f){const _0x20a5bc=_0x45d586;return _0x278e7f['isActor']()?_0x278e7f[_0x20a5bc(0x633)]()[_0x20a5bc(0x1c9)]||0x1:0x1;},Window_BattleLog['prototype']['setActiveWeaponSet']=function(_0x346817,_0x5cc1ed){const _0x470202=_0x45d586;_0x346817&&_0x346817['isActor']()&&_0x346817[_0x470202(0xa9a)](_0x5cc1ed),this['callNextMethod']();},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x6db)]=function(_0xbd8fdb){const _0x51886f=_0x45d586;_0xbd8fdb&&_0xbd8fdb[_0x51886f(0x7f0)]()&&_0xbd8fdb['clearActiveWeaponSlot'](),this['callNextMethod']();},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x42d)]=function(){const _0x97bcd4=_0x45d586;let _0x1432bb='battleUIOffsetX';if(this[_0x97bcd4(0xaec)](_0x1432bb))return this['_cache'][_0x1432bb];return this[_0x97bcd4(0x420)][_0x1432bb]=this['createBattleUIOffsetX'](this[_0x97bcd4(0xb77)]()),this[_0x97bcd4(0x420)][_0x1432bb];},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x436)]=function(){const _0x587819=_0x45d586;let _0x57154e='battleUIOffsetY';if(this[_0x587819(0xaec)](_0x57154e))return this[_0x587819(0x420)][_0x57154e];return this[_0x587819(0x420)][_0x57154e]=this[_0x587819(0x301)](this[_0x587819(0xb77)]()),this[_0x587819(0x420)][_0x57154e];},VisuMZ[_0x45d586(0x6fe)]['Game_Enemy_setup']=Game_Enemy[_0x45d586(0x19f)]['setup'],Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x846)]=function(_0x5932ab,_0x48e446,_0x19eaa7){const _0x5642b3=_0x45d586;_0x5932ab=DataManager[_0x5642b3(0x1d6)](_0x5932ab),VisuMZ[_0x5642b3(0x6fe)][_0x5642b3(0x3f2)][_0x5642b3(0x1b5)](this,_0x5932ab,_0x48e446,_0x19eaa7),Imported[_0x5642b3(0x9f9)]&&this[_0x5642b3(0x9b4)](),this[_0x5642b3(0x24f)](),this[_0x5642b3(0xb70)](),this[_0x5642b3(0x426)](),Imported[_0x5642b3(0x9f9)]&&this[_0x5642b3(0x697)]();},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x24f)]=function(){const _0x553127=_0x45d586,_0x32dde9=VisuMZ[_0x553127(0x6fe)][_0x553127(0xa41)][_0x553127(0x401)];this[_0x553127(0x28f)]=_0x32dde9[_0x553127(0x130)],this[_0x553127(0x871)]={},this[_0x553127(0xb84)]();},Game_Enemy[_0x45d586(0x19f)]['setupBattleCoreData']=function(){const _0x4ce7f1=_0x45d586,_0x46270d=VisuMZ['BattleCore'][_0x4ce7f1(0xa41)]['Enemy'],_0x5d804c=this[_0x4ce7f1(0x6bc)]()[_0x4ce7f1(0x34a)];this['_svBattlerData']={'name':'','wtypeId':_0x46270d[_0x4ce7f1(0x3cb)],'collapse':_0x46270d[_0x4ce7f1(0x88a)],'motionIdle':_0x46270d[_0x4ce7f1(0xa6a)],'width':_0x46270d[_0x4ce7f1(0x703)]||0x40,'height':_0x46270d['Height']||0x40,'anchorX':_0x46270d['AnchorX']||0x0,'anchorY':_0x46270d[_0x4ce7f1(0x677)]||0x0,'shadow':_0x46270d[_0x4ce7f1(0x20b)]};_0x5d804c['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x4ce7f1(0x28f)]=Number(RegExp['$1']));const _0x491f50=this[_0x4ce7f1(0x871)];if(_0x5d804c[_0x4ce7f1(0x95f)](/<SIDEVIEW BATTLER: (.*)>/i))_0x491f50[_0x4ce7f1(0x5c2)]=String(RegExp['$1']);else{if(_0x5d804c[_0x4ce7f1(0x95f)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x3a76b2=String(RegExp['$1'])[_0x4ce7f1(0xaea)](/[\r\n]+/)[_0x4ce7f1(0x4e7)]('');_0x491f50[_0x4ce7f1(0x5c2)]=DataManager[_0x4ce7f1(0xa3d)](_0x3a76b2);}}_0x5d804c[_0x4ce7f1(0x95f)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x491f50[_0x4ce7f1(0xa82)]=eval(RegExp['$1']),_0x491f50[_0x4ce7f1(0x603)]=eval(RegExp['$2']));if(_0x5d804c[_0x4ce7f1(0x95f)](/<SIDEVIEW COLLAPSE>/i))_0x491f50['collapse']=!![];else _0x5d804c[_0x4ce7f1(0x95f)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x491f50[_0x4ce7f1(0x4ab)]=![]);if(_0x5d804c[_0x4ce7f1(0x95f)](/<SIDEVIEW SHOW SHADOW>/i))_0x491f50[_0x4ce7f1(0x5df)]=!![];else _0x5d804c['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x491f50[_0x4ce7f1(0x5df)]=![]);if(_0x5d804c[_0x4ce7f1(0x95f)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x491f50[_0x4ce7f1(0x6d6)]=String(RegExp['$1'])['toLowerCase']()['trim']();else{if(_0x5d804c['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x2da08c=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x4ce7f1(0x4e7)]('');_0x491f50[_0x4ce7f1(0x6d6)]=DataManager[_0x4ce7f1(0xa3d)](_0x2da08c);}}_0x5d804c['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x491f50[_0x4ce7f1(0x7ea)]=Number(RegExp['$1']),_0x491f50[_0x4ce7f1(0x6ac)]=Number(RegExp['$2']));if(_0x5d804c[_0x4ce7f1(0x95f)](/<SIDEVIEW WEAPON: (.*)>/i))_0x491f50[_0x4ce7f1(0xa4d)]=DataManager[_0x4ce7f1(0xadf)](RegExp['$1']);else{if(_0x5d804c[_0x4ce7f1(0x95f)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x5a990b=String(RegExp['$1'])[_0x4ce7f1(0xaea)](/[\r\n]+/)['remove'](''),_0x24f112=DataManager['processRandomizedData'](_0x5a990b);_0x491f50[_0x4ce7f1(0xa4d)]=DataManager[_0x4ce7f1(0xadf)](_0x24f112);}}if(Imported[_0x4ce7f1(0x9f9)]){const _0x216298=this[_0x4ce7f1(0x299)]();for(const _0x322066 of _0x216298){const _0x23c51e=this[_0x4ce7f1(0x681)](_0x322066)[_0x4ce7f1(0x519)][_0x4ce7f1(0x689)]()['trim'](),_0x596720=_0x322066[_0x4ce7f1(0x689)]()[_0x4ce7f1(0x379)]();if(_0x5d804c[_0x4ce7f1(0x95f)](VisuMZ[_0x4ce7f1(0x954)][_0x4ce7f1(0xa98)][_0x4ce7f1(0xb06)['format'](_0x596720,_0x23c51e)]))_0x491f50['name']=String(RegExp['$1']);else{if(_0x5d804c[_0x4ce7f1(0x95f)](VisuMZ['ElementStatusCore'][_0x4ce7f1(0xa98)][_0x4ce7f1(0xb95)[_0x4ce7f1(0x534)](_0x596720,_0x23c51e)])){const _0x282115=String(RegExp['$1'])[_0x4ce7f1(0xaea)](/[\r\n]+/)[_0x4ce7f1(0x4e7)]('');_0x491f50[_0x4ce7f1(0x5c2)]=DataManager[_0x4ce7f1(0xa3d)](_0x282115);}}if(_0x5d804c[_0x4ce7f1(0x95f)](VisuMZ[_0x4ce7f1(0x954)][_0x4ce7f1(0xa98)]['SvWeaponSolo-%1-%2'[_0x4ce7f1(0x534)](_0x596720,_0x23c51e)]))_0x491f50[_0x4ce7f1(0xa4d)]=DataManager[_0x4ce7f1(0xadf)](RegExp['$1']);else{if(_0x5d804c[_0x4ce7f1(0x95f)](VisuMZ[_0x4ce7f1(0x954)][_0x4ce7f1(0xa98)]['SvWeaponMass-%1-%2'[_0x4ce7f1(0x534)](_0x596720,_0x23c51e)])){const _0x420fc6=String(RegExp['$1'])[_0x4ce7f1(0xaea)](/[\r\n]+/)[_0x4ce7f1(0x4e7)](''),_0x43ce24=DataManager['processRandomizedData'](_0x420fc6);_0x491f50[_0x4ce7f1(0xa4d)]=DataManager[_0x4ce7f1(0xadf)](_0x43ce24);}}if(_0x5d804c['match'](VisuMZ[_0x4ce7f1(0x954)][_0x4ce7f1(0xa98)][_0x4ce7f1(0x1dc)['format'](_0x596720,_0x23c51e)]))_0x491f50[_0x4ce7f1(0x6d6)]=String(RegExp['$1'])['toLowerCase']()[_0x4ce7f1(0x379)]();else{if(_0x5d804c[_0x4ce7f1(0x95f)](VisuMZ['ElementStatusCore'][_0x4ce7f1(0xa98)]['SvMotionIdleMass-%1-%2'[_0x4ce7f1(0x534)](_0x596720,_0x23c51e)])){const _0x12e2f9=String(RegExp['$1'])[_0x4ce7f1(0xaea)](/[\r\n]+/)[_0x4ce7f1(0x4e7)]('');_0x491f50[_0x4ce7f1(0x6d6)]=DataManager[_0x4ce7f1(0xa3d)](_0x12e2f9);}}}}},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x746)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x360)]=function(){const _0x30fb7c=_0x45d586;return this[_0x30fb7c(0x746)]();},Game_Enemy[_0x45d586(0x19f)]['attackAnimationIdSlot']=function(_0x1eb110){const _0x187c11=_0x45d586;return this[_0x187c11(0x746)]();},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0xa48)]=function(){const _0x527fcc=_0x45d586;if(this[_0x527fcc(0x6bc)]()[_0x527fcc(0x34a)][_0x527fcc(0x95f)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x527fcc(0x19f)][_0x527fcc(0xa48)][_0x527fcc(0x1b5)](this);},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x8c7)]=function(){const _0x59197b=_0x45d586;if(this[_0x59197b(0x6bc)]()[_0x59197b(0x34a)][_0x59197b(0x95f)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x45d586(0x19f)]['skills']=function(){const _0x3a30cc=_0x45d586,_0x174e14=[];for(const _0x6a6b0f of this[_0x3a30cc(0x6bc)]()[_0x3a30cc(0x920)]){const _0x2238bc=$dataSkills[_0x6a6b0f[_0x3a30cc(0x3dd)]];if(_0x2238bc&&!_0x174e14[_0x3a30cc(0x840)](_0x2238bc))_0x174e14['push'](_0x2238bc);}return _0x174e14;},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x42d)]=function(){const _0x4eeddf=_0x45d586;let _0x44a935=_0x4eeddf(0x42d);if(this[_0x4eeddf(0xaec)](_0x44a935))return this[_0x4eeddf(0x420)][_0x44a935];return this[_0x4eeddf(0x420)][_0x44a935]=this[_0x4eeddf(0x4fb)](this[_0x4eeddf(0x6bc)]()),this[_0x4eeddf(0x420)][_0x44a935];},Game_Enemy['prototype'][_0x45d586(0x436)]=function(){const _0x3e5665=_0x45d586;let _0x39fa03=_0x3e5665(0x436);if(this[_0x3e5665(0xaec)](_0x39fa03))return this[_0x3e5665(0x420)][_0x39fa03];return this['_cache'][_0x39fa03]=this[_0x3e5665(0x301)](this[_0x3e5665(0x6bc)]()),this[_0x3e5665(0x420)][_0x39fa03];},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x7a2)]=function(){const _0x1bc13c=_0x45d586;if(this[_0x1bc13c(0x871)]!==undefined)return this[_0x1bc13c(0x871)];return this[_0x1bc13c(0xb70)](),this[_0x1bc13c(0x871)];},Game_Enemy['prototype'][_0x45d586(0x199)]=function(){const _0x325b93=_0x45d586;return this[_0x325b93(0x7a2)]()[_0x325b93(0x5c2)]!=='';},Game_Enemy[_0x45d586(0x19f)]['svBattlerName']=function(){const _0x1e87c3=_0x45d586;return this[_0x1e87c3(0x7a2)]()[_0x1e87c3(0x5c2)];},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0xd2)]=function(){const _0x45e95b=_0x45d586;return this[_0x45e95b(0x199)]()?VisuMZ[_0x45e95b(0x6fe)][_0x45e95b(0xa41)]['Actor']['SmoothImage']:VisuMZ[_0x45e95b(0x6fe)][_0x45e95b(0xa41)]['Enemy'][_0x45e95b(0xa6b)];},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0xa5e)]=function(_0x452c5c){const _0xe6d634=_0x45d586;Game_Battler[_0xe6d634(0x19f)][_0xe6d634(0xa5e)][_0xe6d634(0x1b5)](this,_0x452c5c);if(this[_0xe6d634(0x199)]())this[_0xe6d634(0x6f0)](_0x452c5c);},Game_Enemy['prototype']['performAttack']=function(){const _0x18388d=_0x45d586,_0x3c494c=this[_0x18388d(0x7a2)]()[_0x18388d(0xa4d)]||0x0,_0x458d8e=$dataSystem['attackMotions'][_0x3c494c];if(_0x458d8e){if(_0x458d8e['type']===0x0)this[_0x18388d(0x135)](_0x18388d(0x849));else{if(_0x458d8e['type']===0x1)this['requestMotion']('swing');else _0x458d8e[_0x18388d(0x267)]===0x2&&this[_0x18388d(0x135)](_0x18388d(0x46b));}}},Game_Enemy[_0x45d586(0x19f)]['performWeaponAnimation']=function(){const _0x2fd635=_0x45d586,_0x5026d9=this['svBattlerData']()['wtypeId']||0x0,_0x45026d=$dataSystem[_0x2fd635(0x18a)][_0x5026d9];_0x45026d&&this[_0x2fd635(0xbd2)](_0x45026d[_0x2fd635(0x877)]);},Game_Enemy['prototype']['getAttackMotion']=function(){const _0x37bf90=_0x45d586,_0x5b2ae4=this['svBattlerData']()['wtypeId']||0x0;return $dataSystem[_0x37bf90(0x18a)][_0x5b2ae4];},Game_Enemy['prototype'][_0x45d586(0xbbc)]=function(_0xeb99cc){const _0x2fd4a1=_0x45d586;return this[_0x2fd4a1(0x786)]();},Game_Enemy[_0x45d586(0x19f)]['performDamage']=function(){const _0xab8210=_0x45d586;Game_Battler['prototype'][_0xab8210(0xa04)]['call'](this),this[_0xab8210(0x42f)]()&&this[_0xab8210(0x199)]()&&this[_0xab8210(0x135)](_0xab8210(0xb5d)),SoundManager[_0xab8210(0x587)]();},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x7ad)]=function(){const _0x2da69a=_0x45d586;Game_Battler[_0x2da69a(0x19f)]['performEvasion'][_0x2da69a(0x1b5)](this),this['requestMotion'](_0x2da69a(0xae2));},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x4f9)]=function(){const _0x4e89f0=_0x45d586;Game_Battler[_0x4e89f0(0x19f)][_0x4e89f0(0x4f9)]['call'](this),this[_0x4e89f0(0x135)](_0x4e89f0(0xae2));},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x409)]=function(){const _0xab90cd=_0x45d586;Game_Battler['prototype'][_0xab90cd(0x409)][_0xab90cd(0x1b5)](this),this['performAttack']();},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0xad2)]=function(){const _0x388e1e=_0x45d586;if(this[_0x388e1e(0x199)]()){if(this[_0x388e1e(0xb9f)]()>=0x1)return!![];return this[_0x388e1e(0x7a2)]()[_0x388e1e(0x4ab)];}else return!![];},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x710)]=function(){const _0x368ff8=_0x45d586;return this['svBattlerData']()[_0x368ff8(0xa82)];},Game_Enemy['prototype'][_0x45d586(0x492)]=function(){const _0x5f1eb2=_0x45d586;return this[_0x5f1eb2(0x7a2)]()[_0x5f1eb2(0x603)];},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x11a)]=function(){return this['svBattlerData']()['shadow'];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x2d9)]=Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x526)],Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x526)]=function(_0x4dc9dd){const _0x1aeab0=_0x45d586;VisuMZ[_0x1aeab0(0x6fe)][_0x1aeab0(0x2d9)][_0x1aeab0(0x1b5)](this,_0x4dc9dd),this[_0x1aeab0(0x24f)](),this['setupBattleCoreData']();const _0x5cbd23=this['battler']();_0x5cbd23&&(_0x5cbd23[_0x1aeab0(0x80f)]=undefined,_0x5cbd23[_0x1aeab0(0x63f)](this));},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0xb84)]=function(){const _0x2c39bd=_0x45d586,_0x49ac6d=VisuMZ[_0x2c39bd(0x6fe)][_0x2c39bd(0xa41)]['Enemy'];this[_0x2c39bd(0xacf)]=_0x49ac6d[_0x2c39bd(0x996)]??0x0;},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x80d)]=function(){const _0x22ac79=_0x45d586;return this[_0x22ac79(0xacf)]&&this[_0x22ac79(0xacf)]>0x0;},Game_Enemy['prototype']['updateNameTempVisibility']=function(){const _0x29620a=_0x45d586;this[_0x29620a(0xacf)]&&this[_0x29620a(0xacf)]>0x0&&this[_0x29620a(0xacf)]--;},Game_Enemy['prototype']['clearNameTempVisibility']=function(){const _0x489f39=_0x45d586;this[_0x489f39(0xacf)]=0x0;},Game_Enemy[_0x45d586(0x19f)]['setupBattleCoreAspects']=function(){const _0x45c190=_0x45d586;this[_0x45c190(0x765)]();const _0x46e179=this[_0x45c190(0x6bc)]()['note']||'';if(_0x46e179[_0x45c190(0x95f)](/<ASPECT NAME:[ ](.*)>/i)){const _0xc203bf=String(RegExp['$1']);this[_0x45c190(0x753)]()[_0x45c190(0x5c2)]=_0xc203bf[_0x45c190(0x534)](this[_0x45c190(0xa88)]());}_0x46e179[_0x45c190(0x95f)](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x45c190(0x753)]()['iconIndex']=Number(RegExp['$1'])),_0x46e179[_0x45c190(0x95f)](/<ASPECT COLOR:[ ](.*)>/i)&&(this['getAspectData']()[_0x45c190(0xa5c)]=String(RegExp['$1'])),_0x46e179[_0x45c190(0x95f)](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x45c190(0x753)]()[_0x45c190(0x30c)]=String(RegExp['$1']));},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x765)]=function(){const _0x4d946d=_0x45d586,_0x87cc54=VisuMZ['BattleCore'][_0x4d946d(0xa41)]['Enemy'][_0x4d946d(0x756)]??_0x4d946d(0x523);this[_0x4d946d(0x5f6)]={'name':_0x87cc54[_0x4d946d(0x534)](this[_0x4d946d(0xa88)]()),'iconIndex':VisuMZ[_0x4d946d(0x6fe)]['Settings'][_0x4d946d(0x401)][_0x4d946d(0x6a6)]??0x1a,'nameColor':VisuMZ['BattleCore']['Settings'][_0x4d946d(0x401)][_0x4d946d(0x6fd)]??'2','description':''};},Game_Enemy['prototype'][_0x45d586(0x753)]=function(){if(this['_aspectData']===undefined)this['setupBattleCoreAspects']();return this['_aspectData'];},Game_Enemy[_0x45d586(0x19f)]['hasAspectData']=function(){const _0x42beac=_0x45d586;return(this[_0x42beac(0x753)]()[_0x42beac(0x30c)]||'')[_0x42beac(0x1c9)]>0x0;},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x790)]=function(){const _0x3dec2d=_0x45d586;return VisuMZ[_0x3dec2d(0x6fe)]['Settings']['Damage']['PopupPosition'];},Game_Enemy[_0x45d586(0x19f)][_0x45d586(0x790)]=function(){const _0x2ceada=_0x45d586,_0x5dddea=this['enemy']()?this[_0x2ceada(0x6bc)]()[_0x2ceada(0x34a)]||'':'';if(_0x5dddea[_0x2ceada(0x95f)](/<POPUP POSITION: HEAD>/i))return'head';else{if(_0x5dddea[_0x2ceada(0x95f)](/<POPUP POSITION: CENTER>/i))return _0x2ceada(0x735);else{if(_0x5dddea[_0x2ceada(0x95f)](/<POPUP POSITION: BASE>/i))return _0x2ceada(0x3e7);}}return Game_BattlerBase[_0x2ceada(0x19f)]['damagePopupPosition'][_0x2ceada(0x1b5)](this);},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x608)]=function(){return 0x0;},Game_Enemy['prototype'][_0x45d586(0x608)]=function(){const _0x3625d0=_0x45d586,_0x427224=this[_0x3625d0(0x6bc)]()?this[_0x3625d0(0x6bc)]()['note']||'':'';if(_0x427224[_0x3625d0(0x95f)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x3625d0(0x19f)][_0x3625d0(0x608)][_0x3625d0(0x1b5)](this);},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x3ae)]=function(){return 0x0;},Game_Enemy['prototype'][_0x45d586(0x3ae)]=function(){const _0x4df8d5=_0x45d586,_0x47f49f=this[_0x4df8d5(0x6bc)]()?this[_0x4df8d5(0x6bc)]()['note']||'':'';if(_0x47f49f['match'](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype'][_0x4df8d5(0x3ae)]['call'](this);},Game_Unit[_0x45d586(0x19f)][_0x45d586(0x6f4)]=function(_0x264188){const _0x1ab9e8=_0x45d586;for(const _0xad9039 of this['members']()){if(_0xad9039)_0xad9039[_0x1ab9e8(0x6f4)](_0x264188);}},Game_Unit['prototype'][_0x45d586(0x6be)]=function(){const _0x249128=_0x45d586,_0x2b574a=this[_0x249128(0x60c)]();return _0x2b574a[Math['randomInt'](_0x2b574a[_0x249128(0x1c9)])];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xb93)]=Game_Party['prototype']['addActor'],Game_Party[_0x45d586(0x19f)][_0x45d586(0x3a6)]=function(_0x3309e6){const _0x4e6fe1=_0x45d586;VisuMZ['BattleCore'][_0x4e6fe1(0xb93)]['call'](this,_0x3309e6),BattleManager['refreshStatusWindow']();},VisuMZ['BattleCore'][_0x45d586(0x875)]=Game_Party['prototype']['removeActor'],Game_Party[_0x45d586(0x19f)][_0x45d586(0x16e)]=function(_0x5d40f3){const _0x2dd2f1=_0x45d586;VisuMZ[_0x2dd2f1(0x6fe)]['Game_Party_removeActor'][_0x2dd2f1(0x1b5)](this,_0x5d40f3),BattleManager['refreshStatusWindow']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x412)]=Game_Troop['prototype'][_0x45d586(0x846)],Game_Troop[_0x45d586(0x19f)]['setup']=function(_0x518945){const _0x39a141=_0x45d586;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x39a141(0x410)](_0x518945),VisuMZ[_0x39a141(0x6fe)]['Game_Troop_setup'][_0x39a141(0x1b5)](this,_0x518945),this[_0x39a141(0x728)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x15c)]=Game_Troop[_0x45d586(0x19f)][_0x45d586(0x1ff)],Game_Troop['prototype']['expTotal']=function(){const _0x19cd17=_0x45d586;let _0x41f1f5=VisuMZ[_0x19cd17(0x6fe)]['Game_Troop_expTotal']['call'](this);return this['expRate']&&(_0x41f1f5*=this[_0x19cd17(0x93e)]()),Math[_0x19cd17(0xb32)](_0x41f1f5);},Game_Troop[_0x45d586(0x19f)][_0x45d586(0x93e)]=function(){return 0x1;},Game_Troop['prototype'][_0x45d586(0x728)]=function(){const _0xe904ca=_0x45d586,_0x343964=DataManager[_0xe904ca(0x350)](this[_0xe904ca(0x225)]()['id']);if(_0x343964[_0xe904ca(0x95f)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x2c8f83=RegExp['$1'][_0xe904ca(0xaea)](',')['map'](_0x3bd94d=>Number(_0x3bd94d));this[_0xe904ca(0xf6)](),this[_0xe904ca(0x670)](_0x2c8f83);}},Game_Troop['prototype'][_0x45d586(0xf6)]=function(){const _0xfdece=_0x45d586;let _0x15167b=_0xfdece(0xb8e)+'\x0a';_0x15167b+=_0xfdece(0x650),Imported[_0xfdece(0x7c2)]&&(VisuMZ[_0xfdece(0x926)][_0xfdece(0x23e)]<1.11&&(alert(_0x15167b[_0xfdece(0x534)](_0xfdece(0x921))),SceneManager[_0xfdece(0x16f)]())),Imported['VisuMZ_2_BattleSystemCTB']&&(VisuMZ[_0xfdece(0xee)][_0xfdece(0x23e)]<1.19&&(alert(_0x15167b[_0xfdece(0x534)](_0xfdece(0x9d1))),SceneManager[_0xfdece(0x16f)]())),Imported[_0xfdece(0x988)]&&(VisuMZ[_0xfdece(0x397)][_0xfdece(0x23e)]<1.15&&(alert(_0x15167b[_0xfdece(0x534)](_0xfdece(0x5ba))),SceneManager[_0xfdece(0x16f)]()));},Game_Troop[_0x45d586(0x19f)][_0x45d586(0x670)]=function(_0x31f83d){const _0x282a1c=_0x45d586;this['_namesCount']={};for(const _0xd09a of this['members']()){if(!_0xd09a)continue;_0xd09a[_0x282a1c(0x780)]('');}for(const _0xc07515 of _0x31f83d){const _0x146c7d=$dataTroops[_0xc07515];if(_0x146c7d)this[_0x282a1c(0x83a)](_0x146c7d);}this[_0x282a1c(0x36b)]();},Game_Troop[_0x45d586(0x19f)][_0x45d586(0x83a)]=function(_0x8a47c0){const _0x3d6077=_0x45d586;for(const _0x4b1c3f of _0x8a47c0[_0x3d6077(0xad5)]){if($dataEnemies[_0x4b1c3f[_0x3d6077(0x4a5)]]){const _0x3ae327=_0x4b1c3f[_0x3d6077(0x4a5)],_0x403ccf=_0x4b1c3f['x'],_0x4dc802=_0x4b1c3f['y'],_0x2b82e2=new Game_Enemy(_0x3ae327,_0x403ccf,_0x4dc802);_0x4b1c3f[_0x3d6077(0x94c)]&&_0x2b82e2['hide'](),this['_enemies'][_0x3d6077(0x119)](_0x2b82e2);}}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x641)]=Game_Map[_0x45d586(0x19f)][_0x45d586(0xa0f)],Game_Map[_0x45d586(0x19f)][_0x45d586(0xa0f)]=function(){const _0x3b4ff2=_0x45d586;VisuMZ[_0x3b4ff2(0x6fe)][_0x3b4ff2(0x641)][_0x3b4ff2(0x1b5)](this),this[_0x3b4ff2(0xa61)]();},Game_Map['prototype'][_0x45d586(0xa61)]=function(){const _0x4f1dc5=_0x45d586;this[_0x4f1dc5(0x268)]={},this[_0x4f1dc5(0x3b9)]={};if(!$dataMap)return;const _0x4fefa0=$dataMap[_0x4f1dc5(0x34a)];if(!_0x4fefa0)return;const _0x4d388c=_0x4fefa0['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x4d388c)for(const _0x39a3a2 of _0x4d388c){_0x39a3a2[_0x4f1dc5(0x95f)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0xf44eff=Number(RegExp['$1']),_0x5e90e2=Number(RegExp['$2']),_0x3edae4=_0x5e90e2===0x1?this[_0x4f1dc5(0x268)]:this[_0x4f1dc5(0x3b9)],_0x3bb0ed=String(RegExp['$3']);_0x3edae4[_0xf44eff]=_0x3bb0ed;}},VisuMZ[_0x45d586(0x6fe)]['Game_Map_battleback1Name']=Game_Map[_0x45d586(0x19f)][_0x45d586(0xace)],Game_Map[_0x45d586(0x19f)][_0x45d586(0xace)]=function(){const _0x11c189=_0x45d586;if(!BattleManager['isBattleTest']()){const _0x53caef=$gamePlayer[_0x11c189(0x112)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x11c189(0x268)][_0x53caef])return this['_regionBattleback1'][_0x53caef];}return VisuMZ[_0x11c189(0x6fe)][_0x11c189(0xa40)]['call'](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x8a2)]=Game_Map[_0x45d586(0x19f)][_0x45d586(0x66a)],Game_Map['prototype'][_0x45d586(0x66a)]=function(){const _0x5d6669=_0x45d586;if(!BattleManager[_0x5d6669(0xb40)]()){const _0x6d5944=$gamePlayer[_0x5d6669(0x112)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x5d6669(0x268)]&&this[_0x5d6669(0x3b9)][_0x6d5944])return this[_0x5d6669(0x3b9)][_0x6d5944];}return VisuMZ[_0x5d6669(0x6fe)][_0x5d6669(0x8a2)]['call'](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x63a)]=Game_Map[_0x45d586(0x19f)][_0x45d586(0xa70)],Game_Map[_0x45d586(0x19f)][_0x45d586(0xa70)]=function(){const _0x3f09ca=_0x45d586;let _0x3d6cac=JsonEx['makeDeepCopy'](VisuMZ[_0x3f09ca(0x6fe)][_0x3f09ca(0x63a)][_0x3f09ca(0x1b5)](this));return VisuMZ[_0x3f09ca(0x6fe)]['ShuffleArray'](_0x3d6cac);},VisuMZ[_0x45d586(0x6fe)]['ShuffleArray']=function(_0x33d808){const _0x21b64f=_0x45d586;var _0x80227c,_0x26cc2b,_0x605189;for(_0x605189=_0x33d808['length']-0x1;_0x605189>0x0;_0x605189--){_0x80227c=Math[_0x21b64f(0x85a)](Math[_0x21b64f(0x201)]()*(_0x605189+0x1)),_0x26cc2b=_0x33d808[_0x605189],_0x33d808[_0x605189]=_0x33d808[_0x80227c],_0x33d808[_0x80227c]=_0x26cc2b;}return _0x33d808;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x3e3)]=Game_Interpreter[_0x45d586(0x19f)][_0x45d586(0x47a)],Game_Interpreter[_0x45d586(0x19f)]['command357']=function(_0xaf4802){const _0x45e416=_0x45d586;return $gameTemp[_0x45e416(0x5c4)](this),VisuMZ[_0x45e416(0x6fe)][_0x45e416(0x3e3)]['call'](this,_0xaf4802);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x324)]=Game_Interpreter[_0x45d586(0x19f)][_0x45d586(0xbaf)],Game_Interpreter[_0x45d586(0x19f)][_0x45d586(0xbaf)]=function(){const _0x5e8542=_0x45d586;if(SceneManager['isSceneBattle']())switch(this[_0x5e8542(0x38a)]){case _0x5e8542(0xbf1):if(Imported[_0x5e8542(0x2ff)]){if($gameScreen[_0x5e8542(0x378)]()[_0x5e8542(0x31a)]>0x0)return!![];this['_waitMode']='';}break;case'battleAnimation':if(BattleManager[_0x5e8542(0x992)][_0x5e8542(0x719)]())return!![];this['_waitMode']='';break;case'battleBalloon':if(BattleManager[_0x5e8542(0x992)][_0x5e8542(0x853)]())return!![];this[_0x5e8542(0x38a)]='';break;case'battleCamera':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x5e8542(0x378)]()[_0x5e8542(0x7f1)]>0x0)return!![];if($gameScreen[_0x5e8542(0x378)]()[_0x5e8542(0x1a4)]>0x0)return!![];this[_0x5e8542(0x38a)]='';}break;case'battleEffect':if(BattleManager[_0x5e8542(0x992)][_0x5e8542(0x6d9)]())return!![];this[_0x5e8542(0x38a)]='';break;case _0x5e8542(0x9d4):if(BattleManager[_0x5e8542(0x992)][_0x5e8542(0x403)]())return!![];this[_0x5e8542(0x38a)]='';break;case _0x5e8542(0x278):if(BattleManager[_0x5e8542(0x992)][_0x5e8542(0x605)]())return!![];this['_waitMode']='';break;case'battlelog':if(BattleManager['_logWindow'][_0x5e8542(0x3d8)]())return!![];this[_0x5e8542(0x38a)]='';break;case _0x5e8542(0x365):if(BattleManager[_0x5e8542(0x992)][_0x5e8542(0xb76)]())return!![];this[_0x5e8542(0x38a)]='';break;case _0x5e8542(0xa58):if(BattleManager[_0x5e8542(0x992)]['isAnyoneChangingOpacity']())return!![];this[_0x5e8542(0x38a)]='';break;case'battleGrow':if(BattleManager[_0x5e8542(0x992)][_0x5e8542(0xa4a)]())return!![];this[_0x5e8542(0x38a)]='';break;case _0x5e8542(0x739):if(BattleManager['_spriteset']['isAnyoneSkewing']())return!![];this['_waitMode']='';break;case _0x5e8542(0x66e):if(Imported[_0x5e8542(0xbd7)]){if(BattleManager[_0x5e8542(0x992)][_0x5e8542(0xab6)]())return!![];this['_waitMode']='';}break;case _0x5e8542(0x1bc):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x5e8542(0x378)]()[_0x5e8542(0x598)]>0x0)return!![];this[_0x5e8542(0x38a)]='';}break;case _0x5e8542(0x687):if(BattleManager[_0x5e8542(0x992)][_0x5e8542(0x208)]())return!![];this['_waitMode']='';break;case _0x5e8542(0x48e):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x5e8542(0x378)]()[_0x5e8542(0x9b8)]>0x0)return!![];this[_0x5e8542(0x38a)]='';}break;case _0x5e8542(0x7d6):if(Imported[_0x5e8542(0x79a)]){if(BattleManager[_0x5e8542(0x992)]['isAnyoneInjectAniPrepping']){if(BattleManager['_spriteset'][_0x5e8542(0x192)]())return!![];this[_0x5e8542(0x38a)]=_0x5e8542(0x585);}else this[_0x5e8542(0x38a)]='';break;}break;case _0x5e8542(0x585):if(Imported[_0x5e8542(0x79a)]){if(BattleManager[_0x5e8542(0x992)][_0x5e8542(0x11e)]())return!![];this[_0x5e8542(0x38a)]='';}break;}return VisuMZ['BattleCore'][_0x5e8542(0x324)][_0x5e8542(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xb2c)]=Game_Interpreter['prototype']['command301'],Game_Interpreter[_0x45d586(0x19f)][_0x45d586(0x218)]=function(_0x315ee9){const _0x2dacf8=_0x45d586;return!$gameParty[_0x2dacf8(0x1d1)]()?this['command301_PreBattleEvent'](_0x315ee9):VisuMZ['BattleCore'][_0x2dacf8(0xb2c)][_0x2dacf8(0x1b5)](this,_0x315ee9);},Game_Interpreter[_0x45d586(0x19f)]['command3011']=function(_0x3c3a45){const _0x11f271=_0x45d586;return VisuMZ[_0x11f271(0x6fe)]['Game_Interpreter_command301'][_0x11f271(0x1b5)](this,_0x3c3a45),BattleManager[_0x11f271(0x675)](_0x45717c=>{const _0x95ebca=_0x11f271;this['_branch'][this[_0x95ebca(0xab4)]]=_0x45717c;}),!![];},VisuMZ[_0x45d586(0x6fe)]['CheckMapBattleEventValid']=function(_0x3cffd8){const _0x1f52e2=_0x45d586,_0x48f763=$dataCommonEvents[_0x3cffd8];if(!_0x48f763)return![];if(_0x48f763['list'][_0x1f52e2(0x1c9)]<=0x1)return![];return!![];},Game_Interpreter[_0x45d586(0x19f)]['command301_PreBattleEvent']=function(_0x1a6048){const _0x403359=_0x45d586,_0x3053f6=VisuMZ[_0x403359(0x6fe)][_0x403359(0xa41)]['Mechanics'],_0x1fd2a0=_0x3053f6[_0x403359(0x95e)],_0x2bd72d=$dataCommonEvents[_0x1fd2a0];if(_0x2bd72d&&VisuMZ[_0x403359(0x6fe)][_0x403359(0x508)](_0x1fd2a0)){const _0x3ce02c=this[_0x403359(0x5a6)]()?this[_0x403359(0xaee)]:0x0,_0x1c1a56=_0x2bd72d[_0x403359(0x505)];this[_0x403359(0x46d)](_0x1c1a56,_0x3ce02c),this[_0x403359(0x203)]=JsonEx['makeDeepCopy'](this['_list']);const _0x1f6cf2={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx[_0x403359(0x9cc)](_0x1a6048)};return this[_0x403359(0x203)][_0x403359(0x58b)](this['_index']+0x1,0x0,_0x1f6cf2),!![];}else return VisuMZ['BattleCore'][_0x403359(0xb2c)][_0x403359(0x1b5)](this,_0x1a6048);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x7bb)]=BattleManager[_0x45d586(0xb8b)],BattleManager[_0x45d586(0xb8b)]=function(){const _0x3f5fc8=_0x45d586;VisuMZ[_0x3f5fc8(0x6fe)]['BattleManager_onEncounter'][_0x3f5fc8(0x1b5)](this),this[_0x3f5fc8(0x882)]();},BattleManager['onEncounterBattleCore']=function(){const _0x1f4b92=_0x45d586,_0x1fdbd0=VisuMZ[_0x1f4b92(0x6fe)][_0x1f4b92(0xa41)][_0x1f4b92(0x4c4)],_0x4ae82c=_0x1fdbd0[_0x1f4b92(0x95e)];_0x4ae82c&&VisuMZ[_0x1f4b92(0x6fe)][_0x1f4b92(0x508)](_0x4ae82c)&&(this[_0x1f4b92(0x2aa)]=!![],$gameTemp[_0x1f4b92(0x485)](_0x1fdbd0[_0x1f4b92(0x95e)]),$gameMap[_0x1f4b92(0x4bc)](),$gameMap[_0x1f4b92(0xed)]['_preBattleCommonEvent']=!![]),_0x1fdbd0[_0x1f4b92(0xa67)]>0x0&&(this['_canLose']=!![]);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x105)]=Scene_Map[_0x45d586(0x19f)][_0x45d586(0x940)],Scene_Map[_0x45d586(0x19f)]['updateCallMenu']=function(){const _0x282447=_0x45d586;if(BattleManager[_0x282447(0x2aa)])return;VisuMZ[_0x282447(0x6fe)][_0x282447(0x105)][_0x282447(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x159)]=Scene_Map[_0x45d586(0x19f)][_0x45d586(0x429)],Scene_Map[_0x45d586(0x19f)][_0x45d586(0x429)]=function(){const _0x27e40d=_0x45d586;BattleManager[_0x27e40d(0x2aa)]?this['battleCorePreBattleCommonEvent']():VisuMZ[_0x27e40d(0x6fe)]['Scene_Map_launchBattle'][_0x27e40d(0x1b5)](this);},Scene_Map[_0x45d586(0x19f)][_0x45d586(0x7c6)]=function(){const _0x5c34fd=_0x45d586;this[_0x5c34fd(0x64a)]=!![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x7e9)]=SceneManager[_0x45d586(0x9cb)],SceneManager[_0x45d586(0x9cb)]=function(){const _0x564cf1=_0x45d586;if(BattleManager[_0x564cf1(0x2aa)])return![];return VisuMZ[_0x564cf1(0x6fe)][_0x564cf1(0x7e9)][_0x564cf1(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)]['Game_Interpreter_terminate']=Game_Interpreter[_0x45d586(0x19f)][_0x45d586(0x7e3)],Game_Interpreter[_0x45d586(0x19f)][_0x45d586(0x7e3)]=function(){const _0x183e05=_0x45d586;VisuMZ['BattleCore'][_0x183e05(0x2e0)]['call'](this),this[_0x183e05(0x79c)]&&(this[_0x183e05(0x79c)]=undefined,SceneManager[_0x183e05(0x4f4)]['battleCoreResumeLaunchBattle']());},Scene_Map['prototype'][_0x45d586(0x963)]=function(){const _0x2826e0=_0x45d586;BattleManager[_0x2826e0(0x2aa)]=undefined,BattleManager[_0x2826e0(0x881)]=!![],this[_0x2826e0(0x5dd)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x8d1)]=Scene_Map[_0x45d586(0x19f)][_0x45d586(0x6d1)],Scene_Map[_0x45d586(0x19f)]['initialize']=function(){const _0x24b746=_0x45d586;VisuMZ[_0x24b746(0x6fe)][_0x24b746(0x8d1)][_0x24b746(0x1b5)](this),BattleManager[_0x24b746(0x881)]&&(this['_active']=!![],BattleManager[_0x24b746(0x881)]=undefined);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x1e8)]=Scene_Map[_0x45d586(0x19f)]['initialize'],Scene_Map[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(){const _0x52f8f7=_0x45d586;VisuMZ[_0x52f8f7(0x6fe)]['Scene_Map_initialize'][_0x52f8f7(0x1b5)](this),$gameTemp[_0x52f8f7(0x2e4)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x3aa)]=Scene_ItemBase[_0x45d586(0x19f)]['applyItem'],Scene_ItemBase[_0x45d586(0x19f)][_0x45d586(0x417)]=function(){const _0x3b7fbe=_0x45d586;VisuMZ[_0x3b7fbe(0x6fe)][_0x3b7fbe(0x3aa)][_0x3b7fbe(0x1b5)](this);if(this[_0x3b7fbe(0xba9)]()[_0x3b7fbe(0x34a)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x3b7fbe(0xba9)]()[_0x3b7fbe(0x34a)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x3b7fbe(0x3b2)]=[]),DataManager[_0x3b7fbe(0x9f8)](this['item']())&&($gameTemp[_0x3b7fbe(0x3b2)]=[]);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xaef)]=Scene_Options[_0x45d586(0x19f)]['maxCommands'],Scene_Options[_0x45d586(0x19f)]['maxCommands']=function(){const _0x444b75=_0x45d586;let _0x308ec0=VisuMZ[_0x444b75(0x6fe)][_0x444b75(0xaef)][_0x444b75(0x1b5)](this);const _0x5d54ba=VisuMZ[_0x444b75(0x6fe)][_0x444b75(0xa41)];if(_0x5d54ba[_0x444b75(0x2cb)]['AddOption']&&_0x5d54ba[_0x444b75(0x2cb)][_0x444b75(0x8e2)])_0x308ec0+=0x2;if(_0x5d54ba[_0x444b75(0x518)][_0x444b75(0x166)]&&_0x5d54ba[_0x444b75(0x518)][_0x444b75(0x8e2)])_0x308ec0+=0x1;return _0x308ec0;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x404)]=Scene_Battle['prototype'][_0x45d586(0x6d1)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(){const _0x1750fc=_0x45d586;VisuMZ[_0x1750fc(0x6fe)][_0x1750fc(0x404)]['call'](this),this[_0x1750fc(0x1b8)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x8be)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x691)],Scene_Battle[_0x45d586(0x19f)]['start']=function(){const _0x31dbb7=_0x45d586;SceneManager[_0x31dbb7(0x55e)]()?(Scene_Message[_0x31dbb7(0x19f)]['start']['call'](this),this['_spriteset']&&this[_0x31dbb7(0x992)]['update'](),BattleManager[_0x31dbb7(0x59f)]&&BattleManager['revertTpbCachedActor']()):(VisuMZ[_0x31dbb7(0x6fe)]['Scene_Battle_start'][_0x31dbb7(0x1b5)](this),$gameTroop[_0x31dbb7(0x51e)]());},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x6c1)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x5dd)],Scene_Battle['prototype'][_0x45d586(0x5dd)]=function(){const _0x16a746=_0x45d586;SceneManager[_0x16a746(0x74a)]()?Scene_Message['prototype'][_0x16a746(0x5dd)]['call'](this):VisuMZ[_0x16a746(0x6fe)][_0x16a746(0x6c1)][_0x16a746(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x8d6)]=Scene_Battle['prototype'][_0x45d586(0x7e3)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x7e3)]=function(){const _0x174ce3=_0x45d586;SceneManager[_0x174ce3(0x74a)]()?Scene_Message[_0x174ce3(0x19f)][_0x174ce3(0x7e3)][_0x174ce3(0x1b5)](this):VisuMZ[_0x174ce3(0x6fe)][_0x174ce3(0x8d6)][_0x174ce3(0x1b5)](this),$gameTemp['clearBattleBalloons'](),this[_0x174ce3(0x1b8)]();},Scene_Battle[_0x45d586(0x19f)]['isRightInputMode']=function(){const _0x1d3579=_0x45d586;if(ConfigManager[_0x1d3579(0xac7)]&&ConfigManager[_0x1d3579(0x2d1)]!==undefined)return ConfigManager[_0x1d3579(0x2d1)];else{if(this['battleLayoutStyle']()===_0x1d3579(0x70e))return![];else{return Scene_Message[_0x1d3579(0x19f)][_0x1d3579(0xaa4)]['call'](this);;}}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x100)]=Scene_Battle['prototype'][_0x45d586(0x772)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x772)]=function(){const _0xa69be4=_0x45d586;VisuMZ[_0xa69be4(0x6fe)][_0xa69be4(0x100)]['call'](this),this[_0xa69be4(0x61d)]()===_0xa69be4(0x70e)&&this['repositionCancelButtonBorderStyle']();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x60d)]=function(_0x276f9d){const _0x57016f=_0x45d586;_0x276f9d?(this[_0x57016f(0x295)]['x']=(Graphics['width']-Graphics['boxWidth'])/0x2,this[_0x57016f(0x295)]['y']=(Graphics['height']-Graphics[_0x57016f(0x56c)])/0x2):(this[_0x57016f(0x295)]['x']=Graphics['width']*0xa,this[_0x57016f(0x295)]['y']=Graphics['height']*0xa);},VisuMZ['BattleCore']['Scene_Battle_selectNextCommand']=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xb88)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xb88)]=function(){const _0x2dab42=_0x45d586,_0x5c5882=BattleManager[_0x2dab42(0xb77)]();VisuMZ[_0x2dab42(0x6fe)][_0x2dab42(0xad4)]['call'](this);if(_0x5c5882){if(_0x5c5882===BattleManager[_0x2dab42(0xb77)]())return;if(_0x5c5882===BattleManager[_0x2dab42(0x1ce)])return;if(_0x5c5882[_0x2dab42(0xa7b)]())_0x5c5882[_0x2dab42(0xa7b)]()[_0x2dab42(0x27e)]();}},VisuMZ['BattleCore'][_0x45d586(0x68b)]=Scene_Battle[_0x45d586(0x19f)]['selectPreviousCommand'],Scene_Battle[_0x45d586(0x19f)]['selectPreviousCommand']=function(){const _0x2d64c7=_0x45d586,_0x4cb1b0=BattleManager[_0x2d64c7(0xb77)]();if(_0x4cb1b0&&_0x4cb1b0[_0x2d64c7(0xa7b)])_0x4cb1b0[_0x2d64c7(0xa7b)]()[_0x2d64c7(0x27e)]();VisuMZ['BattleCore'][_0x2d64c7(0x68b)][_0x2d64c7(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x151)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x821)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x821)]=function(){const _0x53a22b=_0x45d586;this[_0x53a22b(0x7b7)](),VisuMZ[_0x53a22b(0x6fe)][_0x53a22b(0x151)]['call'](this),this['createAutoBattleWindow']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x740)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x7ae)],Scene_Battle['prototype']['logWindowRect']=function(){const _0x3ea06b=_0x45d586;if(VisuMZ['BattleCore']['Settings'][_0x3ea06b(0x63e)]['BattleLogRectJS'])return VisuMZ[_0x3ea06b(0x6fe)][_0x3ea06b(0xa41)][_0x3ea06b(0x63e)][_0x3ea06b(0x627)][_0x3ea06b(0x1b5)](this);return VisuMZ['BattleCore'][_0x3ea06b(0x740)][_0x3ea06b(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xb04)]=Scene_Battle['prototype'][_0x45d586(0x92a)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x92a)]=function(){const _0x292cf7=_0x45d586;VisuMZ[_0x292cf7(0x6fe)][_0x292cf7(0xb04)][_0x292cf7(0x1b5)](this),this[_0x292cf7(0x44c)]();},Scene_Battle[_0x45d586(0x19f)]['createPartyCommandWindowBattleCore']=function(){const _0x42ca5c=_0x45d586,_0x50afe0=this['_partyCommandWindow'];_0x50afe0['setHandler'](_0x42ca5c(0xbdc),this[_0x42ca5c(0xafa)][_0x42ca5c(0x856)](this)),_0x50afe0[_0x42ca5c(0x612)](_0x42ca5c(0x78c),this[_0x42ca5c(0xb17)]['bind'](this));const _0x907c38=this[_0x42ca5c(0x61d)]();switch(_0x907c38){case'xp':case _0x42ca5c(0x376):return this[_0x42ca5c(0x5b6)][_0x42ca5c(0x250)](0x1);break;}},Scene_Battle['prototype'][_0x45d586(0xafa)]=function(){const _0x3500d2=_0x45d586;BattleManager[_0x3500d2(0xa4b)]=!![],$gameParty[_0x3500d2(0x1c7)](),this['selectNextCommand'](),BattleManager[_0x3500d2(0xad9)]()&&(BattleManager['_inputting']=![]);},Scene_Battle['prototype']['commandOptions']=function(){const _0x2c1489=_0x45d586;this['isQueueOptionsMenu']()?(this[_0x2c1489(0xa28)]=!![],this[_0x2c1489(0x936)][_0x2c1489(0x119)]('addText',VisuMZ[_0x2c1489(0x6fe)][_0x2c1489(0xa41)][_0x2c1489(0x6f3)][_0x2c1489(0xa6d)])):this[_0x2c1489(0xf5)]();},Scene_Battle['prototype'][_0x45d586(0x209)]=function(){const _0x2f9ded=_0x45d586;return BattleManager[_0x2f9ded(0x971)]();},Scene_Battle['prototype']['callOptions']=function(){const _0x53086f=_0x45d586;this['_callSceneOptions']=![],this[_0x53086f(0x992)][_0x53086f(0xae1)](),this['_windowLayer']['visible']=![];if(BattleManager[_0x53086f(0xb40)]())($dataSystem[_0x53086f(0xace)]||$dataSystem[_0x53086f(0x66a)])&&SceneManager[_0x53086f(0x47d)]();else($gameMap['battleback1Name']()||$gameMap[_0x53086f(0x66a)]())&&SceneManager[_0x53086f(0x47d)]();SceneManager[_0x53086f(0x119)](Scene_Options),BattleManager['isTpb']()&&(BattleManager[_0x53086f(0x59f)]=BattleManager['actor']());},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x678)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x5b1)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x5b1)]=function(){const _0x19a60b=_0x45d586;VisuMZ[_0x19a60b(0x6fe)][_0x19a60b(0x678)][_0x19a60b(0x1b5)](this);if(this['_callSceneOptions']&&!BattleManager['_subject'])this[_0x19a60b(0xf5)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x89f)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xae1)],Scene_Battle['prototype'][_0x45d586(0xae1)]=function(){const _0x45a505=_0x45d586;VisuMZ['BattleCore'][_0x45a505(0x89f)]['call'](this),this[_0x45a505(0x85e)]();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x464)]=function(){const _0x5a464b=_0x45d586,_0x27feba=this[_0x5a464b(0x14a)]();this[_0x5a464b(0x4b4)]=new Window_AutoBattleCancel(_0x27feba),this[_0x5a464b(0x4b4)][_0x5a464b(0xb6c)](),this['addChild'](this[_0x5a464b(0x4b4)]);},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x14a)]=function(){const _0x1cd8c9=_0x45d586;return VisuMZ[_0x1cd8c9(0x6fe)][_0x1cd8c9(0xa41)][_0x1cd8c9(0x2cb)][_0x1cd8c9(0xd1)]['call'](this);},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x1b8)]=function(){const _0x4389b7=_0x45d586;this[_0x4389b7(0xba2)]=[];},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x85e)]=function(){const _0x26097e=_0x45d586;if(!this[_0x26097e(0xba2)])return;for(const _0x47b8c2 of this[_0x26097e(0xba2)]){_0x47b8c2&&_0x47b8c2[_0x26097e(0xae1)]();}},Scene_Battle['prototype'][_0x45d586(0xbf5)]=function(_0x419f70){const _0x3ae72=_0x45d586,_0x4b240e=$dataCommonEvents[_0x419f70];if(!_0x4b240e)return;const _0x9cb4a9=new Game_BattleOnceParallelInterpreter();this[_0x3ae72(0x490)](_0x9cb4a9),_0x9cb4a9[_0x3ae72(0x4b1)](_0x419f70);},Scene_Battle['prototype'][_0x45d586(0x490)]=function(_0x55a317){const _0x41400b=_0x45d586;this[_0x41400b(0xba2)]=this[_0x41400b(0xba2)]||[],this['_onceParallelInterpreters'][_0x41400b(0x119)](_0x55a317);},Scene_Battle[_0x45d586(0x19f)]['removeOnceParallelInterpreter']=function(_0x3433e4){const _0x45354b=_0x45d586;this['_onceParallelInterpreters']=this[_0x45354b(0xba2)]||[],this[_0x45354b(0xba2)][_0x45354b(0x4e7)](_0x3433e4);},Game_Troop[_0x45d586(0x19f)][_0x45d586(0x51e)]=function(){const _0x5cdbf8=_0x45d586;for(const _0xd6f4f3 of this[_0x5cdbf8(0x225)]()['pages']){if(!this[_0x5cdbf8(0x943)](_0xd6f4f3))continue;SceneManager[_0x5cdbf8(0x4f4)][_0x5cdbf8(0x1a6)](_0xd6f4f3);}},Game_Troop[_0x45d586(0x19f)][_0x45d586(0x943)]=function(_0x13093a){const _0xd7b02f=_0x45d586;if(!_0x13093a)return;for(const _0x28d894 of _0x13093a[_0xd7b02f(0x505)]){if([0x6c,0x198][_0xd7b02f(0x840)](_0x28d894[_0xd7b02f(0xa27)])){const _0x3a4ed0=_0x28d894[_0xd7b02f(0x8e0)][0x0];if(_0x3a4ed0['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x1a6)]=function(_0xdb76f4){const _0xb8cfb3=_0x45d586;if(!_0xdb76f4)return;const _0x58102d=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x58102d),_0x58102d[_0xb8cfb3(0x55b)](_0xdb76f4);};function Game_BattleOnceParallelInterpreter(){const _0x3b5cc4=_0x45d586;this[_0x3b5cc4(0x6d1)](...arguments);}Game_BattleOnceParallelInterpreter[_0x45d586(0x19f)]=Object[_0x45d586(0x838)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter[_0x45d586(0x19f)][_0x45d586(0xb62)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x45d586(0x4b1)]=function(_0x57b005){const _0x5a9f74=_0x45d586,_0xd3a3d9=$dataCommonEvents[_0x57b005];_0xd3a3d9?this['setup'](_0xd3a3d9[_0x5a9f74(0x505)],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter[_0x45d586(0x19f)]['terminate']=function(){const _0x10361e=_0x45d586;if(!SceneManager['isSceneBattle']())return;SceneManager[_0x10361e(0x4f4)][_0x10361e(0xd3)](this),Game_Interpreter[_0x10361e(0x19f)][_0x10361e(0x7e3)][_0x10361e(0x1b5)](this);},Game_BattleOnceParallelInterpreter[_0x45d586(0x19f)][_0x45d586(0x55b)]=function(_0x144a6c){const _0x28455d=_0x45d586;_0x144a6c?this[_0x28455d(0x846)](_0x144a6c[_0x28455d(0x505)],0x0):this['terminate']();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x10b)]=function(){const _0x4fcbec=_0x45d586;return VisuMZ[_0x4fcbec(0x6fe)][_0x4fcbec(0xa41)]['PartyCmd']['DisablePartyCmd'];},VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x24e)],Scene_Battle[_0x45d586(0x19f)]['startPartyCommandSelection']=function(){const _0x143ece=_0x45d586;this[_0x143ece(0x10b)]()?this[_0x143ece(0xae6)]():VisuMZ[_0x143ece(0x6fe)][_0x143ece(0x980)]['call'](this);},Scene_Battle['prototype']['onDisabledPartyCommandSelection']=function(){const _0x59b821=_0x45d586;if(BattleManager[_0x59b821(0x4fe)]())this[_0x59b821(0xb88)]();else BattleManager['isTpb']()&&VisuMZ[_0x59b821(0x6fe)][_0x59b821(0x980)][_0x59b821(0x1b5)](this);},VisuMZ['BattleCore'][_0x45d586(0x54e)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x5eb)],Scene_Battle['prototype'][_0x45d586(0x5eb)]=function(){const _0x4f2543=_0x45d586;BattleManager[_0x4f2543(0xad9)]()?(this['tpbCommandFight'](),this['startActorCommandSelection']()):VisuMZ[_0x4f2543(0x6fe)]['Scene_Battle_commandFight']['call'](this);},Scene_Battle['prototype'][_0x45d586(0x8ec)]=function(){const _0x4009a5=_0x45d586;if(!VisuMZ[_0x4009a5(0x6fe)][_0x4009a5(0x7fc)])return;if(Imported[_0x4009a5(0x92b)]&&BattleManager[_0x4009a5(0x969)]())return;const _0x2936a7=$gameParty[_0x4009a5(0x60c)]()['filter'](_0x534a44=>_0x534a44[_0x4009a5(0xb28)]()&&_0x534a44[_0x4009a5(0xec)]());BattleManager[_0x4009a5(0x386)]=_0x2936a7[0x0]||null,BattleManager[_0x4009a5(0x386)]&&BattleManager['_currentActor'][_0x4009a5(0x4c2)]('inputting');},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x4a4)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x595)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x595)]=function(){const _0x2e9a24=_0x45d586;VisuMZ['BattleCore'][_0x2e9a24(0x4a4)][_0x2e9a24(0x1b5)](this);if(!BattleManager['isTpb']())BattleManager['_currentActor']=null;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x60e)]=Scene_Battle['prototype'][_0x45d586(0x14c)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x14c)]=function(){const _0x1d0ebe=_0x45d586;VisuMZ[_0x1d0ebe(0x6fe)][_0x1d0ebe(0x60e)][_0x1d0ebe(0x1b5)](this),this['createActorCommandWindowBattleCore']();},Scene_Battle['prototype']['createActorCommandWindowBattleCore']=function(){const _0x9f5dbf=_0x45d586,_0x3f373=this[_0x9f5dbf(0xb3a)];_0x3f373[_0x9f5dbf(0x612)](_0x9f5dbf(0x942),this[_0x9f5dbf(0x669)]['bind'](this)),_0x3f373[_0x9f5dbf(0x612)](_0x9f5dbf(0xbdc),this[_0x9f5dbf(0x68e)]['bind'](this)),_0x3f373['setHandler'](_0x9f5dbf(0xa1e),this[_0x9f5dbf(0x3bb)]['bind'](this)),BattleManager['isTpb']()&&(this[_0x9f5dbf(0x10b)]()?delete _0x3f373[_0x9f5dbf(0x120)]['cancel']:_0x3f373[_0x9f5dbf(0x612)](_0x9f5dbf(0x144),this[_0x9f5dbf(0xb6b)][_0x9f5dbf(0x856)](this)));},Scene_Battle['prototype'][_0x45d586(0x669)]=function(){this['commandEscape']();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x68e)]=function(){const _0x2e8648=_0x45d586;BattleManager[_0x2e8648(0xb77)]()[_0x2e8648(0x2f5)](),BattleManager[_0x2e8648(0x5a9)](),BattleManager[_0x2e8648(0x339)](),this[_0x2e8648(0x815)]();},Scene_Battle['prototype'][_0x45d586(0x3bb)]=function(){const _0x57e90c=_0x45d586,_0x3db320=BattleManager[_0x57e90c(0x517)](),_0x4aa256=this[_0x57e90c(0xb3a)][_0x57e90c(0x17f)]();_0x3db320[_0x57e90c(0x839)](_0x4aa256),BattleManager[_0x57e90c(0xb77)]()[_0x57e90c(0x4a6)]($dataSkills[_0x4aa256]),this[_0x57e90c(0x7f6)]();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xb6b)]=function(){const _0x416da0=_0x45d586;this[_0x416da0(0x14d)]()?this['performTpbActiveCheckSwitch']():this[_0x416da0(0x7a6)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x7fc)]=![],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x14d)]=function(){const _0x30f0ee=_0x45d586;if(Imported[_0x30f0ee(0x92b)]&&BattleManager[_0x30f0ee(0x969)]())return![];else{if(!VisuMZ['BattleCore'][_0x30f0ee(0x7fc)])return![];const _0x52ac5b=$gameParty[_0x30f0ee(0x60c)]()[_0x30f0ee(0x229)](_0x46a956=>_0x46a956[_0x30f0ee(0xb28)]()&&_0x46a956[_0x30f0ee(0xec)]());return _0x52ac5b[_0x30f0ee(0x1c9)]>0x0&&BattleManager[_0x30f0ee(0xb77)]()!==_0x52ac5b[_0x52ac5b[_0x30f0ee(0x1c9)]-0x1];}},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xef)]=function(){const _0x345a49=_0x45d586,_0xa19317=BattleManager[_0x345a49(0xb77)](),_0xd151e9=_0xa19317[_0x345a49(0xa7b)]();if(_0xd151e9)_0xd151e9[_0x345a49(0x27e)]();const _0x47edae=$gameParty[_0x345a49(0x60c)]()['filter'](_0x203bcb=>_0x203bcb[_0x345a49(0xb28)]()&&_0x203bcb[_0x345a49(0xec)]()),_0x20d0b2=_0x47edae['indexOf'](_0xa19317),_0x3d3621=_0x47edae[_0x20d0b2+0x1];BattleManager[_0x345a49(0x386)]=_0x3d3621||null;if(_0x3d3621)_0x3d3621[_0x345a49(0x4c2)](_0x345a49(0xfb));_0xa19317[_0x345a49(0x4c2)](_0x345a49(0x28a)),this['changeInputWindow']();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x7a6)]=function(){const _0x29e7d9=_0x45d586;this['_partyCommandWindow'][_0x29e7d9(0x846)](),this[_0x29e7d9(0xb3a)]['close']();if(!VisuMZ[_0x29e7d9(0x6fe)][_0x29e7d9(0x7fc)])return;if(Imported[_0x29e7d9(0x92b)]&&BattleManager[_0x29e7d9(0x969)]())return;if(BattleManager[_0x29e7d9(0x386)]){BattleManager[_0x29e7d9(0x386)][_0x29e7d9(0x4c2)](_0x29e7d9(0x28a));const _0x3fc0fe=BattleManager[_0x29e7d9(0x386)][_0x29e7d9(0xa7b)]();if(_0x3fc0fe)_0x3fc0fe[_0x29e7d9(0x27e)]();}BattleManager['_currentActor']=null;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x85d)]=Scene_Battle['prototype'][_0x45d586(0x128)],Scene_Battle[_0x45d586(0x19f)]['createHelpWindow']=function(){const _0x17f313=_0x45d586;VisuMZ[_0x17f313(0x6fe)]['Scene_Battle_createHelpWindow']['call'](this),this[_0x17f313(0x6f5)]();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x6f5)]=function(){const _0xc30ee4=_0x45d586;this[_0xc30ee4(0xb3a)][_0xc30ee4(0x4e3)](this['_helpWindow']),this[_0xc30ee4(0x5b6)][_0xc30ee4(0x4e3)](this[_0xc30ee4(0x8b3)]);},Scene_Battle['prototype'][_0x45d586(0x7b7)]=function(){const _0x237daf=_0x45d586;if(!VisuMZ[_0x237daf(0x6fe)]['Settings'][_0x237daf(0x401)][_0x237daf(0x975)])return;this[_0x237daf(0xbca)]=new Sprite(),this[_0x237daf(0xbca)]['x']=this['_windowLayer']['x'],this[_0x237daf(0xbca)]['y']=this[_0x237daf(0x295)]['y'];const _0x4f694a=this[_0x237daf(0x4bb)][_0x237daf(0xa63)](this[_0x237daf(0x295)]);this[_0x237daf(0x84b)](this[_0x237daf(0xbca)],_0x4f694a);for(let _0x38e810=0x0;_0x38e810<0x8;_0x38e810++){const _0x336a2c=new Window_EnemyName(_0x38e810);this[_0x237daf(0xbca)][_0x237daf(0x34e)](_0x336a2c);}},VisuMZ['BattleCore'][_0x45d586(0xbb4)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xa5a)],Scene_Battle[_0x45d586(0x19f)]['createEnemyWindow']=function(){const _0x1c09ea=_0x45d586;VisuMZ[_0x1c09ea(0x6fe)]['Scene_Battle_createEnemyWindow']['call'](this),this['createMultiTargetWindows']();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xa4f)]=function(){const _0x57c095=_0x45d586;this[_0x57c095(0x55d)](!![]),this['createMultiTargetWindow'](![]);},Scene_Battle['prototype'][_0x45d586(0x6e0)]=function(_0x2a58ec){const _0x4f7bd3=_0x45d586,_0x2c7005=Window_BattleMultiTarget[_0x4f7bd3(0x65e)],_0x88c391=this[_0x4f7bd3(0xb15)](0x1,!![]);let _0xa3d1bf=_0x2a58ec?Graphics[_0x4f7bd3(0x6ae)]-_0x2c7005:0x0;_0xa3d1bf+=_0x2a58ec?Window_BattleMultiTarget[_0x4f7bd3(0x9b6)]:Window_BattleMultiTarget[_0x4f7bd3(0x9fa)];const _0x3b3ca4=[_0x4f7bd3(0x8d3)][_0x4f7bd3(0x840)](this[_0x4f7bd3(0x61d)]())?0x0:this[_0x4f7bd3(0x3c5)][_0x4f7bd3(0x6ac)];let _0x1d5240=Graphics['boxHeight']-_0x3b3ca4-_0x88c391;return _0x1d5240+=_0x2a58ec?Window_BattleMultiTarget[_0x4f7bd3(0x87e)]:Window_BattleMultiTarget['ENEMY_OFFSET_Y'],new Rectangle(_0xa3d1bf,_0x1d5240,_0x2c7005,_0x88c391);},Scene_Battle['prototype'][_0x45d586(0x55d)]=function(_0x2ef277){const _0x42f11f=_0x45d586,_0xe67432=this[_0x42f11f(0x6e0)](_0x2ef277),_0xa55095=new Window_BattleMultiTarget(_0xe67432,_0x2ef277);this[_0x42f11f(0x886)](_0xa55095),_0x2ef277?this['_actorMultiTargetWindow']=_0xa55095:this[_0x42f11f(0x9e5)]=_0xa55095;},VisuMZ[_0x45d586(0x6fe)]['Scene_Battle_needsInputWindowChangeIBS']=Scene_Battle['prototype'][_0x45d586(0x8e3)],Scene_Battle['prototype'][_0x45d586(0x8e3)]=function(){const _0x2b47df=_0x45d586;if(this[_0x2b47df(0x7e7)])return![];return VisuMZ[_0x2b47df(0x6fe)][_0x2b47df(0x618)][_0x2b47df(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)]['Scene_Battle_updateCancelButton']=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x873)],Scene_Battle['prototype']['updateCancelButton']=function(){const _0x48a436=_0x45d586;if(this[_0x48a436(0x9f2)]&&this[_0x48a436(0x7e7)]){this['_cancelButton']['visible']=!![];return;}VisuMZ[_0x48a436(0x6fe)]['Scene_Battle_updateCancelButton'][_0x48a436(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)]['Scene_Battle_isTimeActiveIBS']=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x235)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x235)]=function(){const _0x3220f9=_0x45d586;if(this['_inBattleStatusMode'])return![];return VisuMZ[_0x3220f9(0x6fe)][_0x3220f9(0x37e)][_0x3220f9(0x1b5)](this);},VisuMZ['BattleCore'][_0x45d586(0x617)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x821)],Scene_Battle['prototype']['createAllWindows']=function(){const _0x5bccd8=_0x45d586;VisuMZ[_0x5bccd8(0x6fe)][_0x5bccd8(0x617)][_0x5bccd8(0x1b5)](this),this[_0x5bccd8(0x4db)]();},VisuMZ[_0x45d586(0x6fe)]['Scene_Battle_createPartyCommandWindowIBS']=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x92a)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x92a)]=function(){const _0x3076b9=_0x45d586;VisuMZ[_0x3076b9(0x6fe)][_0x3076b9(0xa78)][_0x3076b9(0x1b5)](this);const _0x1539e5=this[_0x3076b9(0x5b6)];_0x1539e5[_0x3076b9(0x612)](_0x3076b9(0xa91),this[_0x3076b9(0x362)][_0x3076b9(0x856)](this,_0x1539e5));},VisuMZ['BattleCore'][_0x45d586(0xbb5)]=Scene_Battle[_0x45d586(0x19f)]['createActorCommandWindow'],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x14c)]=function(){const _0x19c7fa=_0x45d586;VisuMZ[_0x19c7fa(0x6fe)]['Scene_Battle_createActorCommandWindowIBS'][_0x19c7fa(0x1b5)](this);const _0x5e45f3=this[_0x19c7fa(0xb3a)];_0x5e45f3[_0x19c7fa(0x612)](_0x19c7fa(0xa91),this[_0x19c7fa(0x362)][_0x19c7fa(0x856)](this,_0x5e45f3));},Scene_Battle[_0x45d586(0x19f)]['createInBattleStatusWindow']=function(){const _0x19624f=_0x45d586,_0x375b25=this[_0x19624f(0xf1)](),_0x2f8e2e=new Window_InBattleStatus(_0x375b25);this[_0x19624f(0x886)](_0x2f8e2e),_0x2f8e2e[_0x19624f(0xb6c)](),_0x2f8e2e[_0x19624f(0x56a)](),this[_0x19624f(0x7b5)]=_0x2f8e2e;},Scene_Battle['prototype'][_0x45d586(0xf1)]=function(){const _0x2ca365=_0x45d586;if(VisuMZ['BattleCore'][_0x2ca365(0xa41)]['InBattleStatus'][_0x2ca365(0xb50)])return VisuMZ['BattleCore'][_0x2ca365(0xa41)]['InBattleStatus'][_0x2ca365(0xb50)][_0x2ca365(0x1b5)](this);const _0x202cf9=Graphics[_0x2ca365(0x6ae)]>0x3e8?0x78:0x0,_0x6296c9=this[_0x2ca365(0x8b3)]['y']+this[_0x2ca365(0x8b3)][_0x2ca365(0x6ac)],_0xb7216f=Graphics[_0x2ca365(0x6ae)]-_0x202cf9*0x2,_0x38f137=Graphics[_0x2ca365(0x56c)]-_0x6296c9-this[_0x2ca365(0x5c0)]();return new Rectangle(_0x202cf9,_0x6296c9,_0xb7216f,_0x38f137);},Scene_Battle['prototype'][_0x45d586(0x362)]=function(_0x18d9ac){const _0x16f32c=_0x45d586;this[_0x16f32c(0x886)](this[_0x16f32c(0x7b5)]),this['_inBattleStatusMode']=!![],this[_0x16f32c(0x8b3)][_0x16f32c(0xa0a)]();const _0xf442a8=['xp','portrait','border',_0x16f32c(0x5d5),_0x16f32c(0x8d3)];let _0x2c99dd=_0xf442a8[_0x16f32c(0x840)](this[_0x16f32c(0x61d)]());_0x2c99dd&&(_0x18d9ac[_0x16f32c(0xb6c)](),_0x18d9ac['close']()),this[_0x16f32c(0x7b5)][_0x16f32c(0x63f)](BattleManager[_0x16f32c(0xb77)]()||$gameParty[_0x16f32c(0xb5c)]()[0x0]),this[_0x16f32c(0x7b5)][_0x16f32c(0x3c9)](_0x18d9ac),this[_0x16f32c(0x7b5)][_0x16f32c(0xa0a)](),this[_0x16f32c(0x7b5)][_0x16f32c(0x997)]();},Scene_Battle['prototype']['endInBattleStatus']=function(){const _0x1576fb=_0x45d586;this[_0x1576fb(0x7e7)]=![],this[_0x1576fb(0x8b3)][_0x1576fb(0xb6c)]();const _0x17f2a6=this[_0x1576fb(0x7b5)]['getReturnWindow']();_0x17f2a6['show'](),_0x17f2a6[_0x1576fb(0x997)](),_0x17f2a6[_0x1576fb(0x69e)](),this['_inBattleStatusWindow'][_0x1576fb(0xb6c)](),this[_0x1576fb(0x7b5)][_0x1576fb(0x56a)]();},Scene_Battle['prototype'][_0x45d586(0x61d)]=function(){const _0x59c7b6=_0x45d586;if($gameTemp[_0x59c7b6(0x4f0)]!==undefined)return $gameTemp[_0x59c7b6(0x4f0)];if(this['_battleLayoutStyle'])return this[_0x59c7b6(0x9c4)];return this[_0x59c7b6(0x9c4)]=VisuMZ[_0x59c7b6(0x6fe)][_0x59c7b6(0xa41)][_0x59c7b6(0x7a5)][_0x59c7b6(0x7d9)][_0x59c7b6(0x2ab)]()['trim'](),this[_0x59c7b6(0x9c4)]===_0x59c7b6(0x5d5)&&!Imported[_0x59c7b6(0x7b1)]&&(this['_battleLayoutStyle']=_0x59c7b6(0x915)),this[_0x59c7b6(0x9c4)]==='frontview_ui'&&!Imported[_0x59c7b6(0xb8f)]&&(this[_0x59c7b6(0x9c4)]=_0x59c7b6(0x915)),this[_0x59c7b6(0x9c4)];},VisuMZ['BattleCore'][_0x45d586(0xaba)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x5c0)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x5c0)]=function(){const _0x2817b9=_0x45d586,_0x1d6b8e=this['battleLayoutStyle']();switch(_0x1d6b8e){case _0x2817b9(0x505):return this['calcWindowHeight'](Math[_0x2817b9(0x61a)](0x1,$gameParty[_0x2817b9(0x29b)]()),!![]);break;case _0x2817b9(0x70e):return this[_0x2817b9(0xb15)](0x4,!![]);break;default:return VisuMZ[_0x2817b9(0x6fe)][_0x2817b9(0xaba)][_0x2817b9(0x1b5)](this);break;}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x82d)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xb5b)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xb5b)]=function(){const _0xdc435e=_0x45d586,_0x61549c=this['battleLayoutStyle']();switch(_0x61549c){case _0xdc435e(0x70e):return this['helpWindowRectBorderStyle']();break;case _0xdc435e(0x915):case _0xdc435e(0x505):case'xp':case _0xdc435e(0x376):default:return VisuMZ[_0xdc435e(0x6fe)][_0xdc435e(0x82d)][_0xdc435e(0x1b5)](this);break;}},Scene_Battle['prototype']['statusWindowRect']=function(){const _0x19c82e=_0x45d586,_0x47f230=this[_0x19c82e(0x61d)]();switch(_0x47f230){case'xp':case _0x19c82e(0x376):return this['statusWindowRectXPStyle']();break;case'border':return this[_0x19c82e(0x8e6)]();break;case _0x19c82e(0x915):case'list':default:return this[_0x19c82e(0x3d3)]();break;}},VisuMZ['BattleCore'][_0x45d586(0x580)]=Scene_Battle['prototype'][_0x45d586(0x334)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x334)]=function(){const _0x1bbbdf=_0x45d586,_0x3c077c=this['battleLayoutStyle']();switch(_0x3c077c){case'xp':case'portrait':return this['partyCommandWindowRectXPStyle']();break;case _0x1bbbdf(0x70e):return this[_0x1bbbdf(0x9e0)]();case _0x1bbbdf(0x915):case _0x1bbbdf(0x505):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x29e)]=function(){const _0x561e88=_0x45d586,_0x12b04c=VisuMZ[_0x561e88(0x6fe)]['Settings'][_0x561e88(0x7a5)],_0x4fd9cd=_0x12b04c[_0x561e88(0x2ba)]||0xc0,_0xd6d70c=this[_0x561e88(0x5c0)](),_0x5729e7=this[_0x561e88(0xaa4)]()?Graphics['boxWidth']-_0x4fd9cd:0x0,_0x5dba78=Graphics[_0x561e88(0x56c)]-_0xd6d70c;return new Rectangle(_0x5729e7,_0x5dba78,_0x4fd9cd,_0xd6d70c);},Scene_Battle['prototype'][_0x45d586(0x359)]=function(){const _0x4efd3f=_0x45d586;return this[_0x4efd3f(0x334)]();},VisuMZ['BattleCore']['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xbf7)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xbf7)]=function(){const _0x81d673=_0x45d586;if(this['_inBattleStatusMode'])return;const _0x550aa9=this[_0x81d673(0x61d)]();switch(_0x550aa9){case'xp':case'portrait':case _0x81d673(0x70e):break;case _0x81d673(0x915):case'list':default:VisuMZ[_0x81d673(0x6fe)][_0x81d673(0x9a5)][_0x81d673(0x1b5)](this);break;}},Scene_Battle['prototype'][_0x45d586(0x3d3)]=function(){const _0x184d09=_0x45d586,_0x51ce62=VisuMZ[_0x184d09(0x6fe)]['Settings'][_0x184d09(0x7a5)],_0xa0a28a=Window_BattleStatus[_0x184d09(0x19f)]['extraHeight'](),_0xb3a200=Graphics[_0x184d09(0x6ae)]-(_0x51ce62[_0x184d09(0x2ba)]||0xc0),_0x2f7d21=this[_0x184d09(0x5c0)]()+_0xa0a28a,_0xe223c0=this[_0x184d09(0xaa4)]()?0x0:Graphics[_0x184d09(0x6ae)]-_0xb3a200,_0x2fec11=Graphics[_0x184d09(0x56c)]-_0x2f7d21+_0xa0a28a;return new Rectangle(_0xe223c0,_0x2fec11,_0xb3a200,_0x2f7d21);},Scene_Battle[_0x45d586(0x19f)]['statusWindowRectXPStyle']=function(){const _0x3e79ce=_0x45d586,_0x5160b3=Window_BattleStatus[_0x3e79ce(0x19f)][_0x3e79ce(0xb4c)](),_0x57210f=Graphics[_0x3e79ce(0x6ae)],_0x2253c7=this[_0x3e79ce(0x5c0)]()+_0x5160b3,_0xbc9c6d=0x0,_0x2b69e8=Graphics['boxHeight']-_0x2253c7+_0x5160b3;return new Rectangle(_0xbc9c6d,_0x2b69e8,_0x57210f,_0x2253c7);},Scene_Battle['prototype']['partyCommandWindowRectXPStyle']=function(){const _0x339bd5=_0x45d586,_0xd53fc=Graphics[_0x339bd5(0x6ae)]/0x2,_0x43da0e=this['calcWindowHeight'](VisuMZ[_0x339bd5(0x6fe)][_0x339bd5(0xa41)][_0x339bd5(0x7a5)][_0x339bd5(0x5a8)],!![]),_0x89e696=Math[_0x339bd5(0x31d)]((Graphics[_0x339bd5(0x6ae)]-_0xd53fc)/0x2),_0xce6eb1=Graphics[_0x339bd5(0x56c)]-_0x43da0e-this[_0x339bd5(0x794)]()[_0x339bd5(0x6ac)];return new Rectangle(_0x89e696,_0xce6eb1,_0xd53fc,_0x43da0e);},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xaaf)]=function(){const _0x5207a8=_0x45d586,_0x4f504e=Graphics[_0x5207a8(0x7ea)],_0x40a262=Math[_0x5207a8(0x31d)]((Graphics['boxWidth']-_0x4f504e)/0x2),_0xcaecb1=this[_0x5207a8(0x54c)](),_0x500fd8=(Graphics[_0x5207a8(0x6ac)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x40a262,_0x500fd8,_0x4f504e,_0xcaecb1);},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x8e6)]=function(){const _0x39c644=_0x45d586,_0x1e73e0=Graphics[_0x39c644(0x7ea)],_0x48c7d7=Math[_0x39c644(0x31d)]((Graphics[_0x39c644(0x6ae)]-_0x1e73e0)/0x2),_0x370a9a=this[_0x39c644(0xb15)](0x4,!![]),_0x3bcbc5=Graphics[_0x39c644(0x56c)]-_0x370a9a+(Graphics['height']-Graphics[_0x39c644(0x56c)])/0x2;return new Rectangle(_0x48c7d7,_0x3bcbc5,_0x1e73e0,_0x370a9a);},Scene_Battle['prototype'][_0x45d586(0x9e0)]=function(){const _0x1b8d51=_0x45d586,_0x128a0d=Math['floor'](Graphics[_0x1b8d51(0x7ea)]/0x3),_0xda3a=this[_0x1b8d51(0xaa4)]()?(Graphics[_0x1b8d51(0x7ea)]+Graphics[_0x1b8d51(0x6ae)])/0x2-_0x128a0d:(Graphics[_0x1b8d51(0x7ea)]-Graphics[_0x1b8d51(0x6ae)])/-0x2,_0x27976d=this[_0x1b8d51(0xaaf)](),_0x5756e0=_0x27976d['y']+_0x27976d[_0x1b8d51(0x6ac)],_0x1331cf=this[_0x1b8d51(0x8e6)](),_0x1f03f8=_0x1331cf['y']-_0x5756e0;return new Rectangle(_0xda3a,_0x5756e0,_0x128a0d,_0x1f03f8);},Scene_Battle['prototype'][_0x45d586(0x31b)]=function(){const _0x5d8d58=_0x45d586,_0x3dae24=Math['ceil'](Graphics[_0x5d8d58(0x7ea)]/0x3),_0x2ae5cb=Math['round']((Graphics['boxWidth']-_0x3dae24)/0x2),_0x84198c=this[_0x5d8d58(0x9e0)](),_0xc83ae6=_0x84198c['y'],_0x538d1f=_0x84198c[_0x5d8d58(0x6ac)];return new Rectangle(_0x2ae5cb,_0xc83ae6,_0x3dae24,_0x538d1f);},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x262)]=function(){const _0x2eddae=_0x45d586;this[_0x2eddae(0x9f2)]['y']=this[_0x2eddae(0x8b3)]['y']+this[_0x2eddae(0x8b3)]['height'],this[_0x2eddae(0xaa4)]()?this[_0x2eddae(0x61d)]()===_0x2eddae(0x70e)?this[_0x2eddae(0x9f2)]['x']=0x8:this[_0x2eddae(0x9f2)]['x']=-this[_0x2eddae(0x9f2)][_0x2eddae(0x7ea)]-0x4:this[_0x2eddae(0x9f2)]['x']=Graphics[_0x2eddae(0x7ea)]-(Graphics[_0x2eddae(0x7ea)]-Graphics[_0x2eddae(0x6ae)])/0x2-this['_cancelButton'][_0x2eddae(0x7ea)]-0x4;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x1c6)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x430)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x430)]=function(){const _0x28c9b5=_0x45d586;if(this[_0x28c9b5(0x61d)]()===_0x28c9b5(0x70e))return this[_0x28c9b5(0x31b)]();else return this[_0x28c9b5(0x2cc)]()?this[_0x28c9b5(0x97d)]():VisuMZ['BattleCore'][_0x28c9b5(0x1c6)]['call'](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x27b)]=Scene_Battle[_0x45d586(0x19f)]['itemWindowRect'],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x544)]=function(){const _0x3b824c=_0x45d586;if(this[_0x3b824c(0x61d)]()===_0x3b824c(0x70e))return this[_0x3b824c(0x31b)]();else return this[_0x3b824c(0x2cc)]()?this['skillItemWindowRectMiddle']():VisuMZ['BattleCore'][_0x3b824c(0x27b)][_0x3b824c(0x1b5)](this);},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x2cc)]=function(){const _0x2ca956=_0x45d586;return VisuMZ[_0x2ca956(0x6fe)][_0x2ca956(0xa41)][_0x2ca956(0x7a5)][_0x2ca956(0x127)];},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x97d)]=function(){const _0x2a3628=_0x45d586,_0x3475f6=Sprite_Button[_0x2a3628(0x19f)]['blockWidth']()*0x2+0x4;let _0x555b2c=Graphics[_0x2a3628(0x6ae)]-_0x3475f6;Imported[_0x2a3628(0xbc5)]&&SceneManager[_0x2a3628(0x6b1)]()&&(_0x555b2c+=_0x3475f6);const _0xcef492=this[_0x2a3628(0x496)](),_0x26b33f=Graphics[_0x2a3628(0x56c)]-_0xcef492-this[_0x2a3628(0x6c4)]()['height']+Window_BattleStatus['prototype']['extraHeight'](),_0x563a69=0x0;return new Rectangle(_0x563a69,_0xcef492,_0x555b2c,_0x26b33f);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x70f)]=Scene_Battle['prototype']['startActorSelection'],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x211)]=function(){const _0x532d20=_0x45d586;VisuMZ[_0x532d20(0x6fe)]['Scene_Battle_startActorSelection'][_0x532d20(0x1b5)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x33c)]=Scene_Battle[_0x45d586(0x19f)]['startEnemySelection'],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x77e)]=function(){const _0xf29973=_0x45d586;VisuMZ['BattleCore'][_0xf29973(0x33c)][_0xf29973(0x1b5)](this),this['_enemyWindow'][_0xf29973(0x874)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x5fc)]=function(){const _0x3891bf=_0x45d586,_0x45e9f6=this[_0x3891bf(0x61d)]();['xp','portrait','border']['includes'](_0x45e9f6)&&this['_actorCommandWindow']['close'](),(_0x45e9f6==='border'||this['isSkillItemWindowsMiddle']())&&(this[_0x3891bf(0x6ab)][_0x3891bf(0x56a)](),this[_0x3891bf(0x3bf)]['close']());},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xae8)]=Scene_Battle[_0x45d586(0x19f)]['onActorOk'],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x6ba)]=function(){const _0x4b4684=_0x45d586;VisuMZ['BattleCore'][_0x4b4684(0xae8)][_0x4b4684(0x1b5)](this),this[_0x4b4684(0x54b)]();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xb7b)]=function(){const _0x1fc927=_0x45d586;return[_0x1fc927(0x84c),_0x1fc927(0x59d),_0x1fc927(0xa1e)][_0x1fc927(0x840)](this[_0x1fc927(0xb3a)]['currentSymbol']());},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xeb)]=Scene_Battle['prototype'][_0x45d586(0xaa1)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xaa1)]=function(){const _0x2d4ef5=_0x45d586;this[_0x2d4ef5(0xb7b)]()?(this['_statusWindow'][_0x2d4ef5(0xa0a)](),this['_actorWindow'][_0x2d4ef5(0xb6c)](),this['_actorCommandWindow']['activate']()):VisuMZ[_0x2d4ef5(0x6fe)][_0x2d4ef5(0xeb)][_0x2d4ef5(0x1b5)](this),this[_0x2d4ef5(0x498)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xac8)]=Scene_Battle['prototype']['onEnemyOk'],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x961)]=function(){const _0x438df0=_0x45d586;if(!this[_0x438df0(0x918)]['enemy']()){this[_0x438df0(0x918)][_0x438df0(0x69e)]();return;}const _0x3a1685=BattleManager[_0x438df0(0x517)]();_0x3a1685[_0x438df0(0x1c4)](this['_enemyWindow'][_0x438df0(0x6bc)]()),this['_enemyWindow'][_0x438df0(0x90c)](),VisuMZ['BattleCore'][_0x438df0(0xac8)][_0x438df0(0x1b5)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x53a)]=Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xb38)],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0xb38)]=function(){const _0x54d3bc=_0x45d586;this[_0x54d3bc(0xb7b)]()?(this['_statusWindow'][_0x54d3bc(0xa0a)](),this[_0x54d3bc(0x918)][_0x54d3bc(0xb6c)](),this[_0x54d3bc(0xb3a)][_0x54d3bc(0x69e)]()):VisuMZ[_0x54d3bc(0x6fe)][_0x54d3bc(0x53a)][_0x54d3bc(0x1b5)](this),this[_0x54d3bc(0x498)](),this['_enemyWindow']['closeBattleActorWindow']();},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x54b)]=function(){const _0x3e9eb1=_0x45d586,_0x98a9c2=this['battleLayoutStyle']();(_0x98a9c2===_0x3e9eb1(0x70e)||this[_0x3e9eb1(0x2cc)]())&&(this['_skillWindow']['open'](),this[_0x3e9eb1(0x6ab)][_0x3e9eb1(0x4cf)]&&this[_0x3e9eb1(0x6ab)][_0x3e9eb1(0xa0a)](),this[_0x3e9eb1(0x3bf)][_0x3e9eb1(0x997)](),this[_0x3e9eb1(0x3bf)]['active']&&this[_0x3e9eb1(0x3bf)]['show']());},Scene_Battle[_0x45d586(0x19f)]['cancelTargetSelectionVisibility']=function(){const _0x568220=_0x45d586,_0x2382a4=this[_0x568220(0x61d)]();['xp',_0x568220(0x376),'border'][_0x568220(0x840)](_0x2382a4)&&this[_0x568220(0xb3a)][_0x568220(0x997)](),this[_0x568220(0x54b)]();},Sprite_Battler[_0x45d586(0x591)]=VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x540)]['MotionSpeed'],VisuMZ['BattleCore']['Sprite_Battler_initMembers']=Sprite_Battler['prototype'][_0x45d586(0x2fc)],Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x2fc)]=function(){const _0x45e3a1=_0x45d586;VisuMZ[_0x45e3a1(0x6fe)][_0x45e3a1(0x22c)][_0x45e3a1(0x1b5)](this),this[_0x45e3a1(0x738)]();if(this['constructor']===Sprite_Enemy)this[_0x45e3a1(0x858)]();this[_0x45e3a1(0xbd3)]();},Sprite_Battler[_0x45d586(0x19f)]['initMembersBattleCore']=function(){const _0x4e844d=_0x45d586;this[_0x4e844d(0x5bb)]=0x0,this[_0x4e844d(0x83d)]=0x0,this[_0x4e844d(0x6bf)]=0x0,this[_0x4e844d(0x34b)]=0x0,this[_0x4e844d(0x99e)]=0x0,this['_floatWholeDuration']=0x0,this[_0x4e844d(0x4f3)]='Linear',this['_jumpHeight']=0x0,this[_0x4e844d(0x7d5)]=0x0,this[_0x4e844d(0x331)]=0x0,this[_0x4e844d(0x263)]=0x0,this[_0x4e844d(0x174)]=0xff,this[_0x4e844d(0x53e)]=0x0,this['_opacityWholeDuration']=0x0,this['_opacityEasing']=_0x4e844d(0xa8e),this[_0x4e844d(0x562)]=0x0,this['_targetAngle']=0x0,this[_0x4e844d(0xb25)]=0x0,this[_0x4e844d(0xb68)]=0x0,this[_0x4e844d(0x3db)]=_0x4e844d(0xa8e),this[_0x4e844d(0x89c)]=!![],this[_0x4e844d(0x972)]=0x0,this[_0x4e844d(0xbe5)]=0x0,this['_targetSkewX']=0x0,this[_0x4e844d(0x165)]=0x0,this[_0x4e844d(0x342)]=0x0,this[_0x4e844d(0x9bf)]=0x0,this[_0x4e844d(0x2a0)]='Linear',this[_0x4e844d(0xa13)]=0x1,this[_0x4e844d(0x2e9)]=0x1,this[_0x4e844d(0x766)]=0x1,this[_0x4e844d(0x172)]=0x1,this[_0x4e844d(0x7b4)]=0x0,this[_0x4e844d(0x1e5)]=0x0,this[_0x4e844d(0x3ff)]='Linear',this[_0x4e844d(0x326)]=0x1,this['_targetHomeX']=0x0,this['_targetHomeY']=0x0,this[_0x4e844d(0x80a)]=0x0,this['_homeWholeDuration']=0x0,this[_0x4e844d(0xbed)]=_0x4e844d(0xa8e),this[_0x4e844d(0x578)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler['prototype']['createShadowSprite']=function(){const _0x224454=_0x45d586;this['_shadowSprite']=new Sprite(),this[_0x224454(0x5c1)][_0x224454(0x46a)]=ImageManager[_0x224454(0xbef)](_0x224454(0x71f)),this[_0x224454(0x5c1)][_0x224454(0x46a)][_0x224454(0xbf0)]=VisuMZ['BattleCore'][_0x224454(0xa41)]['Actor'][_0x224454(0xa6b)],this[_0x224454(0x5c1)]['anchor']['x']=0.5,this[_0x224454(0x5c1)]['anchor']['y']=0.5,this[_0x224454(0x5c1)]['y']=-0x2,this[_0x224454(0x5c1)][_0x224454(0x3d1)]=![],this['addChild'](this['_shadowSprite']);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0xbd3)]=function(){const _0x45b80c=_0x45d586;this[_0x45b80c(0x5ce)]=new Sprite(),this['_distortionSprite'][_0x45b80c(0x9ea)]['x']=0.5,this[_0x45b80c(0x5ce)][_0x45b80c(0x9ea)]['y']=0.5,this[_0x45b80c(0x34e)](this[_0x45b80c(0x5ce)]);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x900)]=function(){const _0x26d9f1=_0x45d586;if(this[_0x26d9f1(0x305)]&&this[_0x26d9f1(0x305)]()){Sprite['prototype'][_0x26d9f1(0x900)][_0x26d9f1(0x1b5)](this);return;}const _0x53c779=this[_0x26d9f1(0x5ce)];if(!_0x53c779)return;!_0x53c779['_colorFilter']&&_0x53c779[_0x26d9f1(0x66f)](),_0x53c779[_0x26d9f1(0xa86)]['setHue'](this[_0x26d9f1(0x3fd)]),_0x53c779['_colorFilter'][_0x26d9f1(0x15a)](this[_0x26d9f1(0x2af)]),_0x53c779[_0x26d9f1(0xa86)][_0x26d9f1(0x796)](this['_colorTone']);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x7a4)]=function(){const _0x3fb51f=_0x45d586;if(!this['_distortionSprite'])return;if(this['_shadowSprite']){const _0x3ae878=this[_0x3fb51f(0x501)](this[_0x3fb51f(0x5ce)]);this[_0x3fb51f(0x84b)](this[_0x3fb51f(0x5c1)],_0x3ae878),this[_0x3fb51f(0x718)]();}this[_0x3fb51f(0x82f)]&&this[_0x3fb51f(0x5ce)][_0x3fb51f(0x34e)](this[_0x3fb51f(0x82f)]),this[_0x3fb51f(0x91c)]&&this[_0x3fb51f(0x5ce)][_0x3fb51f(0x34e)](this[_0x3fb51f(0x91c)]),this[_0x3fb51f(0x20e)]&&this[_0x3fb51f(0x5ce)][_0x3fb51f(0x34e)](this[_0x3fb51f(0x20e)]),this['_injectAnimationSprite']&&this['_distortionSprite'][_0x3fb51f(0x34e)](this[_0x3fb51f(0xa56)]),this['_dragonbonesSpriteContainer']&&this['_distortionSprite'][_0x3fb51f(0x34e)](this['_dragonbonesSpriteContainer']);},Sprite_Battler['prototype'][_0x45d586(0x718)]=function(){const _0x38a6a8=_0x45d586;if(!this[_0x38a6a8(0x5c1)])return;if(this[_0x38a6a8(0x86c)]&&this[_0x38a6a8(0x86c)]['svBattlerShadowVisible']()){const _0x427035=this[_0x38a6a8(0x5c1)][_0x38a6a8(0x46a)];this[_0x38a6a8(0x5c1)]['setFrame'](0x0,0x0,_0x427035[_0x38a6a8(0x7ea)],_0x427035[_0x38a6a8(0x6ac)]);}else this[_0x38a6a8(0x5c1)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x73a)]=function(){const _0x5854aa=_0x45d586;return SceneManager[_0x5854aa(0x81a)]()?SceneManager[_0x5854aa(0x4f4)][_0x5854aa(0x992)]['_damageContainer']:this[_0x5854aa(0x35b)];},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x3e4)]=function(_0x59b81e,_0x5c9c3d){const _0x2d9b50=_0x45d586;if(!this[_0x2d9b50(0x86c)][_0x2d9b50(0x42f)]())return;if(BattleManager[_0x2d9b50(0xa68)]())return;const _0x5496bf=VisuMZ[_0x2d9b50(0x6fe)][_0x2d9b50(0xa41)][_0x2d9b50(0x244)],_0x4e72d0=new Sprite_Damage();_0x4e72d0[_0x2d9b50(0x71e)]=_0x5496bf[_0x2d9b50(0xbec)],this[_0x2d9b50(0x5b0)](_0x4e72d0),_0x4e72d0['setupTextPopup'](_0x59b81e,_0x5c9c3d),this['addDamageSprite'](_0x4e72d0);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x775)]=function(_0x239c85,_0x1b9db1,_0x9115e){const _0x52d1fa=_0x45d586;if(!this[_0x52d1fa(0x86c)][_0x52d1fa(0x42f)]())return;if(BattleManager[_0x52d1fa(0xa68)]())return;const _0x568082=VisuMZ[_0x52d1fa(0x6fe)]['Settings'][_0x52d1fa(0x244)],_0x57dfcf=new Sprite_Damage();_0x57dfcf[_0x52d1fa(0x71e)]=_0x568082[_0x52d1fa(0xbec)],this[_0x52d1fa(0x5b0)](_0x57dfcf),_0x57dfcf[_0x52d1fa(0x775)](_0x239c85,_0x1b9db1,_0x9115e),this[_0x52d1fa(0x50e)](_0x57dfcf);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x56b)]=function(){const _0x393df7=_0x45d586;if(!this[_0x393df7(0x86c)][_0x393df7(0x254)]())return;while(this[_0x393df7(0x86c)]['isDamagePopupRequested']()){this[_0x393df7(0x86c)][_0x393df7(0x42f)]()&&this[_0x393df7(0x4df)]();}this[_0x393df7(0x86c)][_0x393df7(0x564)](),this[_0x393df7(0x86c)]['clearResult']();},Sprite_Battler['prototype']['createDamageSprite']=function(){const _0x49e6bd=_0x45d586;if(BattleManager[_0x49e6bd(0xa68)]())return;const _0x35b7b9=VisuMZ[_0x49e6bd(0x6fe)][_0x49e6bd(0xa41)]['Damage'],_0x3f18f2=new Sprite_Damage();_0x3f18f2[_0x49e6bd(0x71e)]=_0x35b7b9[_0x49e6bd(0xbec)],this[_0x49e6bd(0x5b0)](_0x3f18f2),_0x3f18f2[_0x49e6bd(0x846)](this['_battler']),_0x3f18f2['setupBattleCore'](this[_0x49e6bd(0x86c)]),this[_0x49e6bd(0x50e)](_0x3f18f2);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x50e)]=function(_0x130a74){const _0x424e51=_0x45d586;this['_damages'][_0x424e51(0x119)](_0x130a74);if(this[_0x424e51(0x819)]()){const _0x34e15d=SceneManager[_0x424e51(0x4f4)][_0x424e51(0x3c5)];if(_0x34e15d)_0x34e15d['addDamageSprite'](_0x130a74,this['_battler']);}else{this[_0x424e51(0x73a)]()[_0x424e51(0x34e)](_0x130a74);if(SceneManager['isBattleFlipped']())_0x130a74[_0x424e51(0x889)]['x']=-0x1;}},Sprite_Battler['prototype'][_0x45d586(0x819)]=function(){const _0x5329cc=_0x45d586;return!$gameSystem[_0x5329cc(0x138)]()&&this['_battler']&&this['_battler'][_0x5329cc(0x7f0)]();return!$gameSystem[_0x5329cc(0x138)]()&&this[_0x5329cc(0x86c)]&&this[_0x5329cc(0x86c)][_0x5329cc(0x7f0)]()&&Window_BattleStatus[_0x5329cc(0x19f)][_0x5329cc(0x61d)]()==='portrait';},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x5b0)]=function(_0x1d4213){const _0x2dea97=_0x45d586;this[_0x2dea97(0xb56)](_0x1d4213,!![]);const _0x426995=VisuMZ[_0x2dea97(0x6fe)][_0x2dea97(0xa41)][_0x2dea97(0x244)],_0x5032d7=SceneManager[_0x2dea97(0x8cd)]()?-0x1:0x1;if(_0x426995[_0x2dea97(0xde)])for(const _0x1bfd17 of this[_0x2dea97(0x528)]){_0x1bfd17['x']+=_0x426995[_0x2dea97(0x6b0)]*_0x5032d7,_0x1bfd17['y']+=_0x426995[_0x2dea97(0x80b)];}else{const _0xa5a33=this['_damages'][this[_0x2dea97(0x528)]['length']-0x1];_0xa5a33&&(_0x1d4213['x']=_0xa5a33['x']+_0x426995[_0x2dea97(0x6b0)]*_0x5032d7,_0x1d4213['y']=_0xa5a33['y']+_0x426995['PopupShiftY']);}},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0xb56)]=function(_0x20d24b,_0x1c3aab){const _0x3694ab=_0x45d586,_0x125900=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x3776a3=this['_baseX'];_0x3776a3+=this['extraPositionX']();let _0xc6630f=this[_0x3694ab(0x83d)];const _0x3a9fe9=this['_distortionSprite']['scale']['y'];_0xc6630f+=this[_0x3694ab(0x36a)]();const _0x7d2788=SceneManager['_scene'][_0x3694ab(0x3c5)];if(_0x7d2788&&this[_0x3694ab(0x35b)]===_0x7d2788){_0x3776a3+=_0x7d2788['x']-this[_0x3694ab(0x948)]();const _0x2f4b66=_0x7d2788['lineHeight']()*0x3/0x4;_0xc6630f=_0x7d2788['y']+_0x2f4b66,_0xc6630f=Math[_0x3694ab(0xb4b)](_0xc6630f,_0x7d2788['y']+this['y']-this['height']+_0x2f4b66);}_0x20d24b['x']=Math[_0x3694ab(0x31d)](_0x3776a3+this['damageOffsetX']()*_0x125900),_0x20d24b['y']=Math[_0x3694ab(0x31d)](_0xc6630f+this[_0x3694ab(0x2fa)]());},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x53d)]=Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x948)],Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x948)]=function(){const _0x2b0928=_0x45d586;let _0x335f85=VisuMZ[_0x2b0928(0x6fe)][_0x2b0928(0x53d)][_0x2b0928(0x1b5)](this),_0x3a6328=VisuMZ[_0x2b0928(0x6fe)][_0x2b0928(0xa41)][_0x2b0928(0x244)]['PopupOffsetX']||0x0;return _0x3a6328+=this['_battler']['damagePopupOffsetX'](),Math[_0x2b0928(0x31d)](_0x335f85+_0x3a6328);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x437)]=Sprite_Battler[_0x45d586(0x19f)]['damageOffsetY'],Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x2fa)]=function(){const _0x1a07a4=_0x45d586;let _0x3b4ad6=VisuMZ[_0x1a07a4(0x6fe)][_0x1a07a4(0x437)][_0x1a07a4(0x1b5)](this);switch(this['_battler']['damagePopupPosition']()){case _0x1a07a4(0x720):_0x3b4ad6-=this[_0x1a07a4(0x6ac)]*this[_0x1a07a4(0x889)]['y'];break;case _0x1a07a4(0x735):_0x3b4ad6-=this[_0x1a07a4(0x6ac)]*this[_0x1a07a4(0x889)]['y']*0.5;break;}let _0x2361f1=VisuMZ[_0x1a07a4(0x6fe)][_0x1a07a4(0xa41)]['Damage']['PopupOffsetY']||0x0;return _0x2361f1+=this[_0x1a07a4(0x86c)][_0x1a07a4(0x3ae)](),Math[_0x1a07a4(0x31d)](_0x3b4ad6+_0x2361f1);},Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x948)]=function(){const _0x5f4fff=_0x45d586;return Sprite_Battler[_0x5f4fff(0x19f)][_0x5f4fff(0x948)][_0x5f4fff(0x1b5)](this);},Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x2fa)]=function(){const _0x17244c=_0x45d586;return Sprite_Battler[_0x17244c(0x19f)][_0x17244c(0x2fa)]['call'](this);},Sprite_Battler['prototype'][_0x45d586(0x7bd)]=function(_0x472e8e){const _0x9160c1=_0x45d586;this['isShownOnBattlePortrait']()?SceneManager[_0x9160c1(0x4f4)][_0x9160c1(0x3c5)]['removeDamageSprite'](_0x472e8e):(this[_0x9160c1(0x73a)]()[_0x9160c1(0x6c6)](_0x472e8e),this[_0x9160c1(0x528)][_0x9160c1(0x4e7)](_0x472e8e),_0x472e8e[_0x9160c1(0x9ac)]());},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x368)]=Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x8fd)],Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x8fd)]=function(_0x4e28ab,_0x116c14){const _0x15d915=_0x45d586,_0x5461b6=VisuMZ[_0x15d915(0x6fe)][_0x15d915(0xa41)];if(this['constructor']===Sprite_Actor)_0x4e28ab+=_0x5461b6[_0x15d915(0x540)][_0x15d915(0x34f)]||0x0,_0x116c14+=_0x5461b6[_0x15d915(0x540)][_0x15d915(0x261)]||0x0;else this[_0x15d915(0xb62)]===Sprite_Enemy&&(_0x4e28ab+=_0x5461b6[_0x15d915(0x401)][_0x15d915(0x34f)]||0x0,_0x116c14+=_0x5461b6[_0x15d915(0x401)]['OffsetY']||0x0);this['_battler']&&(_0x4e28ab=this['_battler'][_0x15d915(0x233)]??_0x4e28ab,_0x116c14=this[_0x15d915(0x86c)][_0x15d915(0x71c)]??_0x116c14),VisuMZ[_0x15d915(0x6fe)]['Sprite_Battler_setHome'][_0x15d915(0x1b5)](this,_0x4e28ab,_0x116c14),this[_0x15d915(0x619)]=this[_0x15d915(0x47c)],this[_0x15d915(0xbac)]=this[_0x15d915(0xac0)],this[_0x15d915(0x80a)]=0x0,this['_homeWholeDuration']=0x0,this[_0x15d915(0xbed)]=_0x15d915(0xa8e);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xb00)]=Sprite_Battler['prototype'][_0x45d586(0xae1)],Sprite_Battler[_0x45d586(0x19f)]['update']=function(){const _0x327e6e=_0x45d586;VisuMZ[_0x327e6e(0x6fe)][_0x327e6e(0xb00)][_0x327e6e(0x1b5)](this),!this[_0x327e6e(0x86c)]&&this[_0x327e6e(0x2e7)]&&(this['_hpGaugeSprite'][_0x327e6e(0x3d1)]=![]);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x27f)]=Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x628)],Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x628)]=function(){const _0x383629=_0x45d586;this[_0x383629(0x227)](),this['updateSkew'](),this[_0x383629(0x8cf)](),this[_0x383629(0x40e)](),VisuMZ['BattleCore'][_0x383629(0x27f)]['call'](this),this['updateHpGaugePosition'](),this[_0x383629(0x3b3)]();if(this[_0x383629(0xb62)]===Sprite_Enemy)this[_0x383629(0x3dc)]();},VisuMZ[_0x45d586(0x6fe)]['Sprite_Battler_updatePosition']=Sprite_Battler['prototype'][_0x45d586(0x8f0)],Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x8f0)]=function(){const _0x93b2a0=_0x45d586;this[_0x93b2a0(0xaed)](),VisuMZ[_0x93b2a0(0x6fe)][_0x93b2a0(0xa3c)][_0x93b2a0(0x1b5)](this),this[_0x93b2a0(0xfa)](),this[_0x93b2a0(0x3cd)]();},Sprite_Battler['prototype'][_0x45d586(0x6c7)]=function(){const _0x335160=_0x45d586,_0xfa1547=this[_0x335160(0x212)]();if(this[_0x335160(0x86c)][_0x335160(0x5bc)]())this[_0x335160(0x655)]++,Graphics[_0x335160(0x4f8)]%0x1e<0xf?_0xfa1547[_0x335160(0x15a)]([0xff,0xff,0xff,0x40]):_0xfa1547[_0x335160(0x15a)]([0x0,0x0,0x0,0x0]);else this[_0x335160(0x655)]>0x0&&(this[_0x335160(0x655)]=0x0,_0xfa1547[_0x335160(0x15a)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x4d2)]=function(_0x142b8e,_0x18be3d){const _0x4bbe9a=_0x45d586,_0x3216c1=VisuMZ[_0x4bbe9a(0x6fe)][_0x4bbe9a(0xa41)];if(this[_0x4bbe9a(0xb62)]===Sprite_Actor)_0x142b8e+=_0x3216c1[_0x4bbe9a(0x540)][_0x4bbe9a(0x34f)]||0x0,_0x18be3d+=_0x3216c1[_0x4bbe9a(0x540)]['OffsetY']||0x0;else this[_0x4bbe9a(0xb62)]===Sprite_Enemy&&(_0x142b8e+=_0x3216c1['Enemy']['OffsetX']||0x0,_0x18be3d+=_0x3216c1[_0x4bbe9a(0x401)]['OffsetY']||0x0);const _0x4acb96=_0x142b8e-this[_0x4bbe9a(0x47c)],_0x27262e=_0x18be3d-this['_homeY'];this[_0x4bbe9a(0x47c)]=_0x142b8e,this[_0x4bbe9a(0xac0)]=_0x18be3d,this[_0x4bbe9a(0xa9e)]-=_0x4acb96,this[_0x4bbe9a(0x9ad)]-=_0x27262e,this[_0x4bbe9a(0x9b5)]-=_0x4acb96,this[_0x4bbe9a(0xb6d)]-=_0x27262e,this[_0x4bbe9a(0x8f0)]();},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x84a)]=function(_0x29b815,_0x229ebd,_0x5bc1ba,_0xe211c8){const _0x3212cd=_0x45d586,_0x50203c=VisuMZ['BattleCore']['Settings'];if(this['constructor']===Sprite_Actor)_0x29b815+=_0x50203c[_0x3212cd(0x540)][_0x3212cd(0x34f)]||0x0,_0x229ebd+=_0x50203c[_0x3212cd(0x540)]['OffsetY']||0x0;else this[_0x3212cd(0xb62)]===Sprite_Enemy&&(_0x29b815+=_0x50203c['Enemy'][_0x3212cd(0x34f)]||0x0,_0x229ebd+=_0x50203c['Enemy']['OffsetY']||0x0);(this[_0x3212cd(0x619)]!==_0x29b815||this[_0x3212cd(0xbac)]!==_0x229ebd)&&(this[_0x3212cd(0x619)]=_0x29b815,this[_0x3212cd(0xbac)]=_0x229ebd,this['_homeDuration']=_0x5bc1ba,this[_0x3212cd(0x1d8)]=_0x5bc1ba,this[_0x3212cd(0xbed)]=_0xe211c8,_0x5bc1ba<=0x0&&this[_0x3212cd(0xb2d)]());},Sprite_Battler['prototype']['updateHomeMove']=function(){const _0x48980c=_0x45d586;if(this['_homeDuration']<=0x0)return;const _0x5db629=this['_homeDuration'],_0x19669f=this[_0x48980c(0x1d8)],_0x18b86b=this['_homeEasing'];Imported['VisuMZ_0_CoreEngine']?(this['_homeX']=this['applyEasing'](this[_0x48980c(0x47c)],this[_0x48980c(0x619)],_0x5db629,_0x19669f,_0x18b86b),this[_0x48980c(0xac0)]=this['applyEasing'](this['_homeY'],this[_0x48980c(0xbac)],_0x5db629,_0x19669f,_0x18b86b)):(this[_0x48980c(0x47c)]=(this[_0x48980c(0x47c)]*(_0x5db629-0x1)+this[_0x48980c(0x619)])/_0x5db629,this['_homeY']=(this[_0x48980c(0xac0)]*(_0x5db629-0x1)+this['_targetHomeY'])/_0x5db629);this[_0x48980c(0x80a)]--;if(this['_homeDuration']<=0x0)this['onHomeMoveEnd']();},Sprite_Battler[_0x45d586(0x19f)]['onHomeMoveEnd']=function(){const _0x492d3f=_0x45d586;this[_0x492d3f(0x47c)]=this[_0x492d3f(0x619)],this['_homeY']=this[_0x492d3f(0xbac)];},Sprite_Battler['prototype']['updatePositionBattleCore']=function(){const _0x58c1ae=_0x45d586;this[_0x58c1ae(0x5bb)]=this['x'],this['_baseY']=this['y'],this['updateFloat'](),this[_0x58c1ae(0x307)](),this['x']+=this[_0x58c1ae(0xaf8)](),this['y']+=this[_0x58c1ae(0x36a)](),this['y']+=this[_0x58c1ae(0x640)](),this['x']=Math[_0x58c1ae(0x85a)](this['x']),this['y']=Math['floor'](this['y']);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0xaf8)]=function(){let _0x446646=0x0;return _0x446646;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x36a)]=function(){const _0x46840b=_0x45d586;let _0x50aed7=0x0;return this[_0x46840b(0x86c)]&&!this[_0x46840b(0x86c)][_0x46840b(0x8c7)]()&&(_0x50aed7-=this['_floatHeight'],_0x50aed7-=this[_0x46840b(0x953)]),_0x50aed7;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x640)]=function(){const _0x50ee3c=_0x45d586;let _0x3a2ead=0x0;if(this[_0x50ee3c(0x5ce)]&&this[_0x50ee3c(0xb62)]!==Sprite_SvEnemy){const _0x2cb488=this[_0x50ee3c(0x5ce)][_0x50ee3c(0x889)]['y'];_0x3a2ead-=(_0x2cb488-0x1)*this[_0x50ee3c(0x6ac)];}return _0x3a2ead;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x40e)]=function(){const _0x5b0e72=_0x45d586,_0x29bc84=this[_0x5b0e72(0x86c)]&&this[_0x5b0e72(0x86c)][_0x5b0e72(0x90d)]();this['_flipScaleX']=(_0x29bc84?-0x1:0x1)*Math[_0x5b0e72(0xb5e)](this['scale']['x']);},Sprite_Battler['prototype'][_0x45d586(0x390)]=function(_0x330826,_0x132dbd,_0x16d5e5){const _0x1baa09=_0x45d586;if(!this['canMove']())return;if(this[_0x1baa09(0x34b)]===_0x330826)return;this[_0x1baa09(0x34b)]=_0x330826,this['_floatDuration']=_0x132dbd,this[_0x1baa09(0x465)]=_0x132dbd,this['_floatEasing']=_0x16d5e5||'Linear';if(_0x132dbd<=0x0)this[_0x1baa09(0x6bf)]=_0x330826;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x8ae)]=function(){const _0x1ab627=_0x45d586;if(this[_0x1ab627(0x99e)]<=0x0)return;const _0x5c0e76=this[_0x1ab627(0x99e)],_0x55eeb9=this['_floatWholeDuration'],_0x5a3132=this[_0x1ab627(0x4f3)];Imported[_0x1ab627(0xbc5)]?this[_0x1ab627(0x6bf)]=this[_0x1ab627(0x9aa)](this[_0x1ab627(0x6bf)],this['_targetFloatHeight'],_0x5c0e76,_0x55eeb9,_0x5a3132):this[_0x1ab627(0x6bf)]=(this[_0x1ab627(0x6bf)]*(_0x5c0e76-0x1)+this[_0x1ab627(0x34b)])/_0x5c0e76;this[_0x1ab627(0x99e)]--;if(this['_floatDuration']<=0x0)this[_0x1ab627(0x7d8)]();},Sprite_Battler[_0x45d586(0x19f)]['onFloatEnd']=function(){const _0x214e3b=_0x45d586;this['_floatHeight']=this[_0x214e3b(0x34b)];},Sprite_Battler['prototype'][_0x45d586(0x757)]=function(){const _0x3276a0=_0x45d586;return this[_0x3276a0(0x99e)]>0x0;},Sprite_Battler[_0x45d586(0x19f)]['startJump']=function(_0x55d507,_0x2dc2a5){const _0x16e973=_0x45d586;if(!this[_0x16e973(0x2ce)]())return;if(_0x2dc2a5<=0x0)return;this['_jumpMaxHeight']=_0x55d507,this[_0x16e973(0x331)]=_0x2dc2a5,this['_jumpWholeDuration']=_0x2dc2a5;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x307)]=function(){const _0x3b9391=_0x45d586;if(this['_jumpDuration']<=0x0)return;const _0x50a561=this[_0x3b9391(0x263)]-this[_0x3b9391(0x331)],_0x223fbc=this['_jumpWholeDuration']/0x2,_0x2dcbf9=this['_jumpMaxHeight'],_0x5b7026=-_0x2dcbf9/Math['pow'](_0x223fbc,0x2);this[_0x3b9391(0x953)]=_0x5b7026*Math[_0x3b9391(0x945)](_0x50a561-_0x223fbc,0x2)+_0x2dcbf9,this[_0x3b9391(0x331)]--;if(this[_0x3b9391(0x331)]<=0x0)return this['onJumpEnd']();},Sprite_Battler['prototype']['onJumpEnd']=function(){this['_jumpHeight']=0x0;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x880)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler['prototype'][_0x45d586(0xaeb)]=function(_0x2f11ad,_0x27614c,_0x516e42){const _0x3ad84b=_0x45d586;if(this[_0x3ad84b(0x174)]===_0x2f11ad)return;this[_0x3ad84b(0x174)]=_0x2f11ad,this[_0x3ad84b(0x53e)]=_0x27614c,this[_0x3ad84b(0xba7)]=_0x27614c,this[_0x3ad84b(0x147)]=_0x516e42||'Linear';if(_0x27614c<=0x0)this[_0x3ad84b(0x125)]=_0x2f11ad;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x3cd)]=function(){const _0x55f68c=_0x45d586;if(this[_0x55f68c(0xb62)][_0x55f68c(0x5c2)]===_0x55f68c(0xb74))return;if(this[_0x55f68c(0x53e)]<=0x0)return;const _0x300dbc=this[_0x55f68c(0x53e)],_0x5064dd=this[_0x55f68c(0xba7)],_0x4f052f=this[_0x55f68c(0x147)];Imported['VisuMZ_0_CoreEngine']?this['opacity']=this[_0x55f68c(0x9aa)](this[_0x55f68c(0x125)],this[_0x55f68c(0x174)],_0x300dbc,_0x5064dd,_0x4f052f):this['opacity']=(this[_0x55f68c(0x125)]*(_0x300dbc-0x1)+this[_0x55f68c(0x174)])/_0x300dbc;this[_0x55f68c(0x53e)]--;if(this[_0x55f68c(0x53e)]<=0x0)this['onOpacityEnd']();},Sprite_Battler['prototype']['onOpacityEnd']=function(){const _0xcc3371=_0x45d586;this[_0xcc3371(0x125)]=this[_0xcc3371(0x174)];},Sprite_Battler[_0x45d586(0x19f)]['isChangingOpacity']=function(){const _0x20548d=_0x45d586;return this[_0x20548d(0x53e)]>0x0;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x3dc)]=function(){const _0x51e3d3=_0x45d586;this[_0x51e3d3(0x5c1)][_0x51e3d3(0x3d1)]=this['_battler'][_0x51e3d3(0x199)](),this[_0x51e3d3(0x20d)]();},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x20d)]=function(){const _0x2af755=_0x45d586;if(!this['_shadowSprite'])return;this[_0x2af755(0x5c1)]['y']=this[_0x2af755(0x83d)]-this['y']-0x2;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x844)]=function(){const _0x4abbe8=_0x45d586;if(!this[_0x4abbe8(0x86c)])return;this[_0x4abbe8(0x2a3)]=this[_0x4abbe8(0x86c)][_0x4abbe8(0x29d)](),this['_shadowScaleY']=this['_battler'][_0x4abbe8(0x252)]();},Game_BattlerBase[_0x45d586(0x19f)]['battlerShadowScaleX']=function(){const _0x50e23b=_0x45d586,_0x2a139c=this[_0x50e23b(0x7f0)]()?this[_0x50e23b(0xb77)]():this['enemy']();if(_0x2a139c){const _0x2386a6=_0x2a139c[_0x50e23b(0x34a)];if(_0x2386a6[_0x50e23b(0x95f)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x2386a6[_0x50e23b(0x95f)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x252)]=function(){const _0x1ba422=_0x45d586,_0x314369=this['isActor']()?this['actor']():this['enemy']();if(_0x314369){const _0x306c41=_0x314369[_0x1ba422(0x34a)];if(_0x306c41[_0x1ba422(0x95f)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x306c41[_0x1ba422(0x95f)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x227)]=function(){const _0x22fe24=_0x45d586;if(this[_0x22fe24(0xb62)]===Sprite_SvEnemy)return;this[_0x22fe24(0x521)](),this['finalizeScale']();},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0xa6e)]=function(){const _0x427bc4=_0x45d586,_0x172267=this[_0x427bc4(0x5ce)];_0x172267&&(_0x172267[_0x427bc4(0x889)]['x']=this['mainSpriteScaleX'](),_0x172267[_0x427bc4(0x889)]['y']=this[_0x427bc4(0x3e1)]());},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x660)]=function(){const _0x1e5117=_0x45d586;let _0x3c23ec=0x1;return _0x3c23ec*=this[_0x1e5117(0x326)],_0x3c23ec*=this[_0x1e5117(0xa13)],_0x3c23ec;},Sprite_Battler['prototype']['mainSpriteScaleY']=function(){return 0x1*this['_growY'];},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x102)]=function(){const _0x470225=_0x45d586;return this[_0x470225(0x7ea)]*this[_0x470225(0x660)]();},Sprite_Battler[_0x45d586(0x19f)]['mainSpriteHeight']=function(){return this['height']*this['mainSpriteScaleY']();},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x406)]=function(_0x5e5d7f,_0x224987,_0x5671c0,_0x3ba038){const _0x371f89=_0x45d586;if(!this[_0x371f89(0x2ce)]())return;if(!this['_distortionSprite'])return;if(this[_0x371f89(0x766)]===_0x5e5d7f&&this['_targetGrowY']===_0x224987)return;this[_0x371f89(0x766)]=_0x5e5d7f,this['_targetGrowY']=_0x224987,this[_0x371f89(0x7b4)]=_0x5671c0,this[_0x371f89(0x1e5)]=_0x5671c0,this[_0x371f89(0x3ff)]=_0x3ba038||_0x371f89(0xa8e),_0x5671c0<=0x0&&(this['_growX']=this['_targetGrowX'],this['_growY']=this[_0x371f89(0x172)]);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x521)]=function(){const _0x2ede41=_0x45d586;if(this[_0x2ede41(0x7b4)]<=0x0)return;if(!this[_0x2ede41(0x5ce)])return;const _0x1d3063=this['_growDuration'],_0x3ecd1b=this[_0x2ede41(0x1e5)],_0xff47ca=this[_0x2ede41(0x3ff)];Imported['VisuMZ_0_CoreEngine']?(this['_growX']=this[_0x2ede41(0x9aa)](this[_0x2ede41(0xa13)],this['_targetGrowX'],_0x1d3063,_0x3ecd1b,_0xff47ca),this[_0x2ede41(0x2e9)]=this[_0x2ede41(0x9aa)](this[_0x2ede41(0x2e9)],this[_0x2ede41(0x172)],_0x1d3063,_0x3ecd1b,_0xff47ca)):(this[_0x2ede41(0xa13)]=(this[_0x2ede41(0xa13)]*(_0x1d3063-0x1)+this['_targetGrowX'])/_0x1d3063,this['_growY']=(this[_0x2ede41(0x2e9)]*(_0x1d3063-0x1)+this[_0x2ede41(0x172)])/_0x1d3063);this[_0x2ede41(0x7b4)]--;if(this[_0x2ede41(0x7b4)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x9af)]=function(){const _0x2b8212=_0x45d586;this[_0x2b8212(0xa13)]=this[_0x2b8212(0x766)],this[_0x2b8212(0x2e9)]=this['_targetGrowY'];},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x8b5)]=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0xbe0)]=function(_0x5cfc36,_0x33ada0,_0x1719df,_0x4ebb46){const _0x3e0256=_0x45d586;if(!this[_0x3e0256(0x2ce)]())return;if(!this[_0x3e0256(0x5ce)])return;if(this[_0x3e0256(0x31f)]===_0x5cfc36&&this[_0x3e0256(0x165)]===_0x33ada0)return;this[_0x3e0256(0x31f)]=_0x5cfc36,this[_0x3e0256(0x165)]=_0x33ada0,this[_0x3e0256(0x342)]=_0x1719df,this['_skewWholeDuration']=_0x1719df,this[_0x3e0256(0x2a0)]=_0x4ebb46||_0x3e0256(0xa8e),_0x1719df<=0x0&&(this[_0x3e0256(0x5ce)]['skew']['x']=this[_0x3e0256(0x31f)],this[_0x3e0256(0x5ce)][_0x3e0256(0x883)]['y']=this['_targetSkewY']);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0xa3b)]=function(){const _0x49d27e=_0x45d586;if(this[_0x49d27e(0x342)]<=0x0)return;if(!this[_0x49d27e(0x5ce)])return;const _0xdb9c20=this[_0x49d27e(0x342)],_0x1b5832=this['_skewWholeDuration'],_0x4f5b52=this[_0x49d27e(0x2a0)],_0x3db04a=this[_0x49d27e(0x5ce)];Imported[_0x49d27e(0xbc5)]?(_0x3db04a[_0x49d27e(0x883)]['x']=this[_0x49d27e(0x9aa)](_0x3db04a[_0x49d27e(0x883)]['x'],this[_0x49d27e(0x31f)],_0xdb9c20,_0x1b5832,_0x4f5b52),_0x3db04a['skew']['y']=this[_0x49d27e(0x9aa)](_0x3db04a[_0x49d27e(0x883)]['y'],this[_0x49d27e(0x165)],_0xdb9c20,_0x1b5832,_0x4f5b52)):(_0x3db04a[_0x49d27e(0x883)]['x']=(_0x3db04a[_0x49d27e(0x883)]['x']*(_0xdb9c20-0x1)+this[_0x49d27e(0x31f)])/_0xdb9c20,_0x3db04a[_0x49d27e(0x883)]['y']=(_0x3db04a[_0x49d27e(0x883)]['y']*(_0xdb9c20-0x1)+this['_targetSkewY'])/_0xdb9c20);this[_0x49d27e(0x342)]--;if(this[_0x49d27e(0x342)]<=0x0)this[_0x49d27e(0xb3e)]();},Sprite_Battler['prototype'][_0x45d586(0xb3e)]=function(){const _0x53576a=_0x45d586;this[_0x53576a(0x5ce)][_0x53576a(0x883)]['x']=this[_0x53576a(0x31f)],this[_0x53576a(0x5ce)][_0x53576a(0x883)]['y']=this[_0x53576a(0x165)];},Sprite_Battler['prototype']['isSkewing']=function(){const _0x341d33=_0x45d586;return this[_0x341d33(0x342)]>0x0;},Sprite_Battler['prototype'][_0x45d586(0x384)]=function(_0x2933e5,_0x22b4af,_0x1200d5,_0x4cfb97){const _0x6421fc=_0x45d586;if(!this['canMove']())return;if(!this[_0x6421fc(0x5ce)])return;if(this[_0x6421fc(0x1ec)]===_0x2933e5)return;this[_0x6421fc(0x1ec)]=_0x2933e5,this[_0x6421fc(0xb25)]=_0x22b4af,this[_0x6421fc(0xb68)]=_0x22b4af,this[_0x6421fc(0x3db)]=_0x1200d5||_0x6421fc(0xa8e),this[_0x6421fc(0x89c)]=_0x4cfb97,this['_angleRevertOnFinish']===undefined&&(this[_0x6421fc(0x89c)]=!![]),_0x22b4af<=0x0&&(this[_0x6421fc(0x562)]=_0x2933e5,this[_0x6421fc(0x89c)]&&(this[_0x6421fc(0x1ec)]=0x0,this[_0x6421fc(0x562)]=0x0));},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x8cf)]=function(){const _0x57fd86=_0x45d586;this[_0x57fd86(0x2bb)](),this[_0x57fd86(0x4c0)]();},Sprite_Battler['prototype']['updateAngleCalculations']=function(){const _0x32bf88=_0x45d586;if(this['_angleDuration']<=0x0)return;const _0x4edab7=this[_0x32bf88(0xb25)],_0x2ba7c8=this[_0x32bf88(0xb68)],_0x30a9f1=this[_0x32bf88(0x3db)];Imported[_0x32bf88(0xbc5)]?this[_0x32bf88(0x562)]=this['applyEasing'](this[_0x32bf88(0x562)],this[_0x32bf88(0x1ec)],_0x4edab7,_0x2ba7c8,_0x30a9f1):this['_currentAngle']=(this[_0x32bf88(0x562)]*(_0x4edab7-0x1)+this['_targetAngle'])/_0x4edab7;this[_0x32bf88(0xb25)]--;if(this['_angleDuration']<=0x0)this[_0x32bf88(0x671)]();},Sprite_Battler['prototype'][_0x45d586(0x671)]=function(){const _0x3a7b10=_0x45d586;this['_currentAngle']=this[_0x3a7b10(0x1ec)],this['_angleRevertOnFinish']&&(this[_0x3a7b10(0x1ec)]=0x0,this[_0x3a7b10(0x562)]=0x0);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x9ae)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x4c0)]=function(){const _0x424cfe=_0x45d586;if(!this['_distortionSprite'])return;const _0x49afb5=this['_currentAngle'],_0x37fc6b=this['scale']['x'],_0xf78633=this[_0x424cfe(0x86c)]['isActor']()?-0x1:0x1;this['_distortionSprite'][_0x424cfe(0x1be)]=_0x49afb5*_0x37fc6b*_0xf78633;const _0x173518=this[_0x424cfe(0x5ce)][_0x424cfe(0x889)]['y'];this['_distortionSprite']['y']=this[_0x424cfe(0x6ac)]*-0.5*(0x2-_0x173518),this[_0x424cfe(0x5ce)]['y']=Math['ceil'](this['_distortionSprite']['y']);const _0x766887=[this[_0x424cfe(0x20e)],this[_0x424cfe(0x82f)],this['_dragonbonesSpriteContainer']];for(const _0x5d281d of _0x766887){if(!_0x5d281d)continue;_0x5d281d['y']=this[_0x424cfe(0x6ac)]*0.5;}this[_0x424cfe(0x5c1)]&&(this['_shadowScaleX']=this[_0x424cfe(0x2a3)]??0x1,this[_0x424cfe(0x81e)]=this[_0x424cfe(0x81e)]??0x1,this[_0x424cfe(0x5c1)][_0x424cfe(0x889)]['x']=this[_0x424cfe(0x5ce)][_0x424cfe(0x889)]['x']*this['_shadowScaleX'],this[_0x424cfe(0x5c1)][_0x424cfe(0x889)]['y']=this['_distortionSprite']['scale']['y']*this['_shadowScaleY']);},VisuMZ[_0x45d586(0x6fe)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x5ae)],Sprite_Actor['prototype'][_0x45d586(0x5ae)]=function(){const _0xa74090=_0x45d586;VisuMZ[_0xa74090(0x6fe)][_0xa74090(0x925)][_0xa74090(0x1b5)](this),VisuMZ['BattleCore']['Settings'][_0xa74090(0x518)][_0xa74090(0xa17)]&&this['createHpGaugeSprite']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x537)]=Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x3b5)],Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x3b5)]=function(){const _0x3b2a72=_0x45d586;VisuMZ[_0x3b2a72(0x6fe)][_0x3b2a72(0xa41)][_0x3b2a72(0x518)]['ShowEnemyGauge']&&this['createHpGaugeSprite'](),VisuMZ[_0x3b2a72(0x6fe)][_0x3b2a72(0x537)][_0x3b2a72(0x1b5)](this);},Sprite_Battler['prototype'][_0x45d586(0x10c)]=function(){const _0x3479b0=_0x45d586;if(!ConfigManager[_0x3479b0(0xb83)])return;if(this[_0x3479b0(0xb62)]===Sprite_SvEnemy)return;const _0x6db36b=VisuMZ['BattleCore'][_0x3479b0(0xa41)]['HpGauge'],_0x3f96f6=new Sprite_HpGauge();_0x3f96f6[_0x3479b0(0x9ea)]['x']=_0x6db36b[_0x3479b0(0x8ad)],_0x3f96f6[_0x3479b0(0x9ea)]['y']=_0x6db36b[_0x3479b0(0x677)],_0x3f96f6[_0x3479b0(0x889)]['x']=_0x3f96f6[_0x3479b0(0x889)]['y']=_0x6db36b[_0x3479b0(0x150)],this['_hpGaugeSprite']=_0x3f96f6,this[_0x3479b0(0x34e)](this['_hpGaugeSprite']),Spriteset_Battle[_0x3479b0(0x5db)]&&BattleManager[_0x3479b0(0x57a)](this[_0x3479b0(0x2e7)]);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xf7)]=Sprite_Battler['prototype'][_0x45d586(0x63f)],Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x63f)]=function(_0x481dcb){const _0x66e56=_0x45d586,_0x3229ca=this['_battler'];VisuMZ[_0x66e56(0x6fe)][_0x66e56(0xf7)][_0x66e56(0x1b5)](this,_0x481dcb),this[_0x66e56(0x91e)](_0x481dcb);if(_0x3229ca!==_0x481dcb)this[_0x66e56(0x844)]();},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x91e)]=function(_0x232d50){const _0x37dcff=_0x45d586;if(!_0x232d50)return;if(!this[_0x37dcff(0x2e7)])return;if(_0x232d50[_0x37dcff(0x7f0)]()){}else{if(_0x232d50[_0x37dcff(0x690)]()){if(this['constructor']===Sprite_SvEnemy&&!_0x232d50[_0x37dcff(0x199)]())return;}}this[_0x37dcff(0x2e7)][_0x37dcff(0x846)](_0x232d50,'hp');},Sprite_Battler['prototype']['hasStaticSvBattler']=function(){const _0x4c4015=_0x45d586;return this[_0x4c4015(0x86c)]&&this['_battler'][_0x4c4015(0xb4d)]();},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x984)]=function(){const _0x4a2ad0=_0x45d586,_0x322430=this[_0x4a2ad0(0x20e)][_0x4a2ad0(0x46a)];if(!_0x322430)return;const _0x17dce0=_0x322430[_0x4a2ad0(0x7ea)];let _0x2b8bf2=_0x322430[_0x4a2ad0(0x6ac)];if(this[_0x4a2ad0(0x86c)]['isDead']()){if(this['_frame'])_0x2b8bf2=Math[_0x4a2ad0(0x61a)](0x0,this[_0x4a2ad0(0x2c3)]['height']-0x4);}this[_0x4a2ad0(0x20e)][_0x4a2ad0(0xa84)](0x0,0x0,_0x17dce0,_0x2b8bf2),this[_0x4a2ad0(0xa84)](0x0,0x0,_0x17dce0,_0x2b8bf2);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x216)]=function(){const _0x3d0148=_0x45d586;if(!this[_0x3d0148(0x86c)])return;if(!this[_0x3d0148(0x2e7)])return;const _0x47f3c0=VisuMZ['BattleCore'][_0x3d0148(0xa41)][_0x3d0148(0x518)],_0xa6dc2d=this[_0x3d0148(0x2e7)];_0xa6dc2d[_0x3d0148(0x3d1)]=this['isVisualHpGaugeDisplayed']();const _0xfe605=_0x47f3c0[_0x3d0148(0x34f)],_0x2bd9f4=_0x47f3c0[_0x3d0148(0x261)];_0xa6dc2d['x']=_0xfe605,_0xa6dc2d['x']+=this[_0x3d0148(0x86c)]['battleUIOffsetX'](),_0xa6dc2d['y']=-this[_0x3d0148(0x6ac)]+_0x2bd9f4,_0xa6dc2d['y']+=this['_battler']['battleUIOffsetY'](),Spriteset_Battle[_0x3d0148(0x5db)]&&SceneManager['_scene']['_spriteset']&&(_0xa6dc2d['x']+=this['x'],_0xa6dc2d['y']+=this['y']);},Sprite_Battler[_0x45d586(0x19f)]['isVisualHpGaugeDisplayed']=function(){const _0x2ed5af=_0x45d586;if(!this[_0x2ed5af(0x86c)])return![];if(this['_battler']['isActor']())return!![];if(this[_0x2ed5af(0x86c)][_0x2ed5af(0x714)]())return![];if(this['opacity']<=0x0)return![];const _0x5521d0=this[_0x2ed5af(0x86c)]['enemy']()[_0x2ed5af(0x34a)];if(_0x5521d0[_0x2ed5af(0x95f)](/<SHOW HP GAUGE>/i))return!![];if(_0x5521d0[_0x2ed5af(0x95f)](/<HIDE HP GAUGE>/i))return![];const _0xed7d8b=VisuMZ[_0x2ed5af(0x6fe)][_0x2ed5af(0xa41)][_0x2ed5af(0x518)];if(_0xed7d8b[_0x2ed5af(0x7f3)]){if(_0xed7d8b[_0x2ed5af(0xb3c)]&&BattleManager['isBattleTest']())return!![];if(this[_0x2ed5af(0x86c)]['_visualHpGauge_JustDied'])return![];return this['_battler'][_0x2ed5af(0x5cd)]();}return!![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x459)]=Sprite_Battler['prototype'][_0x45d586(0x647)],Sprite_Battler['prototype'][_0x45d586(0x647)]=function(){const _0x3fd709=_0x45d586;if(!this[_0x3fd709(0x86c)])return![];if(this['_homeDuration']>0x0)return!![];return VisuMZ[_0x3fd709(0x6fe)][_0x3fd709(0x459)][_0x3fd709(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xb60)]=Sprite_Battler[_0x45d586(0x19f)]['startMove'],Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0xb48)]=function(_0x1fc1e8,_0x351fc1,_0x2469f3){const _0x3a2658=_0x45d586;this[_0x3a2658(0x2ce)]()&&VisuMZ[_0x3a2658(0x6fe)]['Sprite_Battler_startMove'][_0x3a2658(0x1b5)](this,_0x1fc1e8,_0x351fc1,_0x2469f3);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x2ce)]=function(){const _0x5d0513=_0x45d586;if(this[_0x5d0513(0x86c)]&&this[_0x5d0513(0x86c)][_0x5d0513(0x1e3)]())return![];if(this['_battler']&&!this[_0x5d0513(0x86c)][_0x5d0513(0xa48)]())return![];return $gameSystem[_0x5d0513(0x138)]();},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0xa96)]=function(){},Sprite_Battler[_0x45d586(0x19f)]['stepBack']=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x7a8)]=function(){},Sprite_Battler[_0x45d586(0x19f)][_0x45d586(0x4e2)]=function(){const _0x5479bb=_0x45d586,_0x37abb1=VisuMZ[_0x5479bb(0x6fe)][_0x5479bb(0xa41)][_0x5479bb(0x540)],_0x22e45d=this[_0x5479bb(0x86c)]&&this['_battler'][_0x5479bb(0x7f0)]()?0x1:-0x1,_0xf9c12f=this[_0x5479bb(0x5bb)]-this['_homeX']+_0x22e45d*_0x37abb1['FlinchDistanceX'],_0x1b8071=this[_0x5479bb(0x83d)]-this['_homeY']+_0x22e45d*_0x37abb1[_0x5479bb(0x36c)],_0x2cf8cf=_0x37abb1[_0x5479bb(0x8dc)];this['startMove'](_0xf9c12f,_0x1b8071,_0x2cf8cf);},Sprite_Battler[_0x45d586(0x19f)]['startShakeFlinch']=function(_0x2ec768,_0x48419e){const _0x54eba6=_0x45d586,_0x2e94d3=VisuMZ[_0x54eba6(0x6fe)][_0x54eba6(0xa41)]['Actor'];this[_0x54eba6(0x578)]=Math[_0x54eba6(0xb32)]((_0x2e94d3[_0x54eba6(0x4da)]??0x18)*_0x48419e),this['_shakeFlinchPower']=Math[_0x54eba6(0x61a)](this[_0x54eba6(0x986)],_0x2ec768);},Sprite_Battler[_0x45d586(0x19f)]['updateShakeFlinch']=function(){const _0x584f82=_0x45d586,_0x5ee12d=VisuMZ[_0x584f82(0x6fe)][_0x584f82(0xa41)][_0x584f82(0x540)];if(!(_0x5ee12d['ShakeFlinch']??![]))return;if(this['_shakeFlinchDuration']>0x0){const _0x22a750=this[_0x584f82(0x578)];this[_0x584f82(0x986)]=this[_0x584f82(0x986)]*(_0x22a750-0x1)/_0x22a750,this[_0x584f82(0x578)]--,this[_0x584f82(0x578)]<=0x0&&(this[_0x584f82(0x986)]=0x0);}this[_0x584f82(0x986)]>0x0?(this['_mainSprite']['x']=Math[_0x584f82(0x356)](this[_0x584f82(0x986)])*(Math[_0x584f82(0x201)]()<0.5?-0x1:0x1),this[_0x584f82(0x83d)]!==this['y']&&(this[_0x584f82(0x20e)]['y']=this[_0x584f82(0x6ac)]*0.5,this['_mainSprite']['y']+=Math['randomInt'](this['_shakeFlinchPower'])*(Math[_0x584f82(0x201)]()<0.5?-0x1:0x1))):(this[_0x584f82(0x20e)]['x']=0x0,this['_mainSprite']['y']=this['height']*0.5);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x3a1)]=Sprite_Actor[_0x45d586(0x19f)]['initMembers'],Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x2fc)]=function(){const _0x4eed6d=_0x45d586;VisuMZ[_0x4eed6d(0x6fe)][_0x4eed6d(0x3a1)][_0x4eed6d(0x1b5)](this),this[_0x4eed6d(0x7a4)]();},Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x212)]=function(){const _0x4f8c0b=_0x45d586;return this[_0x4f8c0b(0x5ce)]||this['_mainSprite']||this;},VisuMZ[_0x45d586(0x6fe)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x45d586(0x19f)]['moveToStartPosition'],Sprite_Actor[_0x45d586(0x19f)]['moveToStartPosition']=function(){},Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x33e)]=function(_0x2cb071){const _0x39c904=_0x45d586;if(SceneManager[_0x39c904(0x55e)]())return;if(!_0x2cb071)return;if(!_0x2cb071[_0x39c904(0x2ce)]())return;VisuMZ[_0x39c904(0x6fe)][_0x39c904(0x8ac)][_0x39c904(0x1b5)](this);},VisuMZ['BattleCore'][_0x45d586(0xa2d)]=Sprite_Actor[_0x45d586(0x19f)]['setActorHome'],Sprite_Actor[_0x45d586(0x19f)]['setActorHome']=function(_0x223c93){const _0xb27013=_0x45d586;VisuMZ[_0xb27013(0x6fe)][_0xb27013(0xa41)]['Actor'][_0xb27013(0xd5)]?VisuMZ[_0xb27013(0x6fe)][_0xb27013(0xa41)][_0xb27013(0x540)][_0xb27013(0xd5)][_0xb27013(0x1b5)](this,_0x223c93):VisuMZ['BattleCore']['Sprite_Actor_setActorHome']['call'](this,_0x223c93);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x555)]=Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x63f)],Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x63f)]=function(_0x1c646f){const _0xbfca06=_0x45d586;VisuMZ['BattleCore'][_0xbfca06(0x555)][_0xbfca06(0x1b5)](this,_0x1c646f),this[_0xbfca06(0xa14)](_0x1c646f);},Sprite_Actor['prototype']['setBattlerBattleCore']=function(_0x5807ed){const _0x2c0707=_0x45d586;if(!_0x5807ed)return;if(!this[_0x2c0707(0x20e)])return;this[_0x2c0707(0x20e)][_0x2c0707(0x9ea)]['x']=this[_0x2c0707(0x770)]['svBattlerAnchorX'](),this['_mainSprite']['anchor']['y']=this['_actor'][_0x2c0707(0x492)](),this[_0x2c0707(0x718)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xab8)]=Sprite_Actor['prototype']['update'],Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0xae1)]=function(){const _0x1de828=_0x45d586;VisuMZ[_0x1de828(0x6fe)]['Sprite_Actor_update'][_0x1de828(0x1b5)](this),this['_actor']&&(this[_0x1de828(0x161)](),this[_0x1de828(0x160)]());},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xadc)]=Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x673)],Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x673)]=function(){const _0xc77ad9=_0x45d586;VisuMZ[_0xc77ad9(0x6fe)][_0xc77ad9(0xadc)][_0xc77ad9(0x1b5)](this),this[_0xc77ad9(0x20e)]&&this[_0xc77ad9(0x20e)][_0xc77ad9(0x46a)]&&this['_battler']&&(this['_mainSprite'][_0xc77ad9(0x46a)][_0xc77ad9(0xbf0)]!==this['_battler'][_0xc77ad9(0xd2)]()&&(this[_0xc77ad9(0x20e)][_0xc77ad9(0x46a)][_0xc77ad9(0xbf0)]=this[_0xc77ad9(0x86c)][_0xc77ad9(0xd2)]()));},VisuMZ[_0x45d586(0x6fe)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x3dc)],Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x3dc)]=function(){const _0x52f173=_0x45d586;VisuMZ[_0x52f173(0x6fe)][_0x52f173(0x4be)][_0x52f173(0x1b5)](this),this[_0x52f173(0x85c)]();},Sprite_Actor[_0x45d586(0x19f)]['updateShadowBattleCore']=function(){const _0x1c4645=_0x45d586;if(!this[_0x1c4645(0x20e)])return;if(!this[_0x1c4645(0x5c1)])return;this[_0x1c4645(0x718)](),this['updateShadowPosition']();},Sprite_Actor['prototype']['updateStateSprite']=function(){const _0x3379f4=_0x45d586;{this[_0x3379f4(0x96a)][_0x3379f4(0x889)]['x']=0x1/(this[_0x3379f4(0x889)]['x']||0.001),this[_0x3379f4(0x96a)]['scale']['y']=0x1/(this[_0x3379f4(0x889)]['y']||0.001);}{this[_0x3379f4(0x96a)]['x']=0x0,this[_0x3379f4(0x96a)]['y']=-this[_0x3379f4(0x6ac)]-0x20+0x60;const _0x20a661=VisuMZ[_0x3379f4(0x6fe)][_0x3379f4(0xa41)][_0x3379f4(0x540)];this[_0x3379f4(0x96a)]['x']+=_0x20a661[_0x3379f4(0x83e)]??0x0,this[_0x3379f4(0x96a)]['y']+=_0x20a661['StateOverlayOffsetY']??0x0;}},Sprite_Actor[_0x45d586(0x19f)]['updateStyleOpacity']=function(){const _0x33c5eb=_0x45d586;if(!$gameSystem['isSideView']()&&this[_0x33c5eb(0xb62)]===Sprite_Actor){const _0x1ecdb8=Scene_Battle[_0x33c5eb(0x19f)][_0x33c5eb(0x61d)]();[_0x33c5eb(0x915),_0x33c5eb(0x505),_0x33c5eb(0x376),_0x33c5eb(0x70e)][_0x33c5eb(0x840)](_0x1ecdb8)&&(this[_0x33c5eb(0x125)]=0x0);}},Sprite_Actor[_0x45d586(0x19f)]['refreshMotion']=function(){const _0x2dba47=_0x45d586,_0x4fc4f7=this[_0x2dba47(0x770)];if(_0x4fc4f7){if(_0x4fc4f7['_performDamageMotion'])return;const _0x2710f8=_0x4fc4f7[_0x2dba47(0x5f7)]();if(_0x4fc4f7[_0x2dba47(0x917)]()||_0x4fc4f7[_0x2dba47(0x134)]())this[_0x2dba47(0x529)](_0x2dba47(0xab0));else{if(_0x2710f8===0x3)this[_0x2dba47(0x529)]('dead');else{if(_0x2710f8===0x2)this[_0x2dba47(0x529)](_0x2dba47(0xbb7));else{if(this[_0x2dba47(0x7ca)])this[_0x2dba47(0x529)](_0x2dba47(0x942));else{if(_0x4fc4f7['isCharging']())this[_0x2dba47(0x529)]('wait');else{if(_0x4fc4f7[_0x2dba47(0x3e8)]())this[_0x2dba47(0x529)](_0x2dba47(0x9d5));else{if(_0x4fc4f7[_0x2dba47(0x73f)]()||_0x4fc4f7[_0x2dba47(0xa85)]())this['startMotion'](_0x2dba47(0x59d));else{if(_0x2710f8===0x1)this[_0x2dba47(0x529)](_0x2dba47(0x471));else{if(_0x4fc4f7[_0x2dba47(0x3a8)]())this[_0x2dba47(0x529)](_0x2dba47(0xa62));else{if(_0x4fc4f7['isUndecided']())this[_0x2dba47(0x529)](_0x2dba47(0xab0));else _0x4fc4f7[_0x2dba47(0x74c)]()?this[_0x2dba47(0x529)]('wait'):this[_0x2dba47(0x529)](_0x2dba47(0xab0));}}}}}}}}}}},Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x7a8)]=function(){const _0x5d539a=_0x45d586,_0x18ed22=0xa,_0x323d85=0x12c*_0x18ed22,_0x145615=0x1e*_0x18ed22;this[_0x5d539a(0xb48)](_0x323d85,0x0,_0x145615);},Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x9a0)]=function(){const _0x3656b2=_0x45d586;Sprite_Battler[_0x3656b2(0x19f)]['onMoveEnd'][_0x3656b2(0x1b5)](this);},Sprite_Actor[_0x45d586(0x19f)]['motionSpeed']=function(){const _0x276264=_0x45d586;return Sprite_Battler[_0x276264(0x591)];},Sprite_Weapon[_0x45d586(0x19f)]['animationWait']=function(){const _0x37672a=_0x45d586;return Sprite_Battler[_0x37672a(0x591)];},Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x3f9)]=function(){},Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x95d)]=function(){},Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0xbe6)]=function(){const _0x3e3c06=_0x45d586;if(this['_motion']&&++this['_motionCount']>=this['motionSpeed']()){if(this[_0x3e3c06(0x565)][_0x3e3c06(0x45f)])this[_0x3e3c06(0xa71)]=(this[_0x3e3c06(0xa71)]+0x1)%0x4;else{if(this[_0x3e3c06(0xa71)]<0x2)this[_0x3e3c06(0xa71)]++;else{const _0x394d04=this[_0x3e3c06(0x770)];if(_0x394d04)_0x394d04[_0x3e3c06(0x124)]=undefined;this[_0x3e3c06(0x67b)]();}}this[_0x3e3c06(0xad8)]=0x0;}},Sprite_Actor[_0x45d586(0x19f)]['forceMotion']=function(_0x99c5f2){const _0x2fcd54=_0x45d586;if(this[_0x2fcd54(0x86c)]&&this[_0x2fcd54(0x86c)][_0x2fcd54(0x1e3)]()){this[_0x2fcd54(0x565)]=Sprite_Actor[_0x2fcd54(0x764)][_0x2fcd54(0x898)];return;}const _0x336673=Sprite_Actor[_0x2fcd54(0x764)][_0x99c5f2];this[_0x2fcd54(0x565)]=_0x336673,this['_motionCount']=0x0,this[_0x2fcd54(0xa71)]=0x0;},Sprite_Actor[_0x45d586(0x19f)]['forceWeaponAnimation']=function(_0x3199f1){const _0x284a81=_0x45d586;if(this['hasStaticSvBattler']())return;this['adjustWeaponSpriteOffset'](),this[_0x284a81(0x91c)][_0x284a81(0x846)](_0x3199f1),this[_0x284a81(0x770)][_0x284a81(0x17b)]();},Sprite_Actor[_0x45d586(0x19f)]['adjustWeaponSpriteOffset']=function(){const _0x15dfad=_0x45d586;let _0x4a14cd=-0x10,_0x393447=this[_0x15dfad(0x6ac)]*0.5;const _0x21091c=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x4a4498=this[_0x15dfad(0x86c)]['traitObjects']()[_0x15dfad(0x7a1)](_0x1eff8f=>_0x1eff8f&&_0x1eff8f[_0x15dfad(0x34a)][_0x15dfad(0x95f)](_0x21091c)?Number(RegExp['$1']):0x0),_0x45059a=this[_0x15dfad(0x86c)]['traitObjects']()[_0x15dfad(0x7a1)](_0x2f4294=>_0x2f4294&&_0x2f4294['note']['match'](_0x21091c)?Number(RegExp['$2']):0x0);_0x4a14cd=_0x4a4498[_0x15dfad(0x25e)]((_0x3b6011,_0x1b9280)=>_0x3b6011+_0x1b9280,_0x4a14cd),_0x393447=_0x45059a[_0x15dfad(0x25e)]((_0x2d35e5,_0x49644a)=>_0x2d35e5+_0x49644a,_0x393447),this['_weaponSprite']['x']=_0x4a14cd,this[_0x15dfad(0x91c)]['y']=_0x393447,this[_0x15dfad(0x91c)][_0x15dfad(0xae1)]();},Sprite_Weapon[_0x45d586(0x19f)][_0x45d586(0x846)]=function(_0x55447b){const _0x467462=_0x45d586;this[_0x467462(0x98a)]=_0x55447b,this[_0x467462(0x82c)]=-0x1,this['_pattern']=0x0,this[_0x467462(0xfd)](),this[_0x467462(0x341)]();},Sprite_Actor['prototype'][_0x45d586(0x78d)]=function(){},Sprite_Actor[_0x45d586(0x19f)]['stepForward']=function(){const _0x585955=_0x45d586,_0x38938e=VisuMZ[_0x585955(0x6fe)][_0x585955(0xa41)][_0x585955(0x205)],_0x184d43=_0x38938e[_0x585955(0xbf9)],_0x47c8fa=_0x38938e[_0x585955(0x761)],_0x353917=_0x38938e['StepDuration'];this['startMove'](-_0x184d43,-_0x47c8fa,_0x353917);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x793)]=Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x341)],Sprite_Actor[_0x45d586(0x19f)]['updateFrame']=function(){const _0x218c85=_0x45d586;this['hasStaticSvBattler']()?this[_0x218c85(0x984)]():(this['applyFreezeMotionFrames'](),VisuMZ[_0x218c85(0x6fe)][_0x218c85(0x793)]['call'](this));},Sprite_Actor[_0x45d586(0x19f)][_0x45d586(0x9ab)]=function(){const _0xc5ce15=_0x45d586;if(this[_0xc5ce15(0x86c)]&&this[_0xc5ce15(0x86c)]['_freezeMotionData']){const _0x2a755e=this['_battler'][_0xc5ce15(0x981)];this[_0xc5ce15(0x565)]=Sprite_Actor[_0xc5ce15(0x764)][_0x2a755e[_0xc5ce15(0x18b)]],this[_0xc5ce15(0xa71)]=_0x2a755e[_0xc5ce15(0x850)];const _0xfd36c1=this[_0xc5ce15(0x91c)];_0xfd36c1[_0xc5ce15(0x5c8)](_0x2a755e[_0xc5ce15(0x877)],_0x2a755e[_0xc5ce15(0x850)]),this[_0xc5ce15(0x392)]();}},Sprite_Weapon['prototype'][_0x45d586(0x5c8)]=function(_0x385149,_0x46822d){const _0x2c38a5=_0x45d586;this[_0x2c38a5(0x98a)]=_0x385149,this[_0x2c38a5(0x82c)]=-Infinity,this[_0x2c38a5(0xa71)]=_0x46822d,this[_0x2c38a5(0xfd)](),this[_0x2c38a5(0x341)]();},Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x2fc)]=function(){const _0xd685ce=_0x45d586;Sprite_Battler[_0xd685ce(0x19f)]['initMembers'][_0xd685ce(0x1b5)](this),this['_enemy']=null,this['_appeared']=![],this[_0xd685ce(0x80f)]='',this[_0xd685ce(0x146)]=0x0,this[_0xd685ce(0x1ed)]=null,this[_0xd685ce(0xb7f)]=0x0,this[_0xd685ce(0x98c)]=0x0,this['createMainSprite'](),this['createStateIconSprite']();},VisuMZ[_0x45d586(0x6fe)]['Sprite_Enemy_update']=Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0xae1)],Sprite_Enemy[_0x45d586(0x19f)]['update']=function(){const _0x37db55=_0x45d586;VisuMZ[_0x37db55(0x6fe)]['Sprite_Enemy_update'][_0x37db55(0x1b5)](this),this[_0x37db55(0x718)](),this['updateNameTempVisibility']();},Sprite_Enemy[_0x45d586(0x19f)]['createMainSprite']=function(){const _0x2068f6=_0x45d586;this[_0x2068f6(0x20e)]=new Sprite(),this[_0x2068f6(0x20e)][_0x2068f6(0x9ea)]['x']=0.5,this[_0x2068f6(0x20e)][_0x2068f6(0x9ea)]['y']=0x1,this['addChild'](this[_0x2068f6(0x20e)]),this[_0x2068f6(0x7a4)]();},Sprite_Enemy['prototype'][_0x45d586(0x212)]=function(){const _0x29c2f3=_0x45d586;return this[_0x29c2f3(0x5ce)]||this[_0x29c2f3(0x20e)]||this;},Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0xfd)]=function(_0x515a1c){const _0x648f63=_0x45d586;this[_0x648f63(0x46a)]=new Bitmap(0x1,0x1);if(this['hasSvBattler']()){const _0x1e0cb8=this['_enemy'][_0x648f63(0x7a2)]();this[_0x648f63(0x46a)]=new Bitmap(_0x1e0cb8[_0x648f63(0x7ea)],_0x1e0cb8[_0x648f63(0x6ac)]),this[_0x648f63(0x20e)][_0x648f63(0x46a)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x648f63(0x138)]()){const _0x36a45e=ImageManager[_0x648f63(0xa5b)](_0x515a1c);_0x36a45e[_0x648f63(0x6d7)](this[_0x648f63(0x18f)]['bind'](this,_0x36a45e));}else{const _0x2ade82=ImageManager[_0x648f63(0x52f)](_0x515a1c);_0x2ade82[_0x648f63(0x6d7)](this['onStaticEnemyBitmapLoad'][_0x648f63(0x856)](this,_0x2ade82));}}},Sprite_Enemy['prototype'][_0x45d586(0x18f)]=function(_0x9d69be){const _0x593e23=_0x45d586;this[_0x593e23(0x20e)]['bitmap']=_0x9d69be,this[_0x593e23(0x46a)]=new Bitmap(_0x9d69be[_0x593e23(0x7ea)],_0x9d69be['height']);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x21c)]=Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x69b)],Sprite_Enemy['prototype'][_0x45d586(0x69b)]=function(_0x309cf7){const _0x4ad80f=_0x45d586;this[_0x4ad80f(0x20e)]&&this[_0x4ad80f(0x20e)][_0x4ad80f(0x69b)](_0x309cf7);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x3f4)]=Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0xb1a)],Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0xb1a)]=function(){const _0x419b0a=_0x45d586;this[_0x419b0a(0xad2)]()?VisuMZ[_0x419b0a(0x6fe)][_0x419b0a(0x3f4)][_0x419b0a(0x1b5)](this):(this[_0x419b0a(0x1d3)]=!this[_0x419b0a(0xa46)][_0x419b0a(0x714)](),!this[_0x419b0a(0x1d3)]&&(this[_0x419b0a(0x125)]=0x0));},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x7c5)]=Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x460)],Sprite_Enemy['prototype'][_0x45d586(0x460)]=function(){const _0x5a416f=_0x45d586;if(this[_0x5a416f(0xad2)]())VisuMZ[_0x5a416f(0x6fe)][_0x5a416f(0x7c5)][_0x5a416f(0x1b5)](this);},Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x341)]=function(){const _0x20d5eb=_0x45d586;Sprite_Battler['prototype']['updateFrame'][_0x20d5eb(0x1b5)](this);const _0x49f1d3=this[_0x20d5eb(0x212)]()||this;if(!_0x49f1d3)return;!_0x49f1d3[_0x20d5eb(0x46a)]&&(_0x49f1d3['bitmap']=new Bitmap(this[_0x20d5eb(0x7ea)]||0x1,this[_0x20d5eb(0x6ac)]||0x1));if(this[_0x20d5eb(0x1ed)]===_0x20d5eb(0x28c))this['_mainSprite']['setFrame'](0x0,0x0,this['_mainSprite'][_0x20d5eb(0x7ea)]||0x1,this[_0x20d5eb(0xb7f)]);else{let _0x2f0f50=0x1;if(_0x49f1d3&&_0x49f1d3['bitmap'])_0x2f0f50=_0x49f1d3['bitmap'][_0x20d5eb(0x7ea)];let _0x500e80=0x1;if(this[_0x20d5eb(0x46a)])_0x500e80=this[_0x20d5eb(0x46a)][_0x20d5eb(0x6ac)];_0x49f1d3[_0x20d5eb(0xa84)](0x0,0x0,_0x2f0f50,_0x500e80);}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x1c5)]=Sprite_Enemy['prototype'][_0x45d586(0x2b2)],Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x2b2)]=function(){const _0x3bd0be=_0x45d586;if(this[_0x3bd0be(0xad2)]())VisuMZ['BattleCore'][_0x3bd0be(0x1c5)][_0x3bd0be(0x1b5)](this);},Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x647)]=function(){const _0x4538e2=_0x45d586;return Sprite_Battler[_0x4538e2(0x19f)]['isMoving'][_0x4538e2(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x9d0)]=Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x161)],Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x161)]=function(){const _0x16861b=_0x45d586;VisuMZ[_0x16861b(0x6fe)]['Sprite_Enemy_updateStateSprite'][_0x16861b(0x1b5)](this),this[_0x16861b(0xae9)]();},Sprite_Enemy[_0x45d586(0x19f)]['updateStateSpriteBattleCore']=function(){const _0x2efedf=_0x45d586,_0x32167b=VisuMZ[_0x2efedf(0x6fe)]['Settings'][_0x2efedf(0x401)];if(_0x32167b[_0x2efedf(0x1de)]&&!_0x32167b[_0x2efedf(0x975)]){this[_0x2efedf(0x5ee)][_0x2efedf(0x125)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this[_0x2efedf(0x5ee)]['x']+=this[_0x2efedf(0x86c)][_0x2efedf(0x42d)]();let _0x2bf434=0x1;if(this[_0x2efedf(0x46a)])_0x2bf434=this[_0x2efedf(0x46a)][_0x2efedf(0x6ac)];this[_0x2efedf(0x5ee)]['y']=-_0x2bf434-this['_stateIconSprite'][_0x2efedf(0x6ac)]-0x4,this[_0x2efedf(0x5ee)]['y']+=this[_0x2efedf(0x86c)]['battleUIOffsetY'](),this[_0x2efedf(0x5ee)][_0x2efedf(0x889)]['x']=0x1/(this[_0x2efedf(0x889)]['x']||0.001),this[_0x2efedf(0x5ee)][_0x2efedf(0x889)]['y']=0x1/(this[_0x2efedf(0x889)]['y']||0.001),this[_0x2efedf(0x199)]()&&(this[_0x2efedf(0x82f)]['_stateSprite'][_0x2efedf(0x889)]['x']=-0x1/(this[_0x2efedf(0x889)]['x']||0.001),this[_0x2efedf(0x82f)][_0x2efedf(0x96a)][_0x2efedf(0x889)]['y']=0x1/(this[_0x2efedf(0x889)]['y']||0.001));},Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x769)]=function(){const _0x4dff5b=_0x45d586;this[_0x4dff5b(0x86c)]&&this[_0x4dff5b(0x86c)]['updateNameTempVisibility']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x2f4)]=Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x63f)],Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x63f)]=function(_0x3981ed){const _0x5ed0e2=_0x45d586;VisuMZ[_0x5ed0e2(0x6fe)]['Sprite_Enemy_setBattler'][_0x5ed0e2(0x1b5)](this,_0x3981ed),this[_0x5ed0e2(0x28e)](_0x3981ed);},Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x28e)]=function(_0x1b8de5){const _0x35a91b=_0x45d586;!this[_0x35a91b(0x82f)]&&(this[_0x35a91b(0x82f)]=new Sprite_SvEnemy(_0x1b8de5),this['attachSpritesToDistortionSprite']()),this[_0x35a91b(0x82f)][_0x35a91b(0x63f)](_0x1b8de5);},Sprite_Enemy['prototype'][_0x45d586(0x199)]=function(){const _0x5729a5=_0x45d586;return this['_enemy']&&this[_0x5729a5(0xa46)][_0x5729a5(0x199)]();},Sprite_Enemy['prototype'][_0x45d586(0xad2)]=function(){const _0x305801=_0x45d586;return this[_0x305801(0x199)]()?this[_0x305801(0xa46)][_0x305801(0xad2)]():!![];},Sprite_Enemy[_0x45d586(0x19f)]['refreshMotion']=function(){const _0x566cdd=_0x45d586;this[_0x566cdd(0x199)]()&&this['_svBattlerSprite'][_0x566cdd(0x67b)]();},Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0xbc6)]=function(_0x3df50f){const _0x321407=_0x45d586;if(this[_0x321407(0x199)]())this[_0x321407(0x82f)][_0x321407(0xbc6)](_0x3df50f);},Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0x4d7)]=function(_0x29e17d){const _0x1c952a=_0x45d586;if(this['hasSvBattler']())this[_0x1c952a(0x82f)][_0x1c952a(0x4d7)](_0x29e17d);},Sprite_Enemy[_0x45d586(0x19f)][_0x45d586(0xa96)]=function(){const _0x2b037a=_0x45d586,_0x2c5c15=VisuMZ[_0x2b037a(0x6fe)][_0x2b037a(0xa41)]['ActionSequence'],_0x1ecb8f=_0x2c5c15[_0x2b037a(0xbf9)],_0x469269=_0x2c5c15[_0x2b037a(0x761)],_0x4b5b4a=_0x2c5c15[_0x2b037a(0x9ee)];this['startMove'](_0x1ecb8f,_0x469269,_0x4b5b4a);};function Sprite_SvEnemy(){const _0x36ca01=_0x45d586;this[_0x36ca01(0x6d1)](...arguments);}Sprite_SvEnemy[_0x45d586(0x19f)]=Object[_0x45d586(0x838)](Sprite_Actor[_0x45d586(0x19f)]),Sprite_SvEnemy[_0x45d586(0x19f)][_0x45d586(0xb62)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(_0x510a93){const _0x509e8c=_0x45d586;Sprite_Actor[_0x509e8c(0x19f)][_0x509e8c(0x6d1)][_0x509e8c(0x1b5)](this,_0x510a93),this['scale']['x']=-0x1,this[_0x509e8c(0x96a)][_0x509e8c(0x889)]['x']=-0x1;},Sprite_SvEnemy[_0x45d586(0x19f)][_0x45d586(0x858)]=function(){},Sprite_SvEnemy['prototype']['moveToStartPosition']=function(){},Sprite_SvEnemy['prototype'][_0x45d586(0x2a1)]=function(_0x17813b){},Sprite_SvEnemy[_0x45d586(0x19f)]['updateShadow']=function(){},Sprite_SvEnemy['prototype'][_0x45d586(0x20d)]=function(){},Sprite_SvEnemy['prototype'][_0x45d586(0x161)]=function(){const _0x3c0b2a=_0x45d586;this[_0x3c0b2a(0x96a)][_0x3c0b2a(0x3d1)]=![];},Sprite_SvEnemy[_0x45d586(0x19f)][_0x45d586(0x673)]=function(){const _0x3b4b67=_0x45d586;Sprite_Battler['prototype'][_0x3b4b67(0x673)][_0x3b4b67(0x1b5)](this);const _0x2b8304=this[_0x3b4b67(0x770)][_0x3b4b67(0xb90)]();this[_0x3b4b67(0x80f)]!==_0x2b8304&&(this[_0x3b4b67(0x80f)]=_0x2b8304,this[_0x3b4b67(0x20e)][_0x3b4b67(0x46a)]=ImageManager[_0x3b4b67(0x8b1)](_0x2b8304)),this[_0x3b4b67(0x20e)]&&this['_mainSprite'][_0x3b4b67(0x46a)]&&this[_0x3b4b67(0x86c)]&&(this[_0x3b4b67(0x20e)][_0x3b4b67(0x46a)][_0x3b4b67(0xbf0)]!==this['_battler'][_0x3b4b67(0xd2)]()&&(this[_0x3b4b67(0x20e)][_0x3b4b67(0x46a)]['smooth']=this[_0x3b4b67(0x86c)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x45d586(0x19f)]['retreat']=function(){},Sprite_SvEnemy[_0x45d586(0x19f)][_0x45d586(0xb48)]=function(_0x57c017,_0x21e011,_0x2a42fa){const _0xf1ab5d=_0x45d586;if(this['parent'])this['parent'][_0xf1ab5d(0xb48)](_0x57c017,_0x21e011,_0x2a42fa);},Sprite_SvEnemy[_0x45d586(0x19f)][_0x45d586(0x67b)]=function(){const _0x1faac2=_0x45d586,_0x51aa0d=this['_actor'];if(_0x51aa0d){const _0x15cf1c=_0x51aa0d[_0x1faac2(0x5f7)]();if(_0x51aa0d['isInputting']()||_0x51aa0d['isActing']())this[_0x1faac2(0x529)](_0x1faac2(0xab0));else{if(_0x15cf1c===0x3)this[_0x1faac2(0x529)]('dead');else{if(_0x15cf1c===0x2)this[_0x1faac2(0x529)](_0x1faac2(0xbb7));else{if(_0x51aa0d[_0x1faac2(0x3e8)]())this[_0x1faac2(0x529)](_0x1faac2(0x9d5));else{if(_0x51aa0d['isGuard']()||_0x51aa0d[_0x1faac2(0xa85)]())this[_0x1faac2(0x529)](_0x1faac2(0x59d));else{if(_0x15cf1c===0x1)this['startMotion']('abnormal');else{if(_0x51aa0d[_0x1faac2(0x3a8)]())this[_0x1faac2(0x529)](_0x1faac2(0xa62));else _0x51aa0d[_0x1faac2(0x8a4)]()?this[_0x1faac2(0x529)](_0x1faac2(0xab0)):this['startMotion'](_0x51aa0d[_0x1faac2(0x7a2)]()[_0x1faac2(0x6d6)]||_0x1faac2(0xab0));}}}}}}}},Sprite_SvEnemy[_0x45d586(0x19f)][_0x45d586(0x487)]=function(){const _0x284adb=_0x45d586;return this['parent']?this[_0x284adb(0x35b)][_0x284adb(0xa9e)]===0x0&&this['parent'][_0x284adb(0x9ad)]===0x0:!![];},Sprite_SvEnemy['prototype'][_0x45d586(0x40e)]=function(){},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x5fa)]=Sprite_Animation[_0x45d586(0x19f)]['targetSpritePosition'],Sprite_Animation['prototype'][_0x45d586(0xb9e)]=function(_0x30e4f5){const _0x28d5e9=_0x45d586;return _0x30e4f5[_0x28d5e9(0x5ce)]?this[_0x28d5e9(0x4ea)](_0x30e4f5):VisuMZ[_0x28d5e9(0x6fe)][_0x28d5e9(0x5fa)]['call'](this,_0x30e4f5);},Sprite_Animation[_0x45d586(0x19f)][_0x45d586(0x4ea)]=function(_0x3cafa7){const _0x30909b=_0x45d586;let _0x4b933b=_0x3cafa7['x'],_0x58e8fe=_0x3cafa7['y'],_0x18ae49=_0x3cafa7[_0x30909b(0x6ac)],_0x3ff8c1=_0x3cafa7[_0x30909b(0x5ce)][_0x30909b(0x889)]['y'];_0x3cafa7['x']=_0x3cafa7[_0x30909b(0x5bb)]+_0x3cafa7[_0x30909b(0xaf8)](),_0x3cafa7['y']=_0x3cafa7[_0x30909b(0x83d)]+_0x3cafa7[_0x30909b(0x36a)](),_0x3cafa7[_0x30909b(0x6ac)]*=_0x3ff8c1;let _0x207b8a=VisuMZ['BattleCore'][_0x30909b(0x5fa)][_0x30909b(0x1b5)](this,_0x3cafa7);return _0x3cafa7['x']=_0x4b933b,_0x3cafa7['y']=_0x58e8fe,_0x3cafa7[_0x30909b(0x6ac)]=_0x18ae49,_0x207b8a;},VisuMZ[_0x45d586(0x6fe)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV[_0x45d586(0x19f)][_0x45d586(0x8f0)],Sprite_AnimationMV['prototype'][_0x45d586(0x8f0)]=function(){const _0x49cd83=_0x45d586;VisuMZ[_0x49cd83(0x6fe)]['Sprite_AnimationMV_updatePosition'][_0x49cd83(0x1b5)](this);if(!SceneManager[_0x49cd83(0x81a)]())return;if(this[_0x49cd83(0x7dd)]['position']===0x3)this['x']=Math[_0x49cd83(0x31d)](Graphics['boxWidth']/0x2),this['y']=Math[_0x49cd83(0x31d)](Graphics[_0x49cd83(0x56c)]/0x2);else{if(this['battleStatusSprite'])return;}},Sprite_Damage[_0x45d586(0x19f)][_0x45d586(0x958)]=function(_0x5197a5){const _0x52dea4=_0x45d586,_0x3cf95d=_0x5197a5[_0x52dea4(0x6a5)]()||_0x5197a5[_0x52dea4(0x116)]();if(_0x3cf95d[_0x52dea4(0xa1f)]||_0x3cf95d[_0x52dea4(0x67e)])this[_0x52dea4(0x3bc)]=0x0,this[_0x52dea4(0x37c)]();else{if(_0x3cf95d['hpAffected'])this[_0x52dea4(0x3bc)]=_0x3cf95d[_0x52dea4(0x541)]>=0x0?0x0:0x1,this['createDigits'](_0x3cf95d[_0x52dea4(0x541)]);else _0x5197a5[_0x52dea4(0x45d)]()&&_0x3cf95d[_0x52dea4(0x7fe)]!==0x0&&(this['_colorType']=_0x3cf95d[_0x52dea4(0x7fe)]>=0x0?0x2:0x3,this[_0x52dea4(0x5ad)](_0x3cf95d[_0x52dea4(0x7fe)]));}_0x3cf95d[_0x52dea4(0x1f7)]&&this[_0x52dea4(0x5b5)]();},Sprite_Damage[_0x45d586(0x19f)][_0x45d586(0x846)]=function(_0x16c590){},Sprite_Damage['prototype'][_0x45d586(0x5ad)]=function(_0x5249f8){const _0x3a417d=_0x45d586;let _0x2e2997=this['createString'](_0x5249f8);const _0x44bb80=this['fontSize'](),_0x6fccf=Math[_0x3a417d(0x85a)](_0x44bb80*0.75);for(let _0x44faa1=0x0;_0x44faa1<_0x2e2997[_0x3a417d(0x1c9)];_0x44faa1++){const _0xb8f067=this[_0x3a417d(0xd0)](_0x6fccf,_0x44bb80);_0xb8f067[_0x3a417d(0x46a)][_0x3a417d(0x81b)](_0x2e2997[_0x44faa1],0x0,0x0,_0x6fccf,_0x44bb80,'center'),_0xb8f067['x']=(_0x44faa1-(_0x2e2997[_0x3a417d(0x1c9)]-0x1)/0x2)*_0x6fccf,_0xb8f067['dy']=-_0x44faa1;}},Sprite_Damage[_0x45d586(0x19f)][_0x45d586(0x686)]=function(_0x47912a){const _0x2542c5=_0x45d586;let _0x4988cf=Math[_0x2542c5(0xb5e)](_0x47912a)[_0x2542c5(0xb22)]();this[_0x2542c5(0x2ee)]()&&(_0x4988cf=VisuMZ[_0x2542c5(0x860)](_0x4988cf));const _0x1a2eb8=VisuMZ[_0x2542c5(0x6fe)][_0x2542c5(0xa41)][_0x2542c5(0x244)];let _0x481904='',_0x6b7d6f='';switch(this[_0x2542c5(0x3bc)]){case 0x0:_0x481904=_0x1a2eb8[_0x2542c5(0x59c)]||_0x2542c5(0x372),_0x6b7d6f=TextManager['hp'];if(_0x47912a===0x0)_0x481904='%1';break;case 0x1:_0x481904=_0x1a2eb8[_0x2542c5(0x855)]||_0x2542c5(0x2b3),_0x6b7d6f=TextManager['hp'];break;case 0x2:_0x481904=_0x1a2eb8[_0x2542c5(0x5a3)]||'-%1\x20MP',_0x6b7d6f=TextManager['mp'];break;case 0x3:_0x481904=_0x1a2eb8[_0x2542c5(0x74f)]||_0x2542c5(0x624),_0x6b7d6f=TextManager['mp'];break;}return _0x481904[_0x2542c5(0x534)](_0x4988cf,_0x6b7d6f)[_0x2542c5(0x379)]();},Sprite_Damage[_0x45d586(0x19f)][_0x45d586(0x2ee)]=function(){const _0x4730ae=_0x45d586;return Imported[_0x4730ae(0xbc5)]?VisuMZ[_0x4730ae(0xa37)][_0x4730ae(0xa41)][_0x4730ae(0x9d9)]['DigitGroupingDamageSprites']:![];},Sprite_Damage[_0x45d586(0x19f)]['setupCriticalEffect']=function(){const _0xe70a26=_0x45d586,_0x1c2968=VisuMZ[_0xe70a26(0x6fe)][_0xe70a26(0xa41)]['Damage'];_0x1c2968[_0xe70a26(0x48f)]=_0x1c2968['CriticalColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x1c2968[_0xe70a26(0x48f)][_0xe70a26(0x25a)](0x0),this[_0xe70a26(0xa2f)]=_0x1c2968[_0xe70a26(0xb4a)]||0x1;},Sprite_Damage['prototype'][_0x45d586(0x3e4)]=function(_0x34f80a,_0x4b33a8){const _0x301064=_0x45d586;this[_0x301064(0xa7e)]=_0x4b33a8[_0x301064(0xa36)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x301064(0x9cc)](this[_0x301064(0xa7e)]),this[_0x301064(0xa2f)]=_0x4b33a8['flashDuration']||0x0;const _0x3b9b8f=this[_0x301064(0x5a2)](),_0x1a2c5a=Math['floor'](_0x3b9b8f*0x1e),_0x4bfbfa=this['createChildSprite'](_0x1a2c5a,_0x3b9b8f);_0x4bfbfa['bitmap'][_0x301064(0x614)]=ColorManager['getColor'](_0x4b33a8[_0x301064(0x614)]),_0x4bfbfa[_0x301064(0x46a)][_0x301064(0x81b)](_0x34f80a,0x0,0x0,_0x1a2c5a,_0x3b9b8f,_0x301064(0x735)),_0x4bfbfa['dy']=0x0;},Sprite_Damage[_0x45d586(0x19f)]['setupIconTextPopup']=function(_0x2d9adf,_0x28e861,_0x34121c){const _0x2c1365=_0x45d586,_0x2830ab=Math['max'](this['fontSize'](),ImageManager['iconHeight']),_0x108c0d=Math[_0x2c1365(0x85a)](_0x2830ab*0x1e),_0x1070c9=this[_0x2c1365(0xd0)](_0x108c0d,_0x2830ab),_0x258249=ImageManager[_0x2c1365(0x217)]/0x2,_0x163919=_0x1070c9[_0x2c1365(0x46a)]['measureTextWidth'](_0x28e861+'\x20');_0x1070c9['bitmap'][_0x2c1365(0x614)]=ColorManager[_0x2c1365(0xb9c)](_0x34121c[_0x2c1365(0x614)]),_0x1070c9['bitmap'][_0x2c1365(0x81b)](_0x28e861,_0x258249,0x0,_0x108c0d-_0x258249,_0x2830ab,'center');const _0x2eb5be=Math[_0x2c1365(0x31d)]((_0x2830ab-ImageManager['iconHeight'])/0x2),_0x2c344a=_0x108c0d/0x2-ImageManager[_0x2c1365(0x217)]-_0x163919/0x2+_0x258249/0x2,_0x329647=ImageManager[_0x2c1365(0xbef)](_0x2c1365(0x737)),_0x3088bd=ImageManager[_0x2c1365(0x217)],_0x5db8bb=ImageManager[_0x2c1365(0x539)],_0x2ae53c=_0x2d9adf%0x10*_0x3088bd,_0x5ce339=Math[_0x2c1365(0x85a)](_0x2d9adf/0x10)*_0x5db8bb;_0x1070c9['bitmap']['blt'](_0x329647,_0x2ae53c,_0x5ce339,_0x3088bd,_0x5db8bb,_0x2c344a,_0x2eb5be),this['_flashColor']=_0x34121c[_0x2c1365(0xa36)]||[0x0,0x0,0x0,0x0],this[_0x2c1365(0xa7e)]=JsonEx[_0x2c1365(0x9cc)](this[_0x2c1365(0xa7e)]),this[_0x2c1365(0xa2f)]=_0x34121c[_0x2c1365(0xbe7)]||0x0,_0x1070c9['dy']=0x0,_0x34121c[_0x2c1365(0x62b)]&&(_0x1070c9['x']+=_0x34121c[_0x2c1365(0x62b)]),_0x34121c[_0x2c1365(0x110)]&&(_0x1070c9['dy']+=_0x34121c[_0x2c1365(0x110)]);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xbab)]=Sprite_Damage[_0x45d586(0x19f)]['createChildSprite'],Sprite_Damage[_0x45d586(0x19f)]['createChildSprite']=function(_0x5df1ff,_0x530d9e){const _0x2a3987=_0x45d586;return _0x530d9e=Math[_0x2a3987(0x31d)](_0x530d9e*1.2),VisuMZ[_0x2a3987(0x6fe)][_0x2a3987(0xbab)][_0x2a3987(0x1b5)](this,_0x5df1ff,_0x530d9e);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x1e9)]=Sprite_StateIcon[_0x45d586(0x19f)][_0x45d586(0x341)],Sprite_StateIcon[_0x45d586(0x19f)][_0x45d586(0x341)]=function(){const _0x5a8792=_0x45d586;VisuMZ['BattleCore'][_0x5a8792(0x1e9)][_0x5a8792(0x1b5)](this),this['opacity']=this[_0x5a8792(0x26b)]>0x0?0xff:0x0;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x6a3)]=Sprite_Weapon[_0x45d586(0x19f)]['loadBitmap'],Sprite_Weapon[_0x45d586(0x19f)][_0x45d586(0xfd)]=function(){const _0x3655c9=_0x45d586;VisuMZ[_0x3655c9(0x6fe)][_0x3655c9(0x6a3)][_0x3655c9(0x1b5)](this),this[_0x3655c9(0x46a)]&&(this[_0x3655c9(0x46a)][_0x3655c9(0xbf0)]=VisuMZ[_0x3655c9(0x6fe)][_0x3655c9(0xa41)][_0x3655c9(0x540)][_0x3655c9(0xa6b)]);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x137)]=Sprite_Gauge[_0x45d586(0x19f)][_0x45d586(0x9c7)],Sprite_Gauge[_0x45d586(0x19f)]['smoothness']=function(){const _0x56753c=_0x45d586;return this['_statusType']!==_0x56753c(0x4e0)?VisuMZ[_0x56753c(0x6fe)][_0x56753c(0xa41)]['HpGauge'][_0x56753c(0x481)]??0x14:VisuMZ[_0x56753c(0x6fe)]['Sprite_Gauge_smoothness'][_0x56753c(0x1b5)](this);};function Sprite_GaugeRate(){const _0x2c8767=_0x45d586;this[_0x2c8767(0x6d1)](...arguments);}Sprite_GaugeRate[_0x45d586(0x19f)]=Object[_0x45d586(0x838)](Sprite_Gauge[_0x45d586(0x19f)]),Sprite_GaugeRate['prototype']['constructor']=Sprite_GaugeRate,Sprite_GaugeRate[_0x45d586(0x19f)]['initialize']=function(){const _0xb84050=_0x45d586;Sprite_Gauge[_0xb84050(0x19f)]['initialize']['call'](this),this[_0xb84050(0x3d7)]=![];},Sprite_GaugeRate[_0x45d586(0x19f)][_0x45d586(0x39b)]=function(_0x7ad8cc,_0x347f31){const _0x3f9b40=_0x45d586;this[_0x3f9b40(0x3d7)]=!![],Sprite_Gauge[_0x3f9b40(0x19f)]['updateTargetValue'][_0x3f9b40(0x1b5)](this,_0x7ad8cc,_0x347f31),this[_0x3f9b40(0x3d7)]=![];},Sprite_GaugeRate[_0x45d586(0x19f)]['currentValue']=function(){const _0x48ecd0=_0x45d586;if(this[_0x48ecd0(0x3d7)]){const _0x2607a7=Sprite_Gauge[_0x48ecd0(0x19f)][_0x48ecd0(0x995)][_0x48ecd0(0x1b5)](this),_0xe7b698=this[_0x48ecd0(0x5b8)]();if(_0xe7b698<=0x0)return _0x48ecd0(0x58d);return Math[_0x48ecd0(0x85a)](_0x2607a7/_0xe7b698*0x64)+'%';}else return Sprite_Gauge[_0x48ecd0(0x19f)][_0x48ecd0(0x995)][_0x48ecd0(0x1b5)](this);},Sprite_GaugeRate['prototype'][_0x45d586(0x32c)]=function(){const _0x1ad454=_0x45d586,_0x5d6bed=Sprite_Gauge[_0x1ad454(0x19f)][_0x1ad454(0x995)][_0x1ad454(0x1b5)](this),_0x246750=this[_0x1ad454(0x5b8)]();if(_0x246750<=0x0)return'100%';return Math[_0x1ad454(0x85a)](_0x5d6bed/_0x246750*0x64)+'%';},Sprite_GaugeRate['prototype'][_0x45d586(0x509)]=function(){const _0x5cf99c=_0x45d586;if(this[_0x5cf99c(0x5b8)]()<=0x0)return 0x1;return Sprite_Gauge[_0x5cf99c(0x19f)]['gaugeRate']['call'](this);},Sprite_GaugeRate[_0x45d586(0x19f)][_0x45d586(0xbba)]=function(){const _0x33f7b7=_0x45d586;if(this[_0x33f7b7(0x5b8)]()<=0x0)return ColorManager[_0x33f7b7(0x3c7)]();return Sprite_Gauge[_0x33f7b7(0x19f)]['valueColor'][_0x33f7b7(0x1b5)](this);},Sprite_GaugeRate['prototype'][_0x45d586(0x1b1)]=function(){const _0x207c46=_0x45d586;this[_0x207c46(0x2eb)]==='mp'&&this['currentMaxValue']()<=0x0&&($gameTemp[_0x207c46(0x5c6)]=!![]),Sprite_Gauge[_0x207c46(0x19f)]['redraw'][_0x207c46(0x1b5)](this),$gameTemp[_0x207c46(0x5c6)]=undefined;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x234)]=ColorManager['mpColor'],ColorManager[_0x45d586(0x8c9)]=function(_0x28ab85){const _0x3c4795=_0x45d586;if($gameTemp[_0x3c4795(0x5c6)])return ColorManager[_0x3c4795(0x3c7)]();return VisuMZ[_0x3c4795(0x6fe)]['ColorManager_mpColor'][_0x3c4795(0x1b5)](this,_0x28ab85);};function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge['prototype']=Object['create'](Sprite_Gauge[_0x45d586(0x19f)]),Sprite_HpGauge[_0x45d586(0x19f)][_0x45d586(0xb62)]=Sprite_HpGauge,Sprite_HpGauge[_0x45d586(0x19f)]['initialize']=function(){const _0x5705da=_0x45d586;Sprite_Gauge[_0x5705da(0x19f)][_0x5705da(0x6d1)][_0x5705da(0x1b5)](this);},Sprite_HpGauge['prototype'][_0x45d586(0x557)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x45d586(0x1b1)]=function(){const _0x5cba2e=_0x45d586;this[_0x5cba2e(0x46a)][_0x5cba2e(0xb8d)]();const _0x5efe9e=this[_0x5cba2e(0x995)]();!isNaN(_0x5efe9e)&&this[_0x5cba2e(0x6f6)]();};function _0x455f(){const _0x4900b3=['ActSeq_Movement_FaceDirection','onActorCancel','_performActionEnd','EscapeFailureJS','isRightInputMode','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','ActionAnimation','command236','ActSeq_Mechanics_RemoveBuffDebuff','PreStartBattleJS','4442999yjnAdT','UNTITLED','Spriteset_Battle_updateActors','clearTargetBattlerKey','usePremadeActionSequence','helpWindowRectBorderStyle','walk','ActSeq_Mechanics_EmulateSkillEffect','ActSeq_Mechanics_StbRemoveExcessActions','ActSeq_Horror_NoiseRemove','_indent','CastCertain','isAnyProjectilePresent','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','Sprite_Actor_update','updateAttachedSprites','Scene_Battle_windowAreaHeight','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','\x5cHEXCOLOR<%1>','ShowHide','isBreakStunned','paramName','_homeY','ActSeq_Animation_ChangeBattlePortrait','isFastForward','save','Window_BattleLog_displayEvasion','ActSeq_Inject_WaitForInjectAni','Game_Actor_makeActionList','uiMenuStyle','Scene_Battle_onEnemyOk','stypeId','isAlwaysVisible','setBattlePortrait','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','gaugeLineHeight','battleback1Name','_nameTempVisibleDuration','Window_BattleLog_popBaseLine','Game_Action_executeMpDamage','allowCollapse','icons','Scene_Battle_selectNextCommand','members','15jBPpzZ','battleCamera','_motionCount','isTpb','minimumStayDuration','blt','Sprite_Actor_updateBitmap','ActSeq_Impact_Desaturate','performRecovery','getWtypeIdWithName','_buttonKey','update','evade','hitsHealFmt','waitCount','right','onDisabledPartyCommandSelection','displayFailure','Scene_Battle_onActorOk','updateStateSpriteBattleCore','split','startOpacity','checkCacheKey','updateHomeMove','_eventId','Scene_Options_maxCommands','Status\x20is\x20currently\x20normal.','PreEndActionJS','slices','Game_Action_applyGlobal','disarmLifeSteal','isActiveTpbReady','animationNextDelay','visualCutinPortraitType','extraPositionX','action','commandAutoBattle','Game_Temp_requestBalloon','statusText','refreshActorPortrait','SwitchCritical','makeTargetsBattleCore','Sprite_Battler_update','WaitForEntrance','<CUSTOM\x20ACTION\x20SEQUENCE>','adjustFlippedBattlefield','Scene_Battle_createPartyCommandWindow','QUESTION','SvBattlerSolo-%1-%2','endVisualCutin','Setting','addAutoBattleCommands','applyVariance','▼%1','ALL_ACTORS','statusTextAutoBattleStyle','origin','moveBattlerHomeToPoint','concat','registerCommand','moveBattlerToPoint','WaitCount','hpRate','calcWindowHeight','SyncBuffExpire','commandOptions','sliceMax','drawItemImageXPStyle','initVisibility','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','Game_Interpreter_command283','EasingType','maxWidth','setBattlerMotionTrailData','addGuardCommand','VisuMZ_2_DragonbonesUnion','toString','ComboWindow','displayEvasion','_angleDuration','states','pauseInjectAnimation','isTpbCharged','canUse','checkBattleEnd','scrollTo','Game_Interpreter_command301','onHomeMoveEnd','CounterPlayback','performAttackSlot','cancelMpLifeSteal','NameAlwaysHidden','ceil','addChildToBack','ActSeq_Grid_AddPassiveStatesToNode','totalHealFmt','isSkill','isIncludedInEnemyWindow','onEnemyCancel','Skill-%1-%2','_actorCommandWindow','Window_BattleLog_performSubstitute','BTestBypass','animationBaseDelay','onSkewEnd','commandNameWindowDrawText','isBattleTest','Radius','_createEffectsContainer','StatusWindowAttachmentFront','portraitFlipHorz','openBattleActorWindow','createBattleBalloon','CriticalHitRate','startMove','setBattlerFacePoint','CriticalDuration','min','extraHeight','hasStaticSvBattler','isConfused','ALL\x20SKILLS','StatusWindow_RectJS','setBattleZoom','ActSeq_Movement_FaceTarget','Spriteset_Battle_createBattleField','innerHeight','testApply','alignBattleCoreDamageSprite','CheckSkillCommandShowSwitches','Mirror','pagedown','clearRect','helpWindowRect','battleMembers','damage','abs','Intensity','Sprite_Battler_startMove','lifeSteaItem','constructor','adjustPosition_ScaleToFit','Normal','textBaseline','setActiveWeaponSet','isForAll','_angleWholeDuration','_lastEnemy','refreshStatusWindow','actorCommandCancelTPB','hide','_targetOffsetY','debuffHelpFmt','ShowPopup','setupBattleCoreData','_showWeapon','updateWeather','_armorPenetration','Sprite_SvEnemy','ActSeq_Mechanics_TextPopup','isAnyoneMoving','actor','canAttackBattleCore','damageRate','targetsForOpponents','isNonSubmenuCancel','hitsDmgFmt','drawActorBuffRates','_methods','_effectDuration','setupShockwaveImpactFilter','isEscapeCommandEnabled','lifeStealRate','visualHpGauge','resetNameTempVisibility','WaitForSpin','missle','ActSeq_Inject_AnimationEnd','selectNextCommand','ActSeq_Impact_TimeStop','placeActorName','onEncounter','paramBuffRate','clear','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','VisuMZ_3_FrontviewBattleUI','svBattlerName','cutinExit','checkSubstitute','Game_Party_addActor','_tempActor','SvBattlerMass-%1-%2','targetBattlerContainerOpacity','Parse_Notetags_Action','jsCritRateAsTarget','process_VisuMZ_BattleCore_TraitObject_Notetags','getLastHpDamage','statesMaxWidth','getColor','ActSeq_Mechanics_CustomDmgFormula','targetSpritePosition','collapseType','Targets','_tempBattler','_onceParallelInterpreters','_damagePopupArray','_endingBattle','atbInterrupt','startInput','_opacityWholeDuration','displayedParams','item','toUseBoostPoints','Sprite_Damage_createChildSprite','_targetHomeY','current\x20target','processCancel','updateWaitMode','ActSeq_Camera_FocusPoint','drawItemImage','_updateCursorArea','PostDamageAsTargetJS','Scene_Battle_createEnemyWindow','Scene_Battle_createActorCommandWindowIBS','displayCounter','sleep','Game_Action_apply','ShowSubstitute','valueColor','ShowPortraitsBorderStyle','getAttackMotionSlot','TpGaugeOffsetX','WaitForJump','stateRate','_actionBattlers','basicGaugesY','processRefresh','commandRemember','itemEffectRecoverMp','VisuMZ_0_CoreEngine','forceMotion','gaugeBackColor','ActSeq_Impact_ColorBreak','EnemyOffsetY','_enemyNameContainer','skillTypes','PreRegenerateJS','MaxLines','loadCharacter','message2','validTargets','isBypassDamageCap','startWeaponAnimation','createDistortionSprite','ActionSkillMsg1','ActSeq_Grid_PullToTargetNode','DistanceX','VisuMZ_3_ActSeqProjectiles','isETB','dead\x20actors','pages','Window_BattleEnemy_show','autoBattle','AutoBattleCancel','Angle','applyDamageCaps','startSkew','_animationContainer','ActSeq_BattleLog_WaitForNewLine','adjustPosition_ScaleDown','CurrentTurn','_skewY','updateMotionCount','flashDuration','ActSeq_Horror_TVCreate','currentSymbol','colSpacing','ActSeq_Animation_ShowAnimationJS','PopupDuration','_homeEasing','VoiceLineType','loadSystem','smooth','battleAngle','enemyHpGaugeRate','ArRedRate','Param','playOnceParallelInterpreter','font','updateStatusWindowPosition','buffNameFmt','StepDistanceX','updateForceAction','ActSeq_Movement_MoveToPoint','createChildSprite','AutoBattleRect','battlerSmoothImage','removeOnceParallelInterpreter','Window_BattleLog_displayMiss','HomePosJS','front\x20center','powerDownColor','attackTimesAdd','ShowAddedBuff','_createCursorSprite','Letter','onBattleStartBattleCore','becomeSTBExploited','NewPopupBottom','_effectsContainer','ActSeq_Motion_FreezeMotionFrame','PostDamageJS','Game_Battler_onBattleEnd','FaceDirection','isAttack','_visualHpGauge_JustDied','MpGaugeOffsetX','cutinEnter','LIGHT\x20BULB','updatePhase','contentsBack','Scene_Battle_onActorCancel','canInput','_interpreter','BattleSystemCTB','performTpbActiveCheckSwitch','minimumHits','inBattleStatusWindowRect','BattleManager_checkSubstitute','ANGLE','ParseItemNotetags','callOptions','checkExtendTroopCompatibility','Sprite_Battler_setBattler','maxTp','Game_Actor_setup','updatePositionBattleCore','inputting','casting','loadBitmap','SkillID','ActSeq_Inject_AnimationPauseResume','Scene_Battle_createCancelButton','setStateTooltipBattler','mainSpriteWidth','characterName','drawEnemyBattler','Scene_Map_updateCallMenu','increaseHits','processOk','createEnemySprite','ActSeq_BattleLog_AddText','isArray','isPartyCommandWindowDisabled','createHpGaugeSprite','ExtraSettings','positionOffsetY','magicSkills','offsetY','Game_Action_needsSelection','regionId','dragonbonesData','_battlePortrait','faceRect','result','JS\x20BATTLE\x20VICTORY','getAttackWeaponAnimationId','push','svBattlerShadowVisible','addBattleCoreAutoBattleStartupCommand','arPenRate','updateKeyboardKeys','isAnyoneInjectAnimating','ShakeFlinchPower','_handlers','Sprite_Battleback_adjustPosition','charged','textAlignment','_performDamageMotion','opacity','visualCutinPortraitIndex','SkillItemMiddleLayout','createHelpWindow','ActSeq_Movement_WaitForSkew','Window_BattleLog_displayMpDamage','createPageButtons','VisuMZ_3_BattleAI','updateStateIconSprite','Enemy-%1-%2','ActSeq_Movement_HomeReset','AttackAnimation','requestAnimation','setClickHandler','startAction','isActing','requestMotion','PARTY','Sprite_Gauge_smoothness','isSideView','selectSymbol','isCertainHit','unchanged','mmp','ParseArmorNotetags','isBattlerTargeted','StartTurnWait','clearActiveWeaponSlot','weaponTypes','Window_BattleLog_performCounter','NameOffsetY','cancel','_ptbActionCost','_battlerHue','_opacityEasing','BattleManager_inputtingAction','enemyNames','autoBattleWindowRect','Game_Action_itemHit','createActorCommandWindow','tpbActorSwitchConditionsMet','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','maxCols','Scale','Scene_Battle_createAllWindows','AGI','createBorderStylePortraitSprite','ActSeq_Mechanics_EnemyEscape','isTriggered','buff','_targetIndex','turnCount','Scene_Map_launchBattle','setBlendColor','move','Game_Troop_expTotal','_battlerContainer','setupRgbSplitImpactFilter','MultiTarget','updateStyleOpacity','updateStateSprite','HelpFight','AnimationID','createActionSequenceProjectile','_targetSkewY','AddOption','forceSelect','displayReflection','playReflection','waitForAnimation','_animationSprites','onEscapeFailure','processPostBattleCommonEvents','removeActor','exit','isSubjectValidForAnyoneSelect','canAddSkillCommand','_targetGrowY','ShowCounterWait','_targetOpacity','ESCAPE','Window_BattleLog_refresh','setValue','DefaultStyle','JS\x20%1APPLY\x20%2','formula','clearWeaponAnimation','_lineHeight','prepareCustomActionSequence','createAnimationContainer','currentExt','targetObject','dead\x20opponents','isChangingOpacity','portraitFilename','getSkillIdWithName','ActSeq_Mechanics_EmulateItemEffect','LIGHT','Game_Action_makeTargets','Targets2','parallaxScrollXinvertEnemy','attackMotions','motionType','createBattleFieldBattleCore','filters','itemCri','onStaticEnemyBitmapLoad','fadeShiftX','checkShowHideSkillNotetags','isAnyoneInjectAniPrepping','_enemySprites','commandNameWindowDrawBackground','alive\x20enemies','applyBattleCoreHitRateJS','Exploited','3564723uRWzph','hasSvBattler','Rate','targetObjects','makeBattleCommand','deathStateId','selectNextCommandTpb','prototype','ActorCmd','meetsUsableItemConditions','JS\x20ESCAPE\x20SUCCESS','itemEffectAddAttackState','cameraOffsetDuration','getBattlePortraitOffsetY','playOnceParallelTroopPage','displayCritical','isDrain','NextTurn','selectAllEnemies','isAnyoneSkewing','ActionEnd','parallaxScrollYinvertEnemy','Window_ItemList_maxCols','ActSeqImpact','getStypeIdWithName','redraw','Armor-%1-%2','buffValueFmt','changeAtbChargeTime','call','updateRefresh','cancelHpLifeSteal','clearOnceParallelInterpreters','adjustPosition_ScaleUp','value1','PreStartTurnJS','battleSkew','CmdIconFight','angle','_enemyID','isHiddenSkill','_preemptive','declareGlobalVariables','ComboWindow_RectJS','setTargetBattlerKey','Sprite_Enemy_updateBossCollapse','Scene_Battle_skillWindowRect','makeActions','isItem','length','Window_BattleLog_performActionEnd','ActSeq_Element_AddElements','guardSkillId','\x5cI[%2]\x5cC[16]%1\x5cC[0]','_subject','_targetBattlerKey','setBattleCameraPoint','inBattle','selectLast','_appeared','StateID','SWEAT','swapEnemyIDs','BgType','_homeWholeDuration','loadOtherActorImages','playBattleVoice','isAutoBattleCommandAdded','SvMotionIdleSolo-%1-%2','attackStatesRate','NameAttachStateIcon','ActSeq_Motion_WaitMotionFrame','battleAnimation','equipSlots','debuffColor','isDead','bgType','_growWholeDuration','loadWindowskin','HelpSkillType','Scene_Map_initialize','Sprite_StateIcon_updateFrame','FUNC','ActSeq_Mechanics_StateTurnsChangeTo','_targetAngle','_effectType','ActSeq_Mechanics_CtbSpeed','Game_Battler_performEvasion','auto','NameFontSize','enemyShowParametersIfDefeated','canSingleOrMultipleSelect','ActSeq_Mechanics_ActionEffect','displayChangedBuffs','needsActorInputCancel','critical','ForceDeath','getParamBuffAndStateRate','param','arRedRate','linkSprite','TextAlign','Direction','expTotal','CmdTextAutoBattle','random','_executeHpDamage','_list','BARE\x20HANDS','ActionSequence','isMagicSkill','Game_Actor_equips','isAnyoneSpinning','isQueueOptionsMenu','getSpecificBattlerKeyTarget','Shadow','callUpdateHelp','updateShadowPosition','_mainSprite','_back1Sprite','filterArea','startActorSelection','mainSprite','_uiContainer','_pageupButton','CmdIconStatus','updateHpGaugePosition','iconWidth','command301','ActSeq_Impact_ShockwaveCenterTargets','ActSeq_Grid_ClearPassiveStatesFromNode','Window_ActorCommand_setup','Sprite_Enemy_setHue','itemHeight','processHandling','endAnimation','ShowTpDmg','MotionAni','sortEnemies','BattlebackScale','Game_Action_isForDeadFriend','troop','requestBattleBalloon','updateScale','getMenuImage','filter','performJump','▲%1','Sprite_Battler_initMembers','ActionEndUpdate','jsAccuracyAsTarget','BattleManager_cancelActorInput','ReflectPlayback','opacitySpeed','pause','_forcedHomeX','ColorManager_mpColor','isTimeActive','2373478eHIAVv','_targetY','removeState','Window_BattleLog_performAction','bitmapWidth','ARRAYEVAL','_cursorArea','itemLineRect','version','itemHit','changeTextColor','passiveText','alive\x20friends\x20not\x20target','ActSeq_Impact_MotionTrailCreate','Damage','all\x20enemies','updateLastTarget','emerge','BattleEndEvent','shouldDisperseDamage','%1StartBattleJS','checkShowHideSwitchNotetags','ActSeq_Grid_AddTriggerToNodeJS','USER-DEFINED\x203','startPartyCommandSelection','clearBattleCoreData','setBackgroundType','fadeShiftY','battlerShadowScaleY','setStateTurns','isDamagePopupRequested','ActSeq_Set_TargetActionSet','performWeaponAnimation','PointJS','lastBattleSkill','addAutoBattleCommand','slice','checkTpbInputClose','autoBattleStart','%1▼','reduce','cameraClamp','enemyShowParametersIfBattleTest','OffsetY','repositionCancelButtonBorderStyle','_jumpWholeDuration','startActorCommandSelection','alive\x20battlers\x20not\x20target','BattleDefeatJS','type','_regionBattleback1','alterChange','hitText','_iconIndex','4027976IPQoOA','battleBalloon','ActSeq_Mechanics_BtbGain','USER-DEFINED\x201','createBattleFieldContainer','drawTurnsRemaining','portraitFlipVert','isBorderPortraitSpriteVisible','MeleeDistance','animation','opponentsUnit','makeCommandList','battleJump','Actor-%1-%2','Window_BattleLog_performCollapse','Scene_Battle_itemWindowRect','_endBattle','ActSeq_BattleLog_Refresh','stepBack','Sprite_Battler_updateMain','svActorHorzCells','VisuMZ_4_CombatLog','compatibilityVisible','HelpEscape','refreshBattlerMotions','updateBattlebackBitmap','isActionSelectionValid','_padding','clearFreezeMotion','windowPadding','undecided','onBattleStart','bossCollapse','_baseTexture','setSvBattlerSprite','_attackAnimationId','ActSeq_Movement_WaitForFloat','refresh','isPlaytest','canEscape','BattleManager_endAction','_windowLayer','Window_PartyCommand_initialize','_battleBalloonSprites','setHelpWindowItem','getTraitSetKeys','applyGlobal','maxBattleMembers','ActSeq_Movement_Scale','battlerShadowScaleX','partyCommandWindowRectDefaultStyle','isForOpponent','_skewEasing','setActorHome','damageStyle','_shadowScaleX','turns','ActSeq_Impact_MotionBlurScreen','isCancelled','drawActorIcons','autoRemovalTiming','CriticalHitMultiplier','_battleCoreBattleStartEvent','toLowerCase','SlotID','WaitCount2','ScaleUp','_blendColor','%1-%2','PreStartActionJS','updateBossCollapse','+%1','Game_Action_isForOne','_requestRefresh','ActSeq_Impact_ZoomBlurPoint','actionEffect','makeDamageValue','TpbGaugeOffsetX','CommandWidth','updateAngleCalculations','BattleManager_updatePhase','isAppeared','createInnerPortrait','_enemies','alterActionCostPTB','BattleManager_setup','ApplyImmortal','_frame','BattleManager_isTpbMainPhase','PreDamage%1JS','optDisplayTp','waitForMovement','updateBorderSprite','sprite','RevertAngle','AutoBattle','isSkillItemWindowsMiddle','ActSeq_Element_NullElements','canMove','BattleManager_checkBattleEnd','DamageDisplay','uiInputPosition','ActSeq_Mechanics_ArmorPenetration','ActSeq_BattleLog_Clear','drawItemImageListStyle','JS\x20ESCAPE\x20FAILURE','stateHelpFmt','setImmortal','glitch','Game_Enemy_transform','EndBattlePopups','Game_Temp_initialize','EnemyOffsetX','addStatusCommand','ActSeq_Cutin_WaitForExit','CmdIconAutoBattle','Game_Interpreter_terminate','drawItemImagePortraitStyle','VisualCutinEffect','revertTpbCachedActor','clearForcedGameTroopSettingsBattleCore','updateBattlebackBitmap2','STATUS','_hpGaugeSprite','maxItems','_growY','CheckActSeqProjectileVersion','_statusType','performMoveToTargets','addShowHpGaugeCommand','useDigitGrouping','isBigCharacter','_wtypeIDs','createKeyJS','LifeStealRegExp','JS\x20%1START\x20BATTLE','Sprite_Enemy_setBattler','makeAutoBattleActions','applyResultSwitches','StatusWindowSkinFilename','ActSeq_Movement_Spin','negativeHpLifeSteal','damageOffsetY','commandName','initMembers','drawBuffs','clearMotion','VisuMZ_3_ActSeqCamera','addImmortal','createBattleUIOffsetY','index','BattleManager_processAbort','face','getDragonbones','JS\x20%1START\x20TURN','updateJump','ForceRandom','_immortal','alterType','drawSingleSkillCost','description','_buttonText','CheckVisibleSkillNotetags','clearBattlerMotionTrailData','_visibleDuration','ActSeq_Mechanics_AddBuffDebuff','needsSelection','addBattlerAspect','some','VisuMZ_4_BreakShields','getEnemyIdWithName','isCancelTriggered','numRepeats','battleSys','angleDuration','skillItemWindowRectBorderStyle','customFontFace','round','isDeathStateAffected','_targetSkewX','1:1','DamageFlat','ActSeq_Camera_Reset','Window_BattleLog_displayCurrentState','Game_Interpreter_updateWaitMode','HP_Flat','_flipScaleX','Game_Action_isForRandom','???','ActSeq_Mechanics_EmulateAttackEffect','Window_BattleLog_performDamage','ActSeq_Mechanics_RemoveState','currentDisplayedValue','ActSeq_Weapon_NextActiveWeapon','makeActionListAutoAttack','useItem','padding','_jumpDuration','ActSeq_Mechanics_StbExtraAction','_lastAction','partyCommandWindowRect','PreDamageJS','setBattleAngle','addedBuffs','ActSeq_Mechanics_PtbConvert','selectNextActor','makeTurnsText','Buffs','Scene_Battle_startEnemySelection','normalIcon','moveToStartPositionBattleCore','Game_BattlerBase_allIconsIBS','StatusWindowAttachmentBackOffsetX','updateFrame','_skewDuration','%1\x20%2','updateAction','turn','ActSeq_Inject_AnimationStart','showPortraits','performShakeFlinch','createSeparateDamagePopups','note','_targetFloatHeight','pageOffsetY','CriticalHitFlat','addChild','OffsetX','createTroopNote','CmdTextAlign','ActSeq_Cutin_EndVisualCutinEffectType','All\x20Enemies','addEscapeCommand','_totalDamage','randomInt','StatusWindowSkinHide','drawActorGraphic','actorCommandWindowRect','VisuMZ_3_BattleVoices','parent','VisuMZ_3_WeaknessDisplay','BattleManager_makeActionOrders','AutoBattleOK','front\x20base','attackAnimationId2','_battleField','startInBattleStatus','AddHpGaugeOption','isForFriendBattleCore','battleMove','CheckVisibleSwitchNotetags','Window_SkillList_maxCols','Sprite_Battler_setHome','clearBattleRefreshRequest','extraPositionY','makeUniqueNames','FlinchDistanceY','7OSfCeM','canGuard','ActSeq_Grid_PushFromTargetNode','displaySubstitute','target','-%1','InBattleStatus','ActSeq_Projectile_Picture','processEnemyModeTouchBattleCore','portrait','needsSelectionBattleCore','battleCameraData','trim','not\x20focus','_drawTextBody','createMiss','delay','Scene_Battle_isTimeActiveIBS','ActSeq_Weapon_SetActiveWeapon','evalDamageFormulaBattleCore','frontviewSpriteY','removeHorrorEffect','jump','startSpin','drawingAreaWidth','_currentActor','_commonEventKey','all\x20targets','itemTextAlign','_waitMode','ActSeq_Motion_PerformAction','invokeAction','temporaryVisibile','setupFont','isForOpponentBattleCore','startFloat','smoothSelect','adjustWeaponSpriteOffset','_stypeIDs','contents','ARRAYFUNC','Game_Action_evalDamageFormula','BattleSystemSTB','svActorVertCells','waitForEffect','ActSeq_Mechanics_Collapse','updateTargetValue','pageButtons','isNegativeLifeSteal','CommonEventID','updateCounter','requestFauxAnimation','Sprite_Actor_initMembers','StyleON','performCastAnimation','isClicked','jsScaleToFit','addActor','BattleManager_invokeCounterAttack','isDying','getItemDamageAmountLabelBattleCore','Scene_ItemBase_applyItem','HitRate','subject','drawActorName','damagePopupOffsetY','restore','displayAffectedStatus','clearFreezeMotionForWeapons','_commonEventQueue','updateShakeFlinch','USER-DEFINED\x204','createStateIconSprite','Window_BattleLog_clear','textWidth','Game_BattlerBase_addNewState','_regionBattleback2','PerformAction','actorCommandSingleSkill','_colorType','DefaultSoftScaler','lastFilename','_itemWindow','ActSeq_Animation_ShowAnimation','SceneManager_push','makeStateHelpText','ParseActorNotetags','ActSeq_Horror_GlitchCreate','_statusWindow','invokeCounterAttack','normalColor','power','setReturnWindow','isPreviousScene','WtypeId','battleCommands','updateOpacity','_additionalSprites','changeBattlebacks','getFullActionsPTB','visible','LUK','statusWindowRectDefaultStyle','Game_Battler_performActionStart','eraseState','performAttack','_updateTargetValue','isBusy','applyBattleCoreJS','paintOpacity','_angleEasing','updateShadow','skillId','applyGuard','displayBattleCoreTransitionErrorMsg','addSkillTypeCommand','mainSpriteScaleY','EXCLAMATION','Game_Interpreter_PluginCommand','setupTextPopup','WeaponTypeID','process_VisuMZ_BattleCore_jsFunctions','base','isChanting','alive\x20opponents\x20not\x20target','battlerName','ext','clearHorrorEffects','VisuMZ_3_VisualCutinEffect','ArRedFlat','ActSeq_Mechanics_WaitForEffect','ActSeq_Movement_FaceJsPoint','onBattleEndBattleCore','Game_Enemy_setup','ANNOYED','Sprite_Enemy_initVisibility','canUseItemCommand','_back2Sprite','Amp','setBattlerFlip','setupMotion','initBattleCore','CmdIconOptions','startInjectAnimation','_hue','callNextMethod','_growEasing','Class-%1-%2','Enemy','_commandNameWindow','isAnyoneFloating','Scene_Battle_initialize','icon','startGrow','createEnemyNames','isAnyoneChangingOpacity','performCounter','DestinationJS','regenerateAllBattleCore','createDamageContainer','_borderPortraitSprite','updateFlip','_battleBalloonQueue','applyForcedGameTroopSettingsBattleCore','HP_Rate','Game_Troop_setup','surprise','drawEnemyName','JS\x20%1END\x20BATTLE','paramValueByName','applyItem','Immortal','noise','buffHelpFmt','ShowCounter','Parse_Notetags_HelpDescription','contentsOpacity','skills','AllowRandomSpeed','_cache','getLastPluginCommandInterpreter','focus','addDebuff','_allTargets','EscapeFail','setupBattleCoreAspects','ShowMpDmg','createEnemies','launchBattle','isForOneBattleCore','updateHelp','ActSeq_Zoom_Reset','battleUIOffsetX','top','isSpriteVisible','skillWindowRect','addCombatLogCommand','ActSeq_Set_FinishAction','Opacity','startJump','Balloon','battleUIOffsetY','Sprite_Battler_damageOffsetY','bitmapHeight','_enemySprite','growBattler','hardDamageCap','HITTYPE_PHYSICAL','positionOffsetX','commandSymbol','setupNegativeImpactFilter','BattleVictoryJS','applyHardDamageCap','TPB','ActSeq_Mechanics_SwapWeapon','ActSeq_Zoom_WaitForZoom','softDamageCapRate','BravePoints','mhp','clearElementChanges','Game_BattlerBase_isStateResist','_lastActor','findTargetSprite','createPartyCommandWindowBattleCore','removeBuffsAuto','GRID\x20MOVE','ConvertActionSequenceTarget','spriteId','playEnemyAttack','_tpbState','JS\x20BATTLE\x20DEFEAT','BattleManager_endBattle','ARRAYSTRUCT','commandStyle','AsTarget','findSymbolExt','Sprite_Battler_isMoving','removeBuff','changeAtbCastTime','nextActor','isAlive','_createDamageContainer','loop','updateCollapse','ParseAllNotetags','logActionList','BattleManager_endAction_ComboWindow','createAutoBattleWindow','_floatWholeDuration','startDamagePopup','%1RegenerateJS','getCommonEventIdWithName','VisuMZ_3_BoostAction','bitmap','missile','TpbGaugeOffsetY','setupChild','EscapeSuccessJS','drawItemStatusXPStyle','swing','abnormal','gradientFillRect','setAttack','removeBattleBalloon','createLowerLayer','Game_Action_makeDamageValueDisperse','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','makeTargetSprites','IconIndex','command357','StatusWindowAttachmentBackOffsetY','_homeX','snapForBackground','onEscapeSuccess','ActSeq_Angle_Reset','ActSeq_Mechanics_PtbFullHalfAction','AniDuration','svShadow','MAXMP','EscapeSuccess','reserveCommonEvent','createAnimationSprite','inHomePosition','allBattleMembers','States','innerWidth','makeTargets','findIndex','addFightCommand','battleZoom','CriticalColor','addOnceParallelInterpreter','processAbort','svBattlerAnchorY','command119','pageOffsetX','Variable','helpAreaBottom','Game_Action_setAttack','cancelTargetSelectionVisibility','\x5cI[%1]\x5cC[%3]%2','ChargeRate','iconIndex','Defeat','effects','Item-%1-%2','Mute','coreEngineRepositionEnemies','process_VisuMZ_BattleCore_PreBattleCommonEvent','drawItem','Reveal','Scene_Battle_commandEscape','enemyId','setLastBattleSkill','processTouch','_cacheTextWidth','addNormalStatus','initBattlePortrait','collapse','playCancel','symbol','criticalHitRate','ActSeq_Projectile_Animation','PrioritySortActive','setCommonEvent','isForAnyoneFocusOpponents','JSON','_autoBattleWindow','_text','Window_BattleStatus_initialize','parseLocalizedText','HelpItem','opacityStart','tone','children','updateInterpreter','currentClass','Sprite_Actor_updateShadow','VisuMZ_2_BattleSystemFTB','applyAngleChange','Game_Action_isForAliveFriend','setActionState','_flinched','Mechanics','CreateCommonEventKeys','guardHpLifeSteal','showEnemyAttackAnimation','BattleManager_initMembers','TargetLocation','Targets1','isOptionsCommandAdded','\x5cI[%1]%2','isAutoBattle','_reflectionTarget','active','drawIcon','requestDragonbonesAnimation','silentHomeMove','_baseLineStack','getBattleMembers','ActSeq_Movement_WaitForSpin','addBattlerStates','forceWeaponAnimation','startIcon','9843738gTXWok','ShakeFlinchDuration','createInBattleStatusWindow','HelpStatus','performActionStart','CastMagical','createDamageSprite','time','battleDisplayText','stepFlinch','setHelpWindow','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','Game_BattlerBase_initMembers','select','remove','%1EndBattleJS','arPenFlat','targetDistortionSpritePosition','damageCounterWindowRect','updateCancel','cancelButtonText','drawActorStateTurns','MessageWait','_forcedBattleLayout','maxLines','ActSeq_Mechanics_FtbAction','_floatEasing','_scene','wholeActionSet','ActionCount','enemyTpGaugeRate','frameCount','performMagicEvasion','EmergeText','createBattleUIOffsetX','ActSeq_Weapon_ClearActiveWeapon','isCommandEnabled','isDTB','selectedBattlers','GetActionSequenceSpecialTargetWithFlags','getChildIndex','Spriteset_Battle_createLowerLayer','PosOffsetX','actor%1-portrait','list','-----','Window_BattleStatus_drawItemImage','CheckMapBattleEventValid','gaugeRate','BattleManager_startInput','CastAnimation','PreEndTurnJS','showHelpWindow','addDamageSprite','ZZZ','touchUI','createJS','displayActionResults','isCurrentItemEnabled','_partyWindow','text','SHOW_BUTTON','inputtingAction','HpGauge','Name','displayChangedStates','drawBattlerData','_pagedownButton','ForceExploited','onBattleStartOnceParallels','statesWindowRect','_enemyIDs','updateGrow','chantStyle','%1\x20Aspect','isSTB','StatusWindowAttachmentFrontOffsetX','transform','_targetHits','_damages','startMotion','svAnchorY','applyImmortal','numTargets','_totalHits','message4','loadEnemy','Game_BattlerBase_refresh','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','PosOffsetY','actorId','format','placeStateIcon','ConvertParams','Sprite_Enemy_createStateIconSprite','updateActors','iconHeight','Scene_Battle_onEnemyCancel','addText','Game_BattlerBase_eraseState','Sprite_Battler_damageOffsetX','_opacityDuration','onDatabaseLoaded','Actor','hpDamage','TP_Flat','addSingleSkillCommand','itemWindowRect','removedBuffs','LOVE','_skillIDs','VisuMZ_3_StateTooltips','NO\x20ACTOR\x20FOUND!','equips','okTargetSelectionVisibility','helpAreaHeight','addOptionsCommand','Scene_Battle_commandFight','COMBATLOG','isTurnBased','FullActions','CreateActionSequenceTargets','updateCommandNameWindow','makeData','Sprite_Actor_setBattler','<CENTER>%1','gaugeX','Scene_Battle_createAllWindows_ComboWindow','Window_BattleActor_processTouch','ActSeq_Impact_MotionTrailRemove','setTroopPage','drawTextEx','createMultiTargetWindow','isPreviousSceneBattleTransitionable','_actions','isPhysical','endBattle','_currentAngle','_actionInputIndex','clearDamagePopup','_motion','virtualClick','skewBattler','createActors','ActSeq_BattleLog_DisplayAction','close','setupDamagePopup','boxHeight','TextColor','Pre','setupZoomBlurImpactFilter','_defeatedEnemies','_speed','waitForNewLine','_fauxAnimationSprites','FlashDuration','%1StartTurnJS','drawDarkRect','Game_Battler_performMiss','_shakeFlinchDuration','processEscape','addChildToUiContainer','buffIconIndex','CombatLogIcon','ActSeq_Animation_AttackAnimation2','VisuMZ_4_IconBalloons','textAlign','Scene_Battle_partyCommandWindowRect','PostStartActionJS','ParseStateNotetags','ActSeq_BattleLog_PopBaseLine','reverse','battleInjectAni','CmdIconItem','playEnemyDamage','Window_Options_addGeneralOptions','executeHpDamage','pointX','splice','requestMotionRefresh','100%','NameAsTarget','DamageStyles','_frontAttachmentSprite','_motionSpeed','targetsForFriends','commandNameWindowCenter','setMoveEasingType','commandEscape','_actorSprites','WindowWidth','skewDuration','setBattleCameraTargets','Elements','setBattleSkew','hpDamageFmt','guard','MP_Rate','_tpbSceneChangeCacheActor','CommandAddStatus','canAttack','fontSize','mpDamageFmt','isDebuffAffected','spell','isOnCurrentMap','ActSeq_Movement_HomeMoveToJsPoint','XPActorCommandLines','finishActorInput','ActSeq_Mechanics_CtbOrder','gainHalfActionsPTB','CheckVisibleBattleNotetags','createDigits','createStateSprite','ActSeq_Grid_AnimationIDAtNode','sortDamageSprites','updateBattleProcess','ActSeq_Impact_ShockwaveEachTargets','BattleManager_startBattle','AggroControlSystem','setupCriticalEffect','_partyCommandWindow','isBattleRefreshRequested','currentMaxValue','ShowWeapon','STB','_baseX','isSelected','createStatesWindow','movement','Game_Action_setItem','windowAreaHeight','_shadowSprite','name','makeSuccess','setLastPluginCommandInterpreter','Game_Action_testApply','redrawForGaugeRate','ActSeq_Grid_TraverseToNode','freezeFrame','measureTextWidth','_phase','PreApplyJS','resizeWindowBorderStyle','hasBeenDefeatedBefore','_distortionSprite','isPartyTpbInputtable','jsAccuracyAsUser','_enemyId','6243230CgwknN','drawItemStatus','updateBattlerContainer','sideview_ui','sliceMin','ActSeq_Mechanics_EmulateSkillCost','Game_Action_isForAll','HalfActions','weatherPower','ANTI_TINT_UI','getBattlerFromKey','stop','TimeScale','shadow','jsScaleUp','MANUAL','_updateFilterArea','EFFECT_COMMON_EVENT','playSystemSound','MDF','onRegeneratePlayStateAnimation','FollowTurn','clone','ActorJS','ActSeq_Movement_BattleStep','commandFight','FlashColor','repeats','_stateIconSprite','removeImmortal','FvAniCenterScreen','jumpBattler','ActSeq_Mechanics_EtbAction','moveBattlerDistance','updateLink','getBattlerKeyTargets','_aspectData','stateMotionIndex','bottom','removeDamageSprite','Sprite_Animation_targetSpritePosition','ActSeq_Motion_ClearFreezeFrame','makeTargetSelectionMoreVisible','buffColor','passive','normal','ActSeq_Grid_MoveTargetsInDirection','FvAniCenterAll','_statesWindow','anchorY','All\x20Allies','isAnyoneJumping','_buffs','PreApplyAsTargetJS','damagePopupOffsetX','createAttachedSprites','_emptyBitmap','WaitForCamera','aliveMembers','setVisibleUI','Scene_Battle_createActorCommandWindow','fight','isStateAffected','Game_Action_isForFriend','setHandler','getConfigValue','textColor','process_VisuMZ_BattleCore_Notetags','stopInjectAnimation','Scene_Battle_createAllWindowsIBS','Scene_Battle_needsInputWindowChangeIBS','_targetHomeX','max','Window_BattleActor_show','_tpbNeedsPartyCommand','battleLayoutStyle','_backAttachmentSprite','getItemDamageAmountTextBattleCore','ActSeq_Animation_PlayAtCoordinate','SkillsStatesCore','Filename','isForRandom','+%1\x20MP','hpAffected','Game_BattlerBase_canGuard','BattleLogRectJS','updateMain','actionsFmt','forActor','offsetX','displayAddedStates','createRateJS','displayBuffs','nameY','ActSeq_Movement_HomeMoveBy','OffsetAdjust','enemyShowLevel','weapons','ActSeq_Impact_ShockwavePoint','_forActor','addSkillCommands','faceHeight','isOpponent','moveBattlerHomeDistance','Game_Map_encounterList','setSTBExploited','Game_Action_executeDamage','StateIconOffsetY','BattleLog','setBattler','extraPositionScaledY','Game_Map_setupBattleback','createWeather','wait','ActSeq_Motion_RefreshMotion','SkillItemStandardCols','replace','isMoving','floatBattler','evalDamageFormula','_active','_escapeRatio','addGeneralOptions','STR','getDamageStyle','ActSeq_Grid_ActionAnimationAtNode','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','freezeMotion','isForAnyone','isLearnedSkill','notFocusValid','_selectionEffectCount','updateEffectsContainer','scope','spinBattler','FRUSTRATION','setHorrorEffectSettings','deselect','VisuMZ_2_BattleSystemOTB','itemEffectRecoverHp','WIDTH','ActSeq_Impact_Oversaturate','mainSpriteScaleX','repeatTargets','resetCounter','float','loadPicture','loadBattleback2','Window_BattleLog_performActionStart','itemEffectGainTp','MotionFrameWait','actorCommandEscape','battleback2Name','addState','forceAction','ActSeq_Horror_GlitchRemove','battleProjectiles','_createColorFilter','processExtendTroopMembers','onAngleEnd','getDefeatedEnemies','updateBitmap','isForAliveFriend','setEventCallback','StatusWindow_BgType','AnchorY','Scene_Battle_updateBattleProcess','_linkedSprite','process_VisuMZ_BattleCore_BaseTroops','refreshMotion','die','selectAllActors','evaded','damageFlat','sort','traitSet','NameOffsetX','deactivate','ConfigManager_makeData','changeCtbChargeTime','createString','battleSpin','Debuffs','toUpperCase','getSkillTypes','Scene_Battle_selectPreviousCommand','ResetFocus','_customDamageFormula','actorCommandAutoBattle','ParseClassNotetags','isEnemy','start','fillRect','statusHelpDesc','PostDamageAsUserJS','drawActorLevel','ActSeq_Animation_ActionAnimation','recoverAll','DistanceY','performLifeSteal','arRedFlat','setHue','ActSeq_ChangeSkew','switchToWeaponType','activate','applyGlobalCommonEventNotetags','Text','changeBattlerOpacity','PostRegenerateJS','Sprite_Weapon_loadBitmap','pageButtonY','getNextDamagePopup','AspectIcon','displayMiss','VariableHeal','HelpAutoBattle','Window_Options_statusText','_skillWindow','height','Window_BattleLog_performRecovery','boxWidth','makeBuffName','PopupShiftX','isSideButtonLayout','LIGHT-BULB','removeAnimationFromContainer','shift','%1▲','VisuMZ_2_WeaponSwapSystem','ActSeq_Target_RandTarget','CreateCutinSettings','turnOrderChangeOTB','onActorOk','displayType','enemy','emulateAction','trueRandomTarget','_floatHeight','setBattleImpactTimeScale','Scene_Battle_stop','ActionItemMsg','getNextSubject','statusWindowRect','displayCurrentState','removeChild','updateSelectionEffect','ParseSkillNotetags','JS\x20%1END\x20ACTION','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','ActSeq_Mechanics_StateTurnsChangeBy','isAutoBattleCommandEnabled','itemPadding','text\x20target','_forcing','comboWindowOffsetY','initialize','requestRefresh','_isBattlerFlipped','MaxMP','onBattleEnd','motionIdle','addLoadListener','drawParamData','isEffecting','XPSpriteYLocation','clearActiveWeaponSet','addBattleCoreAutoBattleStyleCommand','ScaleY','_createClientArea','getBattlePortraitFilename','multiTargetWindowRect','noSimilarSTypes','SKILLS','onTurnEnd','ActSeq_Set_SetupAction','endIcon','ShowRemovedBuff','vertCells','globalAlpha','Formula','cancelActorInput','WaitForAnimation','BattleManager_processVictory','isBorderStylePortraitShown','debuffNameFmt','Game_Action_executeHpDamage_ComboWindow','performActionMotions','apply','\x5cC[16]%1\x5cC[0]','PartyCmd','processBattleCoreJS','createHelpWindowBattleCore','drawGauge','VisuMZ_2_BattleSystemETB','BattleManager_abort','ActSeq_Angle_WaitForAngle','_updateDuration','addNewState','Window_BattleLog_popupDamage','AspectColor','BattleCore','placeGauge','Frame','BindCommonEventKeysForObj','_weather','Width','isGuardLifeSteal','displayReflectionPlayBack','Window_BattleLog_displayTpDamage','actionBattleCoreJS','_targets','ActSeq_Impact_Negative','setSubject','dataId','VisuMZ_1_MessageCore','resizeWindowXPStyle','border','Scene_Battle_startActorSelection','svBattlerAnchorX','isImmortal','Window_BattleLog_pushBaseLine','_cursorSprite','isHidden','Game_Action_itemTargetCandidates','_item','left','updateShadowVisibility','isAnimationPlaying','_totalValue','animationId','_forcedHomeY','ActSeq_Movement_HomeMoveToTarget','_duration','Shadow2','head','battleCommandIcon','isFlipped','isPlaying','isItemCommandEnabled','PostStartTurnJS','prepare','lastCommandSymbol','extendTroopMembers','ATTACK','value','Game_Action_updateLastTarget','autoMeleeMultiTargetActionSet','updateStart','SwitchMissEvade','ActSeq_Grid_TeleportToNode','setupDesaturateImpactFilter','ActSeq_Target_PrevTarget','gainTp','CastPhysical','messageSpeed','center','pha','IconSet','initMembersBattleCore','battleSpriteSkew','damageContainer','priority','autoMeleeSingleTargetActionSet','OverallFormulaJS','fnordAddedStates','isGuard','Scene_Battle_logWindowRect','refreshRequest','battleCommandName','ItemID','HpGaugeOffsetX','BattleManager_startTurn','attackAnimationId1','ReflectAnimation','prev\x20target','retrieveBattleBalloon','isNextSceneBattleTransitionable','_waitCount','currentAction','_lines','startTurn','mpHealingFmt','regenerateAll','Game_Action_setSkill','itemTargetCandidates','getAspectData','ParseWeaponNotetags','refreshCursor','AspectNameFmt','isFloating','battleEffect','compareBattlerSprites','isBattleSys','actor%1-gauge-%2','ShowAddedDebuff','ActSeq_Animation_ChangeBattlePortrait_JS','isWaiting','ActionEffect','VarianceFormulaJS','StepDistanceY','StatusWindow_DrawJS','CriticalHitRateJS','MOTIONS','clearBattleCoreAspects','_targetGrowX','_damageCounterWindow','PreEndBattleJS','updateNameTempVisibility','autoSelectPriority','PostEndTurnJS','skill','ActSeq_Grid_AddTriggerToNode','gainHp','allowRandomSpeed','_actor','attackSkillId','createCancelButton','resetFontSettings','isStatusAffected','setupIconTextPopup','centerFrontViewSprite','MUSIC','setItem','ChantStyle','position','isBattleMember','buffRemove','removedStateObjects','startEnemySelection','ActSeq_Target_NextTarget','setLetter','AntiTintUiElements','updateUiContainerPosition','USER-DEFINED\x202','ActSeq_Movement_Jump','paySkillCost','getAttackMotion','pushBaseLine','displayItemMessage','removeChildFromUiContainer','createDamageCounterWindow','isOpenAndActive','options','updateTargetPosition','_actorWindow','dead\x20enemies','damagePopupPosition','MAXHP','ActSeq_Impact_BlueRedInvert','Sprite_Actor_updateFrame','statusWindowRectXPStyle','Game_Battler_forceAction','setColorTone','_lastHpDamage','_target','_borderPortraitDuration','VisuMZ_3_ActSeqImpact','State-%1-%2','_preBattleCommonEvent','BG_TYPE','processDrawEnemyBattler','ShowAddedState','ActSeq_Mechanics_HpMpTp','map','svBattlerData','displayRemovedStates','attachSpritesToDistortionSprite','BattleLayout','processActorCommandCancelTPB','all\x20actors','retreat','drawComboText','drawActorFace','jsCritRateAsUser','criticalDmgRate','performEvasion','logWindowRect','NameAlwaysSelectOnly','MAT','VisuMZ_3_SideviewBattleUI','_displayBattleCoreTransitionErrorMsg','custom','_growDuration','_inBattleStatusWindow','processDefeat','createEnemyNameContainer','drawItemStatusListStyle','NOTE','Window_BattleLog_performMiss','BattleManager_onEncounter','commandStyleCheck','destroyDamageSprite','AllActorsText','Scene_Boot_onDatabaseLoaded','Wave','cancelLifeSteal','VisuMZ_2_BattleSystemBTB','isFightCommandEnabled','_inputting','Sprite_Enemy_updateCollapse','battleCorePreBattleCommonEvent','createUIContainer','animationShouldMirror','makeStateName','forceEscapeSprite','drawStates','ATK','Window_BattleLog_displayFailure','isValid','isAtbChargingState','%1Event','MUSICNOTE','debuffAdd','showAnimation','parse','_jumpMaxHeight','battleInjectPrep','displayMpDamage','onFloatEnd','Style','context','resize','setGuard','_animation','Duration','Window_BattleLog_displayActionResults','PopupPosition','Scene_Party','getReturnWindow','terminate','drawItemActorSprite','Spriteset_Battle_update','createEffectActionSet','_inBattleStatusMode','ShowFailure','SceneManager_isSceneChanging','width','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','TpGaugeOffsetY','battleStatusWindowAnimationContainer','includeState','VisuMZ_2_BattleSystemPTB','isActor','cameraDuration','Window_BattleActor_hide','RequiresDefeat','VisuMZ_2_HorrorEffects','addWeaponSwapCommand','onSelectAction','visibilityState','CmdIconEscape','Window_BattleLog_performMagicEvasion','getDualWieldTimes','lineHeight','TpbActiveChangeEnabled','NameAlwaysVisible','mpDamage','process_VisuMZ_BattleCore_CreateRegExp','addedDebuffs','alterPriority','ActSeq_Movement_MoveToTarget','previousActor','isMeleeSingleTargetAction','updateVisibility','Strength','processForcedAction','svAnchorX','drawItemStyleIconText','_homeDuration','PopupShiftY','PostApplyAsTargetJS','isNameTemporarilyVisible','updateBattlebackBitmap1','_battlerName','updatePageButtonVisibility','PRE-','isCharging','PostDamage%1JS','isCustomBattleScope','changeInputWindow','_motionType','Parse_Notetags_Targets','pageButtonX','isShownOnBattlePortrait','isSceneBattle','drawText','createInnerSprite','GuardFormulaJS','_shadowScaleY','checkSceneBattleTransitionable','applyData','createAllWindows','performActionEnd','Game_Action_setGuard','getBattlerKeyTargetReplacement','balloonId','WaitComplete','MP_Flat','getHardDamageCap','Game_BattlerBase_meetsUsableItemConditions','hasAspectData','ActSeq_Movement_Opacity','_animationCount','Scene_Battle_helpWindowRect','textSizeEx','_svBattlerSprite','parallaxHueEnemyModifier','%1StartActionJS','string','log','ActSeq_Mechanics_VariablePopup','ActSeq_Camera_Offset','Window_BattleEnemy_initialize','drawActorClass','create','setSkill','addExtendedTroopMembers','hasSkill','LIGHTBULB','_baseY','StateOverlayOffsetX','abort','includes','Window_BattleLog_performReflection','ShowRemovedState','setCursorRect','updateShadowScale','_activeWeaponSlot','setup','getBattlePortraitOffsetX','SkillItemBorderCols','thrust','startHomeMove','addChildAt','attack','_dimmerSprite','ComboWindow_DrawJS','BattleCmdList','pattern','negativeLifeSteal','_doubleTouch','isAnyBattleBalloonPlaying','_lastRegenFrameCount','hpHealingFmt','bind','performReflection','createShadowSprite','PrioritySortActors','floor','WaitForAngle','updateShadowBattleCore','Scene_Battle_createHelpWindow','updateOnceParallelInterpreters','isTickBased','GroupDigits','ActSeq_Movement_WaitForScale','addAnimationSpriteToContainer','performMiss','alive\x20enemies\x20not\x20user','ForceExploiter','nextActiveWeaponSlot','Window_BattleLog_update','Skills','createContents','pageButtonPosition','JS\x20%1START\x20ACTION','_battler','isSkipPartyCommandWindow','setFullActionsPTB','parseForcedGameTroopSettingsBattleCore','ActSeq_Mechanics_OtbOrder','_svBattlerData','makeTargetsBattleCoreJS','updateCancelButton','autoSelect','Game_Party_removeActor','isStateResist','weaponImageId','1rGjejG','playOkSound','AutoAddState','Game_System_initialize','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','adjustPosition','ACTOR_OFFSET_Y','ITEM','isJumping','_battleCoreBattleResumeAfter','onEncounterBattleCore','skew','setEnemyWindowMode','disperseDamage','addWindow','WaitForProjectile','visualCutinPortraitHue','scale','AllowCollapse','addSingleSkillCommands','ActSeq_BattleLog_PushBaseLine','ActSeq_Grid_RemoveTriggerFromNode','addTextToCombatLog','updateDuration','JumpToLabel','VariableID','isBattleCoreTargetScope','clearResult','Game_Battler_makeSpeed','BattleGridSystem','fontFace','SkewX','dead','lukEffectRate','_borderPortraitTargetX','targetActionSet','_angleRevertOnFinish','itemLifeStealRate','BindCommonEventKeysForGroup','Scene_Battle_update','Game_Battler_onBattleStart','alterCost','Game_Map_battleback2Name','TRAIT_PARAM','isUndecided','Game_Temp_requestAnimation','StyleOFF','MUSIC-NOTE','enemyStatus','isMagical','_commonEventIDs','backColor','Sprite_Actor_moveToStartPosition','AnchorX','updateFloat','Scene_QuickLoad','isBTB','loadSvActor','Game_Action_itemEffectAddNormalState','_helpWindow','ShowReflect','isGrowing','freezeTime','getItemDamageAmountTextOriginal','ActSeq_Animation_BalloonIconRange','XPActorDefaultHeight','Game_Battler_clearDamagePopup','_returnWindow','FvAniEachTarget','CriticalDmgFlat','Scene_Battle_start','getBattlePortrait','DamageType%1','drawBackgroundRect','pop','ActSeq_Animation_BalloonAnimation','ResetOffset','ActSeq_Cutin_WaitForEntrance','_hideAllIcons','isBattlerGrounded','Window_ActorCommand_initialize','mpColor','battleStatusSprite','changeTurnOrderByCTB','WEAPON\x20SWAP','isBattleFlipped','ActSeq_Grid_RemovePassiveStatesFromNode','updateSpin','Height','Scene_Map_initializeAfter','ActorOffsetY','frontview_ui','battleEnd','Game_Battler_clearMotion','Scene_Battle_terminate','mainFontSize','ALL_ENEMIES','MpGaugeOffsetY','battlerKey','_tempEquipCheck','FlinchDuration','MIN_SAFE_INTEGER','Game_Action_itemEffectAddAttackState','isMeleeMultiTargetAction','parameters','okButtonText','AdjustRect','needsInputWindowChange','changePaintOpacity','DTB','statusWindowRectBorderStyle','Window_BattleLog_displayCritical','Interrupt','_targetX','message1','Game_Action_isForOpponent','tpbCommandFight','isFrameVisible','_updateClientArea','gainMp','updatePosition','Exploiter','applyArmorModifiers','updateAttachmentSprites','MaxHP','itemEffectAddNormalState','isOptionsCommandEnabled','TurnsFmt','changeCtbCastTime','loadFaceImages','Enable','state','duration','setHome','StatusWindowAttachmentFrontOffsetY','makeActionList','_updateColorFilter','%1Apply%2JS','updatePadding','VisuMZ_1_SkillsStatesCore','friendsUnit','SETTINGS','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','ShowFacesListStyle','isForAliveFriendBattleCore','playCursor','rec','PostStartBattleJS','closeBattleActorWindow','isBattlerFlipped','enemyHiddenParameter','performSubstitute','_playTestFastMode','enemyShowParametersAlways','occasion','fnordRemovedStates','DamageRate','default','FaceAway','isInputting','_enemyWindow','LastSelected','endInBattleStatus','faceWidth','_weaponSprite','_tpbChargeTime','setupHpGaugeSprite','Turns','actions','BTB','getHalfActionsPTB','AUTO\x20BATTLE','gainStoredBoostPoints','Sprite_Actor_createStateSprite','BattleSystemBTB','18fCjVOG','Scene_Options','removeAnimation','createPartyCommandWindow','VisuMZ_2_BattleSystemCTB','autoBattleUseSkills','setBalloonPose','_stateTurns','isForAnyoneFocusFriends','physical','setupBlueRedInvertImpactFilter','PostEndBattleJS','VisuMZ_3_ActiveChainSkills','SLEEP','WaitForExit','_logWindow','MotionType','addBuff','prepareBorderActor','ActSeq_Animation_ItemAnimation','ShowMissEvasion','addPartyCommand','value2','expRate','Destination','updateCallMenu','effect','escape','doesPageHaveOnceParallelStart','updateCustomActionSequence','pow','isATB','Window_BattleEnemy_hide','damageOffsetX','792168bsOVjq','Users','CmdStyle','hidden','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','comboWindowOffsetX','setCustomDamageFormula','displayAction','makeBuffHelpText','addItemCommand','_jumpHeight','ElementStatusCore','hitIndex','addCommand','adjustPosition_1for1','setupBattleCore','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','PreDamageAsUserJS','Scene_Battle_startActorCommandSelection','placeTimeGauge','setupWeaponAnimation','BattleStartEvent','match','PostApplyJS','onEnemyOk','WaitForFloat','battleCoreResumeLaunchBattle','performFlinch','battlerSprites','PostEndActionJS','ActSeq_Animation_AttackAnimation','ParseEnemyNotetags','isCTB','_stateSprite','performMoveToPoint','unshift','debuffValueFmt','ActSeq_BattleLog_UI','DEF','drawItemStyleIcon','isActiveTpb','_skewX','isAnimationShownOnBattlePortrait','ActSeq_Horror_Clear','NameLegacy','preemptive','itemRect','return\x200','isForFriend','PortraitScale','substitute','_multipliers','skillItemWindowRectMiddle','CalcEscapeRaiseJS','ActSeq_Cutin_EndVisualCutinEffectAll','Scene_Battle_startPartyCommandSelection','_freezeMotionData','addedStateObjects','isOpen','updateStaticSvBattlerFrames','applyTargetFilters','_shakeFlinchPower','repositionEnemiesByResolution','VisuMZ_2_BattleSystemSTB','PreApplyAsUserJS','_weaponImageId','Game_Battler_onTurnEnd','_shake','createCommandVisibleJS','setupOversaturateImpactFilter','special','Game_BattlerBase_canAttack','Game_Action_numRepeats','_spriteset','addBattleGridMoveCommand','createAttachmentSprites','currentValue','NameDamageVisibility','open','isForNotUser','Game_Action_setSubject','_forcedBattlers','isForDeadFriend','_battleCoreAddedElements','updateEffectContainers','_floatDuration','deadMembers','onMoveEnd','VisuMZ_2_PartySystem','actionSplicePoint','CommandVisible','ActSeq_Mechanics_DeathBreak','Scene_Battle_updateStatusWindowPosition','ActSeq_Impact_TimeScale','isPTB','addCustomCommands','AttachStateOffsetX','applyEasing','applyFreezeMotionFrames','destroy','_offsetY','isSpinning','onGrowEnd','portraitIndex','_makeCursorAlpha','_lastPluginCommandInterpreter','AutoBattleMsg','initElementStatusCore','_targetOffsetX','ACTOR_OFFSET_X','ActSeq_Element_Clear','zoomDuration','isDuringNonLoopingMotion','ShowReflectWait','process_VisuMZ_BattleCore_Failsafes','rowSpacing','ANGER','addBattlerBuffsDebuffs','_skewWholeDuration','WaitForMovement','removeCurrentAction','ARRAYNUM','_enemyWindowMode','_battleLayoutStyle','alive\x20friends','setWaitMode','smoothness','HITTYPE_CERTAIN','callOkHandler','_damageContainer','isSceneChanging','makeDeepCopy','VisuMZ_1_MainMenuCore','Actions','dimColor2','Sprite_Enemy_updateStateSprite','CTB','BaseTroopIDs','stbGainInstant','battleFloat','chant','makeSpeed','ActSeq_BattleLog_WaitForBattleLog','battlelog','QoL','clearGlobalVariables','ActSeq_Mechanics_AddState','none','VisuMZ_2_BattleGridSystem','battleVoices','performActionEndMembers','partyCommandWindowRectBorderStyle','negativeMpLifeSteal','victory','meetsSelectFrontviewActorConditions','getNextSubjectFromPool','_enemyMultiTargetWindow','enabled','randomTargets','MUSIC\x20NOTE','_action','anchor','Game_Battler_startTpbTurn','hue','ActSeq_Movement_FacePoint','StepDuration','drawSkillCost','%1EndTurnJS','startAttackWeaponAnimation','_cancelButton','BattleManager_onEscapeFailure','portraitHue','BreakShields','_createCursorArea','getItemDamageAmountLabelOriginal','checkAutoCustomActionSequenceNotetagEffect','VisuMZ_1_ElementStatusCore','ENEMY_OFFSET_X','process_VisuMZ_BattleCore_Action_Notetags','VariableDmg','speed','ButtonAssist','popBaseLine','ActSeq_Movement_HomeMoveToPoint','iconText','user','_bypass_applyBattleCoreHitRateJS','performDamage','traits','totalDmgFmt','alive\x20battlers\x20not\x20user','_bypassCanCounterCheck','alive\x20actors\x20not\x20user','show','normalHelp','_updateCursorFilterArea','traitObjects','ActSeq_Mechanics_BoostPointsChange','setupBattleback','ActSeq_Skew_Reset','excludeListing','drawItemBackground','_growX','setBattlerBattleCore','registerDefeatedEnemy','Parse_Notetags_TraitObjects','ShowActorGauge','_buffTurns','STYPES','performSTBExploiter','startShakeFlinch','Weapon-%1-%2','emulateActionEffect','singleSkill','missed','requestBalloon','flipVisualCutinVert','processVictory','mainSpriteHeight','invokeMagicReflection','setText','rate','code','_callSceneOptions','autoBattleAtStart','TextFmt','isDisarmLifeSteal','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','Sprite_Actor_setActorHome','autoSelectLastSelected','_flashDuration','DamageStyleList','BattleManager_onEscapeSuccess','Game_Action_executeHpDamage','ActSeq_Mechanics_AnalyzeWeakness','autoBattleStyle','magicReflection','flashColor','CoreEngine','StartName','FocusX','getInputButtonString','updateSkew','Sprite_Battler_updatePosition','processRandomizedData','ArPenRate','clamp','Game_Map_battleback1Name','Settings','charging','popupDamage','COBWEB','updateBorderStyle','_enemy','processBorderActor','canBattlerMove','Post','isAnyoneGrowing','_autoBattle','isAffectedByBreakShield','wtypeId','visualCutinPortraitFilename','createMultiTargetWindows','performCollapse','lineRect','HEART','addMeleeReturnActionSet','StateIconOffsetX','SkewY','_injectAnimationSprite','processAnimationRequests','battleOpacity','endAction','createEnemyWindow','loadSvEnemy','nameColor','startTpbTurn','performAction','powerUpColor','drawItemActorSvBattler','setupBattlebackBattleCore','dying','indexOf','_targetDamage','isCancelLifeSteal','Slot','DefeatEvent','shouldHideBattleEndPopups','ActSeq_Mechanics_PtbAlterCost','MotionIdle','SmoothImage','Game_Battler_regenerateAll','ActiveTpbOptionsMessage','finalizeScale','\x5cI[%1]\x5cHEXCOLOR<%3>%2','encounterList','_pattern','drawDebuffs','_deathStateApplied','process_VisuMZ_BattleCore_PluginParams','displayTpDamage','pageup','updateBattleBalloons','Scene_Battle_createPartyCommandWindowIBS','isTeamBased','createTargetsJS','battler','StyleName','WaitForSkew','_flashColor','createCommandNameWindow','setupMotionBlurImpactFilter','ActSeq_Impact_MotionBlurTarget','anchorX','isBuffAffected','setFrame','isGuardWaiting','_colorFilter','_forceAction','originalName','normalText','isTpbMainPhase','process_VisuMZ_BattleCore_DamageStyles','_battlerKeyCache','isForRandomBattleCore','Linear','GetParamIcon','ActSeq_Horror_NoiseCreate','status','aspect','ActSeq_Animation_BalloonIconSpecific','drawActorBuffTurns','#%1','stepForward','DistanceAdjust','RegExp','Game_Action_clear','setActiveWeaponSlot','damageText','putActiveBattlerOnTop','softDamageCap','_offsetX','horzCells'];_0x455f=function(){return _0x4900b3;};return _0x455f();}function Sprite_EnemyName(){const _0x3e2c61=_0x45d586;this[_0x3e2c61(0x6d1)](...arguments);}Sprite_EnemyName[_0x45d586(0x19f)]=Object[_0x45d586(0x838)](Sprite_Name[_0x45d586(0x19f)]),Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0xb62)]=Sprite_EnemyName,Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(){const _0x44c208=_0x45d586;Sprite_Name[_0x44c208(0x19f)][_0x44c208(0x6d1)][_0x44c208(0x1b5)](this),this[_0x44c208(0x609)]();},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0x2fc)]=function(){const _0x357035=_0x45d586;Sprite_Name['prototype'][_0x357035(0x2fc)][_0x357035(0x1b5)](this),this[_0x357035(0x125)]=0x0,this['_linkedSprite']=null,this[_0x357035(0x9ea)]['x']=0.5,this[_0x357035(0x9ea)]['y']=0x0;},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0x609)]=function(){const _0xce1ba0=_0x45d586;VisuMZ[_0xce1ba0(0x6fe)][_0xce1ba0(0xa41)][_0xce1ba0(0x401)]['NameAttachStateIcon']&&(this[_0xce1ba0(0x5ee)]=new Sprite_StateIcon(),this[_0xce1ba0(0x34e)](this['_stateIconSprite']));},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0x23a)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0x438)]=function(){const _0x17e135=_0x45d586;return this['_lineHeight']=this[_0x17e135(0x17c)]||Window_Base[_0x17e135(0x19f)][_0x17e135(0x7fb)]()||0x24,this[_0x17e135(0x17c)]*0x4;},Sprite_EnemyName[_0x45d586(0x19f)]['fontSize']=function(){const _0x309144=_0x45d586;return VisuMZ[_0x309144(0x6fe)][_0x309144(0xa41)][_0x309144(0x401)]['NameFontSize']||$gameSystem[_0x309144(0x8d7)]();},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0x1fc)]=function(_0x3f3d2a){const _0xa85ec7=_0x45d586;this[_0xa85ec7(0x679)]=_0x3f3d2a;},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0xae1)]=function(){const _0x37d535=_0x45d586;Sprite_Name[_0x37d535(0x19f)]['update'][_0x37d535(0x1b5)](this),this[_0x37d535(0x5f4)](),this[_0x37d535(0x8f0)](),this[_0x37d535(0xab9)](),this[_0x37d535(0x3cd)]();},Sprite_EnemyName['prototype']['redraw']=function(){const _0x51ac79=_0x45d586;this[_0x51ac79(0x4a8)]=undefined;const _0x4ff0bd=this[_0x51ac79(0x5c2)](),_0x11888f=this[_0x51ac79(0x23a)](),_0x58d27b=Window_Base[_0x51ac79(0x19f)][_0x51ac79(0x7fb)]();this[_0x51ac79(0x38e)](),this[_0x51ac79(0x46a)][_0x51ac79(0xb8d)](),this[_0x51ac79(0x46a)]['drawText'](_0x4ff0bd,0x0,0x0,_0x11888f,_0x58d27b,_0x51ac79(0x735));},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0x5f4)]=function(){const _0x4713e4=_0x45d586;if(!this['_linkedSprite'])return;this['_battler']!==this[_0x4713e4(0x679)][_0x4713e4(0x86c)]&&this[_0x4713e4(0x846)](this[_0x4713e4(0x679)][_0x4713e4(0x86c)]);},Sprite_EnemyName['prototype']['updatePosition']=function(){const _0x7ec102=_0x45d586;if(!this[_0x7ec102(0x679)])return;this[_0x7ec102(0x17c)]=this[_0x7ec102(0x17c)]||Window_Base[_0x7ec102(0x19f)]['lineHeight'](),this['x']=Math[_0x7ec102(0x31d)](this['_linkedSprite'][_0x7ec102(0x5bb)]),this['y']=Math['round'](this[_0x7ec102(0x679)][_0x7ec102(0x83d)]-this[_0x7ec102(0x17c)]*0.5);const _0x299f7b=VisuMZ['BattleCore'][_0x7ec102(0xa41)]['Enemy'];this['x']+=Math[_0x7ec102(0x31d)](_0x299f7b[_0x7ec102(0x682)]||0x0),this['y']+=Math[_0x7ec102(0x31d)](_0x299f7b[_0x7ec102(0x143)]||0x0);},Sprite_EnemyName[_0x45d586(0x19f)]['updateAttachedSprites']=function(){const _0x68d229=_0x45d586;this[_0x68d229(0x12d)]();},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0x12d)]=function(){const _0xdc0ca5=_0x45d586;if(!this[_0xdc0ca5(0x5ee)])return;this[_0xdc0ca5(0x86c)]!==this[_0xdc0ca5(0x5ee)][_0xdc0ca5(0x86c)]&&this[_0xdc0ca5(0x5ee)][_0xdc0ca5(0x846)](this[_0xdc0ca5(0x86c)]);const _0xe4ff0f=this[_0xdc0ca5(0x3b7)]();this[_0xdc0ca5(0x17c)]=this['_lineHeight']||Window_Base[_0xdc0ca5(0x19f)][_0xdc0ca5(0x7fb)](),this[_0xdc0ca5(0x5ee)]['x']=Math[_0xdc0ca5(0x31d)]((_0xe4ff0f+ImageManager['iconWidth'])/0x2)+0x8,this[_0xdc0ca5(0x5ee)]['y']=this['_lineHeight']/0x2;const _0x1506d3=VisuMZ['BattleCore'][_0xdc0ca5(0xa41)][_0xdc0ca5(0x401)];this[_0xdc0ca5(0x5ee)]['x']+=_0x1506d3[_0xdc0ca5(0x9a9)]||0x0,this['_stateIconSprite']['y']+=_0x1506d3['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x45d586(0x19f)]['updateOpacity']=function(){const _0x1302b6=_0x45d586,_0xd85819=this[_0x1302b6(0x7f7)]();if(_0xd85819&&this[_0x1302b6(0x125)]<0xff)this[_0x1302b6(0x125)]+=0x10;else!_0xd85819&&this[_0x1302b6(0x125)]>0x0&&(this[_0x1302b6(0x125)]-=0x10);},Sprite_EnemyName[_0x45d586(0x19f)]['visibilityState']=function(){const _0x50de1f=_0x45d586;if(this['isAlwaysHidden']())return![];else{if(!this[_0x50de1f(0x86c)])return![];else{if(!this[_0x50de1f(0x86c)]['isAppeared']())return![];else{if(this[_0x50de1f(0x38d)]())return!![];else{if(this[_0x50de1f(0x86c)][_0x50de1f(0x1e3)]())return![];else{if(this['isBattlerTargeted']())return!![];else{if(this[_0x50de1f(0x282)]())return!![];else{if(this[_0x50de1f(0xaca)]())return!![];else{if(this[_0x50de1f(0xb37)]())return!![];else{if(this[_0x50de1f(0x125)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x45d586(0x19f)]['temporaryVisibile']=function(){const _0x3f1922=_0x45d586;return this[_0x3f1922(0x86c)]&&this[_0x3f1922(0x86c)][_0x3f1922(0x80d)]();},Sprite_EnemyName[_0x45d586(0x19f)]['isAlwaysHidden']=function(){const _0x4a0a24=_0x45d586;return VisuMZ['BattleCore'][_0x4a0a24(0xa41)][_0x4a0a24(0x401)][_0x4a0a24(0xb31)];},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0x13e)]=function(){const _0x163438=_0x45d586;if(!VisuMZ[_0x163438(0x6fe)]['Settings'][_0x163438(0x401)][_0x163438(0x58e)])return![];if(BattleManager[_0x163438(0x917)]()&&!BattleManager['isActiveTpb']())return![];return this[_0x163438(0x86c)]&&BattleManager[_0x163438(0x1ce)]&&BattleManager[_0x163438(0x708)][_0x163438(0x840)](this[_0x163438(0x86c)]);},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0x282)]=function(){return![];},Sprite_EnemyName['prototype'][_0x45d586(0xaca)]=function(){const _0x9bba51=_0x45d586;return VisuMZ[_0x9bba51(0x6fe)]['Settings']['Enemy'][_0x9bba51(0x7fd)];},Sprite_EnemyName[_0x45d586(0x19f)][_0x45d586(0xb37)]=function(){const _0x25cc5f=_0x45d586;return VisuMZ[_0x25cc5f(0x6fe)][_0x25cc5f(0xa41)]['Enemy'][_0x25cc5f(0x7af)]?this[_0x25cc5f(0x86c)][_0x25cc5f(0x5bc)]():SceneManager[_0x25cc5f(0x4f4)]['_enemyWindow']&&SceneManager['_scene']['_enemyWindow']['active']&&SceneManager[_0x25cc5f(0x4f4)]['_enemyWindow']['_enemies'][_0x25cc5f(0x840)](this[_0x25cc5f(0x86c)]);},Sprite_EnemyName['prototype'][_0x45d586(0x3b7)]=function(){const _0x4aef47=_0x45d586;if(!this[_0x4aef47(0x86c)])return 0x0;if(this[_0x4aef47(0x4a8)])return this[_0x4aef47(0x4a8)];const _0x2d64dd=this['name']();return this[_0x4aef47(0x38e)](),this[_0x4aef47(0x4a8)]=this[_0x4aef47(0x46a)][_0x4aef47(0x5c9)](_0x2d64dd)||0x1,this[_0x4aef47(0x4a8)];},VisuMZ['BattleCore'][_0x45d586(0x121)]=Sprite_Battleback[_0x45d586(0x19f)][_0x45d586(0x87d)],Sprite_Battleback[_0x45d586(0x19f)][_0x45d586(0x87d)]=function(){const _0x1bff4a=_0x45d586,_0x457be1=VisuMZ[_0x1bff4a(0x6fe)][_0x1bff4a(0xa41)][_0x1bff4a(0x223)];if(!_0x457be1)return VisuMZ[_0x1bff4a(0x6fe)][_0x1bff4a(0x121)][_0x1bff4a(0x1b5)](this);const _0x3177a1=String(_0x457be1[_0x1bff4a(0x178)])||'MZ';switch(_0x3177a1){case'MZ':VisuMZ[_0x1bff4a(0x6fe)][_0x1bff4a(0x121)]['call'](this);break;case _0x1bff4a(0x320):this[_0x1bff4a(0x957)]();break;case'ScaleToFit':this[_0x1bff4a(0xb63)]();break;case'ScaleDown':this['adjustPosition_ScaleDown']();break;case _0x1bff4a(0x2ae):this[_0x1bff4a(0x1b9)]();break;}},Sprite_Battleback[_0x45d586(0x19f)]['adjustPosition_1for1']=function(){const _0x1368d4=_0x45d586,_0x281a99=VisuMZ['BattleCore']['Settings']['BattlebackScale'];if(_0x281a99&&_0x281a99['jsOneForOne'])return _0x281a99['jsOneForOne'][_0x1368d4(0x1b5)](this);this[_0x1368d4(0x7ea)]=Graphics['width'],this['height']=Graphics[_0x1368d4(0x6ac)];const _0x428c57=0x1;this[_0x1368d4(0x889)]['x']=_0x428c57,this[_0x1368d4(0x889)]['y']=_0x428c57,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x45d586(0x19f)][_0x45d586(0xb63)]=function(){const _0x48fc92=_0x45d586,_0x1482e1=VisuMZ[_0x48fc92(0x6fe)][_0x48fc92(0xa41)][_0x48fc92(0x223)];if(_0x1482e1&&_0x1482e1[_0x48fc92(0x3a5)])return _0x1482e1[_0x48fc92(0x3a5)][_0x48fc92(0x1b5)](this);this[_0x48fc92(0x7ea)]=Graphics[_0x48fc92(0x7ea)],this[_0x48fc92(0x6ac)]=Graphics[_0x48fc92(0x6ac)];const _0xd5c66a=this[_0x48fc92(0x7ea)]/this[_0x48fc92(0x46a)][_0x48fc92(0x7ea)],_0x573d00=this[_0x48fc92(0x6ac)]/this['bitmap']['height'],_0x53b74d=Math['max'](_0xd5c66a,_0x573d00);this['scale']['x']=_0x53b74d,this[_0x48fc92(0x889)]['y']=_0x53b74d,this['x']=(Graphics[_0x48fc92(0x7ea)]-this['width'])/0x2,this['y']=Graphics[_0x48fc92(0x6ac)]-this[_0x48fc92(0x6ac)];},Sprite_Battleback[_0x45d586(0x19f)][_0x45d586(0xbe3)]=function(){const _0x414e5a=_0x45d586,_0x409a81=VisuMZ[_0x414e5a(0x6fe)][_0x414e5a(0xa41)][_0x414e5a(0x223)];if(_0x409a81&&_0x409a81['jsScaleDown'])return _0x409a81['jsScaleDown']['call'](this);this[_0x414e5a(0x7ea)]=Graphics[_0x414e5a(0x7ea)],this[_0x414e5a(0x6ac)]=Graphics[_0x414e5a(0x6ac)];const _0x51c367=Math[_0x414e5a(0xb4b)](0x1,this[_0x414e5a(0x7ea)]/this['bitmap'][_0x414e5a(0x7ea)]),_0x3eef43=Math[_0x414e5a(0xb4b)](0x1,this['height']/this['bitmap'][_0x414e5a(0x6ac)]),_0x3d840d=Math['max'](_0x51c367,_0x3eef43);this[_0x414e5a(0x889)]['x']=_0x3d840d,this['scale']['y']=_0x3d840d,this['x']=(Graphics[_0x414e5a(0x7ea)]-this[_0x414e5a(0x7ea)])/0x2,this['y']=Graphics[_0x414e5a(0x6ac)]-this['height'];},Sprite_Battleback[_0x45d586(0x19f)][_0x45d586(0x1b9)]=function(){const _0x5c68f1=_0x45d586,_0xa840df=VisuMZ[_0x5c68f1(0x6fe)][_0x5c68f1(0xa41)][_0x5c68f1(0x223)];if(_0xa840df&&_0xa840df[_0x5c68f1(0x5e0)])return _0xa840df[_0x5c68f1(0x5e0)][_0x5c68f1(0x1b5)](this);this[_0x5c68f1(0x7ea)]=Graphics[_0x5c68f1(0x7ea)],this[_0x5c68f1(0x6ac)]=Graphics[_0x5c68f1(0x6ac)];const _0x13c765=Math[_0x5c68f1(0x61a)](0x1,this[_0x5c68f1(0x7ea)]/this['bitmap'][_0x5c68f1(0x7ea)]),_0x1a3793=Math['max'](0x1,this[_0x5c68f1(0x6ac)]/this['bitmap'][_0x5c68f1(0x6ac)]),_0x256b2b=Math[_0x5c68f1(0x61a)](_0x13c765,_0x1a3793);this[_0x5c68f1(0x889)]['x']=_0x256b2b,this['scale']['y']=_0x256b2b,this['x']=(Graphics[_0x5c68f1(0x7ea)]-this[_0x5c68f1(0x7ea)])/0x2,this['y']=Graphics[_0x5c68f1(0x6ac)]-this['height'];},Spriteset_Battle[_0x45d586(0x5db)]=VisuMZ['BattleCore'][_0x45d586(0xa41)]['BattleLayout'][_0x45d586(0x781)]??!![],Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x722)]=function(){const _0x295186=_0x45d586;if(!$gameSystem[_0x295186(0x138)]())return![];return![];},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0xb3d)]=function(){return 0x0;},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0xaf6)]=function(){return 0x0;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x502)]=Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x475)],Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x475)]=function(){const _0x121915=_0x45d586;VisuMZ['BattleCore'][_0x121915(0x502)][_0x121915(0x1b5)](this),this[_0x121915(0x642)](),this[_0x121915(0x407)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x7e5)]=Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0xae1)],Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0xae1)]=function(){const _0x4777ac=_0x45d586;VisuMZ[_0x4777ac(0x6fe)][_0x4777ac(0x7e5)][_0x4777ac(0x1b5)](this),this['updateBattlerContainer'](),this[_0x4777ac(0x782)](),this[_0x4777ac(0xb72)](),this[_0x4777ac(0xa77)]();},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x642)]=function(){const _0x4f360e=_0x45d586;this[_0x4f360e(0x702)]=new Weather(),this[_0x4f360e(0x361)][_0x4f360e(0x34e)](this[_0x4f360e(0x702)]);},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0xb72)]=function(){const _0x58a658=_0x45d586;this[_0x58a658(0x702)][_0x58a658(0x267)]=$gameScreen['weatherType'](),this['_weather'][_0x58a658(0x3c8)]=$gameScreen[_0x58a658(0x5da)]();},Game_Interpreter['prototype'][_0x45d586(0xaa7)]=function(_0x5af82d){$gameScreen['changeWeather'](_0x5af82d[0x0],_0x5af82d[0x1],_0x5af82d[0x2]);if(_0x5af82d[0x3])this['wait'](_0x5af82d[0x2]);return!![];},VisuMZ['BattleCore']['Game_Interpreter_command283']=Game_Interpreter[_0x45d586(0x19f)]['command283'],Game_Interpreter[_0x45d586(0x19f)]['command283']=function(_0x3321b5){const _0x25b79b=_0x45d586;return SceneManager[_0x25b79b(0x81a)]()?(SceneManager[_0x25b79b(0x4f4)]['_spriteset']['changeBattlebacks'](_0x3321b5[0x0],_0x3321b5[0x1]),!![]):VisuMZ[_0x25b79b(0x6fe)][_0x25b79b(0xb1c)]['call'](this,_0x3321b5);},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x285)]=function(_0x46468c,_0x1a8229){const _0x2a722e=_0x45d586;_0x46468c[_0x2a722e(0x46a)]=_0x1a8229;},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x3cf)]=function(_0x5cb437,_0x4187fc){const _0x4ad801=_0x45d586;_0x5cb437=_0x5cb437||'',_0x4187fc=_0x4187fc||'';_0x5cb437===''&&_0x4187fc===''&&(_0x5cb437=this['_back1Sprite']['battleback1Name'](),_0x4187fc=this[_0x4ad801(0x3f6)]['battleback2Name']());const _0x241484=ImageManager['loadBattleback1'](_0x5cb437),_0x10e68e=ImageManager[_0x4ad801(0x665)](_0x4187fc);_0x241484['addLoadListener'](this['updateBattlebackBitmap1'][_0x4ad801(0x856)](this,this[_0x4ad801(0x20f)],this[_0x4ad801(0x3f6)],_0x241484,_0x10e68e));},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x80e)]=function(_0x104f1e,_0x78c239,_0x555504,_0x46c173){const _0x5f2d13=_0x45d586;_0x46c173[_0x5f2d13(0x6d7)](this[_0x5f2d13(0x2e5)]['bind'](this,_0x104f1e,_0x78c239,_0x555504,_0x46c173));},Spriteset_Battle[_0x45d586(0x19f)]['updateBattlebackBitmap2']=function(_0x21da4e,_0x20d3fa,_0x54bbb7,_0x3b7874){const _0x489a64=_0x45d586;_0x21da4e[_0x489a64(0x46a)]=_0x54bbb7,_0x20d3fa['bitmap']=_0x3b7874,_0x21da4e[_0x489a64(0x87d)](),_0x20d3fa[_0x489a64(0x87d)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xb53)]=Spriteset_Battle[_0x45d586(0x19f)]['createBattleField'],Spriteset_Battle['prototype']['createBattleField']=function(){const _0x2b2c00=_0x45d586;VisuMZ['BattleCore'][_0x2b2c00(0xb53)]['call'](this),this[_0x2b2c00(0x18c)]();},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x18c)]=function(){const _0x3d5a8a=_0x45d586;this[_0x3d5a8a(0x270)](),this[_0x3d5a8a(0x7c7)](),this[_0x3d5a8a(0x17e)](),this[_0x3d5a8a(0x40c)](),this[_0x3d5a8a(0xb03)]();},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x270)]=function(){const _0x1f14af=_0x45d586;this[_0x1f14af(0x15d)]=new Sprite(),this['_battleField']['addChild'](this[_0x1f14af(0x15d)]);},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x17e)]=function(){const _0x7d5044=_0x45d586;this[_0x7d5044(0xbe1)]=new Sprite(),Spriteset_Battle[_0x7d5044(0x5db)]?this[_0x7d5044(0x34e)](this[_0x7d5044(0xbe1)]):this[_0x7d5044(0x361)]['addChild'](this[_0x7d5044(0xbe1)]);},Spriteset_Battle['prototype'][_0x45d586(0x40c)]=function(){const _0x1490cd=_0x45d586;this[_0x1490cd(0x9ca)]=new Sprite(),this[_0x1490cd(0x9ca)]['x']=this[_0x1490cd(0x361)]['x'],this[_0x1490cd(0x9ca)]['y']=this[_0x1490cd(0x361)]['y'],this[_0x1490cd(0x34e)](this['_damageContainer']);},Spriteset_Battle['prototype'][_0x45d586(0xb03)]=function(){const _0x1f11b5=_0x45d586;if(!this['isFlipped']())return;this[_0x1f11b5(0x15d)][_0x1f11b5(0x889)]['x']=-0x1,this[_0x1f11b5(0x15d)]['x']=this[_0x1f11b5(0x361)]['width'],this['_uiContainer'][_0x1f11b5(0x889)]['x']=-0x1,this[_0x1f11b5(0x213)]['x']=this[_0x1f11b5(0x361)][_0x1f11b5(0x7ea)],this[_0x1f11b5(0xbe1)]['scale']['x']=-0x1,this[_0x1f11b5(0xbe1)]['x']=this['_battleField'][_0x1f11b5(0x7ea)],this[_0x1f11b5(0x9ca)]['scale']['x']=-0x1,this[_0x1f11b5(0x9ca)]['x']=this[_0x1f11b5(0x361)]['x']+this[_0x1f11b5(0x361)]['width'];},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x428)]=function(){const _0x5aadab=_0x45d586;Imported[_0x5aadab(0xbc5)]&&this[_0x5aadab(0x4a0)]()&&this[_0x5aadab(0x987)]();const _0x41d449=$gameTroop[_0x5aadab(0xad5)](),_0x45b17d=[];for(const _0x1f8014 of _0x41d449){_0x45b17d[_0x5aadab(0x119)](new Sprite_Enemy(_0x1f8014));}_0x45b17d[_0x5aadab(0x680)](this['compareEnemySprite'][_0x5aadab(0x856)](this));for(const _0x4fee25 of _0x45b17d){this[_0x5aadab(0x15d)]['addChild'](_0x4fee25);}this[_0x5aadab(0x193)]=_0x45b17d;},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x568)]=function(){const _0x4b3884=_0x45d586;this['_actorSprites']=[];for(let _0x42aa06=0x0;_0x42aa06<$gameParty[_0x4b3884(0x29b)]();_0x42aa06++){const _0x2ebc21=$gameParty['battleMembers']()[_0x42aa06],_0x4e8a25=new Sprite_Actor();_0x4e8a25['moveToStartPositionBattleCore'](_0x2ebc21),_0x4e8a25['setBattler'](_0x2ebc21),_0x4e8a25[_0x4b3884(0xae1)](),this[_0x4b3884(0x596)][_0x4b3884(0x119)](_0x4e8a25),this[_0x4b3884(0x15d)][_0x4b3884(0x34e)](_0x4e8a25);}},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x486)]=function(_0x5edf1d,_0x4a872d,_0x2e0095,_0x52f1fc){const _0xb21ec=_0x45d586,_0x503a3f=this['isMVAnimation'](_0x4a872d),_0x3cdee4=new(_0x503a3f?Sprite_AnimationMV:Sprite_Animation)(),_0x50c85b=this[_0xb21ec(0x478)](_0x5edf1d);this[_0xb21ec(0x7c8)](_0x5edf1d[0x0])&&(_0x2e0095=!_0x2e0095),_0x3cdee4[_0xb21ec(0x19b)]=_0x5edf1d,_0x3cdee4[_0xb21ec(0x846)](_0x50c85b,_0x4a872d,_0x2e0095,_0x52f1fc),this[_0xb21ec(0x862)](_0x3cdee4);},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x862)]=function(_0x3c8b91){const _0x2e334e=_0x45d586;this[_0x2e334e(0x973)](_0x3c8b91)?(this['battleStatusWindowAnimationContainer']()[_0x2e334e(0x34e)](_0x3c8b91),_0x3c8b91[_0x2e334e(0x8ca)]=!![]):(this[_0x2e334e(0xbe1)][_0x2e334e(0x34e)](_0x3c8b91),Spriteset_Battle[_0x2e334e(0x5db)]&&(this[_0x2e334e(0xbe1)]['x']=this[_0x2e334e(0xdf)]['x'],this[_0x2e334e(0xbe1)]['y']=this[_0x2e334e(0xdf)]['y'])),this['_animationSprites'][_0x2e334e(0x119)](_0x3c8b91);},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x973)]=function(_0xa7bae2){const _0x21f1e4=_0x45d586;if(!_0xa7bae2)return![];if(!_0xa7bae2[_0x21f1e4(0x7dd)])return![];if(!_0xa7bae2[_0x21f1e4(0x19b)][0x0])return![];if(_0xa7bae2[_0x21f1e4(0x19b)][0x0][_0x21f1e4(0x7f0)]&&!_0xa7bae2[_0x21f1e4(0x19b)][0x0]['isActor']())return![];if($gameSystem['isSideView']())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0xa7bae2[_0x21f1e4(0xb62)]===Sprite_Animation){const _0x3d9bfc=VisuMZ[_0x21f1e4(0x6fe)]['Settings'][_0x21f1e4(0x540)];_0x3d9bfc[_0x21f1e4(0x8bc)]=_0x3d9bfc[_0x21f1e4(0x8bc)]??!![];if(_0xa7bae2[_0x21f1e4(0x7dd)][_0x21f1e4(0x6bb)]===0x0&&!_0x3d9bfc['FvAniEachTarget'])return![];_0x3d9bfc[_0x21f1e4(0x601)]=_0x3d9bfc[_0x21f1e4(0x601)]??!![];if(_0xa7bae2[_0x21f1e4(0x7dd)]['displayType']===0x1&&!_0x3d9bfc[_0x21f1e4(0x601)])return![];_0x3d9bfc[_0x21f1e4(0x5f0)]=_0x3d9bfc[_0x21f1e4(0x5f0)]??![];if(_0xa7bae2[_0x21f1e4(0x7dd)][_0x21f1e4(0x6bb)]===0x2&&!_0x3d9bfc[_0x21f1e4(0x5f0)])return![];}else{if(_0xa7bae2[_0x21f1e4(0xb62)]===Sprite_AnimationMV){if(_0xa7bae2['_animation'][_0x21f1e4(0x77a)]===0x3)return![];}}return!![];const _0x49a85b=Window_BattleStatus[_0x21f1e4(0x19f)]['battleLayoutStyle']();return['xp',_0x21f1e4(0x376)]['contains'](_0x49a85b);},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x7ed)]=function(){const _0x3b3f8b=_0x45d586;if(!SceneManager[_0x3b3f8b(0x4f4)])return null;if(!SceneManager[_0x3b3f8b(0x4f4)][_0x3b3f8b(0x3c5)])return null;if(!SceneManager['_scene'][_0x3b3f8b(0x3c5)][_0x3b3f8b(0xdf)])return null;return SceneManager[_0x3b3f8b(0x4f4)][_0x3b3f8b(0x3c5)][_0x3b3f8b(0xdf)];},Spriteset_Battle['prototype'][_0x45d586(0x929)]=function(_0x2f200f){const _0x385f14=_0x45d586;this[_0x385f14(0x6b3)](_0x2f200f);for(const _0x19cded of _0x2f200f['targetObjects']){_0x19cded[_0x385f14(0x21f)]&&_0x19cded[_0x385f14(0x21f)]();}_0x2f200f[_0x385f14(0x9ac)]();},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x6b3)]=function(_0x44d056){const _0x539666=_0x45d586;this['isAnimationShownOnBattlePortrait'](_0x44d056)?this[_0x539666(0x7ed)]()[_0x539666(0x6c6)](_0x44d056):this[_0x539666(0xbe1)][_0x539666(0x6c6)](_0x44d056);this['_effectsContainer'][_0x539666(0x6c6)](_0x44d056),this[_0x539666(0xbe1)][_0x539666(0x6c6)](_0x44d056),this[_0x539666(0x16b)][_0x539666(0x4e7)](_0x44d056);if(this[_0x539666(0x573)])this[_0x539666(0x573)]['remove'](_0x44d056);},VisuMZ[_0x45d586(0x6fe)]['Spriteset_Battle_updateActors']=Spriteset_Battle['prototype'][_0x45d586(0x538)],Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x538)]=function(){const _0x11ab51=_0x45d586;VisuMZ[_0x11ab51(0x6fe)][_0x11ab51(0xaac)]['call'](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x5d4)]=function(){const _0x405b57=_0x45d586;this[_0x405b57(0x15d)][_0x405b57(0x4bb)][_0x405b57(0x680)](this[_0x405b57(0x759)]['bind'](this)),this[_0x405b57(0xa9c)]();if(!this[_0x405b57(0x15d)])return;this['_battlerContainer'][_0x405b57(0x125)]=this[_0x405b57(0xb96)]();},Spriteset_Battle[_0x45d586(0x19f)]['compareBattlerSprites']=function(_0x2e1f26,_0x5f1a49){const _0x20495e=_0x45d586;if(VisuMZ['BattleCore'][_0x20495e(0xa41)][_0x20495e(0x540)]['PrioritySortActors']){if(_0x2e1f26[_0x20495e(0x86c)]&&_0x5f1a49[_0x20495e(0x86c)]){if(_0x2e1f26[_0x20495e(0x86c)][_0x20495e(0x7f0)]()&&_0x5f1a49[_0x20495e(0x86c)]['isEnemy']())return 0x1;else{if(_0x5f1a49['_battler'][_0x20495e(0x7f0)]()&&_0x2e1f26['_battler'][_0x20495e(0x690)]())return-0x1;}}}return _0x2e1f26['_baseY']!==_0x5f1a49[_0x20495e(0x83d)]?_0x2e1f26[_0x20495e(0x83d)]-_0x5f1a49[_0x20495e(0x83d)]:_0x5f1a49['spriteId']-_0x2e1f26[_0x20495e(0x450)];},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0xa9c)]=function(){const _0x396c1f=_0x45d586;if(!VisuMZ[_0x396c1f(0x6fe)][_0x396c1f(0xa41)]['Actor'][_0x396c1f(0x4b0)])return;const _0x3bd897=BattleManager[_0x396c1f(0x1ce)];if(_0x3bd897){if(_0x3bd897[_0x396c1f(0x7f0)]()&&!$gameSystem['isSideView']())return;if(_0x3bd897===BattleManager[_0x396c1f(0xb77)]())return;const _0x233be5=_0x3bd897[_0x396c1f(0xa7b)]();if(_0x233be5&&_0x3bd897['isActor']())this[_0x396c1f(0x15d)]['addChild'](_0x233be5);}},Spriteset_Battle[_0x45d586(0x19f)]['processEscape']=function(){const _0x34a5dd=_0x45d586;for(const _0x39eab2 of $gameParty[_0x34a5dd(0x60c)]()){if(!_0x39eab2)continue;if(!_0x39eab2[_0x34a5dd(0xa7b)]())continue;_0x39eab2['battler']()[_0x34a5dd(0x7ca)]=!![],_0x39eab2['battler']()['retreat']();}},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x7c7)]=function(){const _0xfbf0a4=_0x45d586;this[_0xfbf0a4(0x213)]=new Sprite(),Spriteset_Battle[_0xfbf0a4(0x5db)]?this[_0xfbf0a4(0x34e)](this[_0xfbf0a4(0x213)]):this[_0xfbf0a4(0x361)]['addChild'](this[_0xfbf0a4(0x213)]),SceneManager['_scene'][_0xfbf0a4(0x213)]=this[_0xfbf0a4(0x213)];},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x407)]=function(){const _0x49ed1c=_0x45d586;if(VisuMZ[_0x49ed1c(0x6fe)]['Settings'][_0x49ed1c(0x401)][_0x49ed1c(0x975)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x49ed1c(0x57a)](this[_0x49ed1c(0xbca)]);for(const _0x49ffe3 of this[_0x49ed1c(0x193)]){const _0x29f2b6=new Sprite_EnemyName();this['_enemyNameContainer'][_0x49ed1c(0x34e)](_0x29f2b6),_0x29f2b6[_0x49ed1c(0x1fc)](_0x49ffe3);}},Spriteset_Battle[_0x45d586(0x19f)]['updateUiContainerPosition']=function(){const _0x50183f=_0x45d586;if(!this[_0x50183f(0x9ca)])return;if(!this[_0x50183f(0x213)])return;const _0x4df2c1=Spriteset_Battle[_0x50183f(0x5db)]?this[_0x50183f(0x9ca)]['x']:0x0,_0x5e32e5=Spriteset_Battle[_0x50183f(0x5db)]?this[_0x50183f(0x9ca)]['y']:0x0,_0x1c6e4b=Imported[_0x50183f(0x2ff)]?this['_battleField']['x']:0x0,_0x188c97=Imported[_0x50183f(0x2ff)]?this['_battleField']['y']:0x0;this[_0x50183f(0x213)]['x']=_0x4df2c1+_0x1c6e4b,this[_0x50183f(0x213)]['y']=_0x5e32e5+_0x188c97;},BattleManager[_0x45d586(0x57a)]=function(_0x2d824e){const _0xca949c=_0x45d586;if(!SceneManager[_0xca949c(0x4f4)][_0xca949c(0x213)])return;SceneManager['_scene'][_0xca949c(0x213)][_0xca949c(0x34e)](_0x2d824e);},BattleManager[_0x45d586(0x789)]=function(_0x3a25b4){const _0x5770dd=_0x45d586;if(!SceneManager[_0x5770dd(0x4f4)]['_uiContainer'])return;SceneManager[_0x5770dd(0x4f4)][_0x5770dd(0x213)][_0x5770dd(0x6c6)](_0x3a25b4);},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0xb96)]=function(){return 0xff;},Spriteset_Battle['prototype'][_0x45d586(0x3d8)]=function(){return![];},Spriteset_Battle['prototype']['isAnyoneFloating']=function(){const _0x2914a5=_0x45d586;return this[_0x2914a5(0x965)]()[_0x2914a5(0x314)](_0x55684b=>_0x55684b['isFloating']());},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x605)]=function(){const _0x2ad972=_0x45d586;return this[_0x2ad972(0x965)]()[_0x2ad972(0x314)](_0x1d70a8=>_0x1d70a8[_0x2ad972(0x880)]());},Spriteset_Battle[_0x45d586(0x19f)]['isAnyoneGrowing']=function(){const _0x376844=_0x45d586;return this[_0x376844(0x965)]()[_0x376844(0x314)](_0x4c838d=>_0x4c838d[_0x376844(0x8b5)]());},Spriteset_Battle['prototype'][_0x45d586(0x1ab)]=function(){const _0x3ca571=_0x45d586;return this[_0x3ca571(0x965)]()[_0x3ca571(0x314)](_0x21d9c2=>_0x21d9c2['isSkewing']());},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x208)]=function(){const _0x2b51a1=_0x45d586;return this[_0x2b51a1(0x965)]()[_0x2b51a1(0x314)](_0xc4a7b9=>_0xc4a7b9[_0x2b51a1(0x9ae)]());},Spriteset_Battle[_0x45d586(0x19f)][_0x45d586(0x408)]=function(){const _0x207ea7=_0x45d586;return this[_0x207ea7(0x965)]()[_0x207ea7(0x314)](_0x1a4748=>_0x1a4748[_0x207ea7(0x182)]());},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x1ae)]=Window_ItemList[_0x45d586(0x19f)]['maxCols'],Window_ItemList[_0x45d586(0x19f)][_0x45d586(0x14f)]=function(){const _0x4ffeb8=_0x45d586;return SceneManager[_0x4ffeb8(0x81a)]()?SceneManager['_scene'][_0x4ffeb8(0x61d)]()===_0x4ffeb8(0x70e)?VisuMZ['BattleCore'][_0x4ffeb8(0xa41)][_0x4ffeb8(0x7a5)][_0x4ffeb8(0x848)]:VisuMZ[_0x4ffeb8(0x6fe)][_0x4ffeb8(0xa41)]['BattleLayout'][_0x4ffeb8(0x645)]:VisuMZ['BattleCore']['Window_ItemList_maxCols'][_0x4ffeb8(0x1b5)](this);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x367)]=Window_SkillList[_0x45d586(0x19f)][_0x45d586(0x14f)],Window_SkillList[_0x45d586(0x19f)][_0x45d586(0x14f)]=function(){const _0x24ff14=_0x45d586;return SceneManager[_0x24ff14(0x81a)]()?SceneManager['_scene'][_0x24ff14(0x61d)]()==='border'?VisuMZ[_0x24ff14(0x6fe)][_0x24ff14(0xa41)][_0x24ff14(0x7a5)][_0x24ff14(0x848)]:VisuMZ[_0x24ff14(0x6fe)]['Settings'][_0x24ff14(0x7a5)][_0x24ff14(0x645)]:VisuMZ[_0x24ff14(0x6fe)]['Window_SkillList_maxCols'][_0x24ff14(0x1b5)](this);},VisuMZ['BattleCore'][_0x45d586(0x588)]=Window_Options['prototype']['addGeneralOptions'],Window_Options['prototype'][_0x45d586(0x64c)]=function(){const _0x36f7d2=_0x45d586;VisuMZ[_0x36f7d2(0x6fe)][_0x36f7d2(0x588)][_0x36f7d2(0x1b5)](this),this[_0x36f7d2(0xb09)](),this['addShowHpGaugeCommand']();},Window_Options[_0x45d586(0x19f)]['addAutoBattleCommands']=function(){const _0x383de0=_0x45d586;VisuMZ['BattleCore'][_0x383de0(0xa41)][_0x383de0(0x2cb)][_0x383de0(0x166)]&&(this[_0x383de0(0x11b)](),this[_0x383de0(0x6dc)]());},Window_Options[_0x45d586(0x19f)][_0x45d586(0x2ed)]=function(){const _0x63be=_0x45d586;if(!VisuMZ['BattleCore']['Settings'][_0x63be(0x518)][_0x63be(0x363)])return;const _0x2f36d9=TextManager[_0x63be(0xb83)],_0x49eb9e=_0x63be(0xb83);this[_0x63be(0x956)](_0x2f36d9,_0x49eb9e);},Window_Options['prototype'][_0x45d586(0x11b)]=function(){const _0x231228=_0x45d586,_0x486047=TextManager[_0x231228(0x25c)],_0x47a62f=_0x231228(0xa29);this[_0x231228(0x956)](_0x486047,_0x47a62f);},Window_Options[_0x45d586(0x19f)][_0x45d586(0x6dc)]=function(){const _0x529a62=_0x45d586,_0x469417=TextManager['autoBattleStyle'],_0x4a659f=_0x529a62(0x92c);this[_0x529a62(0x956)](_0x469417,_0x4a659f);},VisuMZ[_0x45d586(0x6fe)]['Window_Options_statusText']=Window_Options[_0x45d586(0x19f)][_0x45d586(0xafc)],Window_Options[_0x45d586(0x19f)]['statusText']=function(_0x453e64){const _0x47f7e4=_0x45d586,_0x9ab92f=this[_0x47f7e4(0x43e)](_0x453e64);return _0x9ab92f===_0x47f7e4(0x92c)?this['statusTextAutoBattleStyle']():VisuMZ['BattleCore'][_0x47f7e4(0x6aa)]['call'](this,_0x453e64);},Window_Options['prototype'][_0x45d586(0xb0d)]=function(){const _0x1cc315=_0x45d586,_0x17b0c8=VisuMZ[_0x1cc315(0x6fe)][_0x1cc315(0xa41)]['AutoBattle'],_0x497534=this[_0x1cc315(0x613)](_0x1cc315(0x92c));return _0x497534?_0x17b0c8[_0x1cc315(0x3a2)]:_0x17b0c8[_0x1cc315(0x8a6)];},Window_ShopStatus[_0x45d586(0x19f)][_0x45d586(0x3a9)]=function(){const _0x4cde85=_0x45d586,_0x3a0658=DataManager[_0x4cde85(0x64e)](this[_0x4cde85(0x716)]),_0x3528a7=VisuMZ[_0x4cde85(0x58f)][_0x3a0658];if(!_0x3528a7)return this[_0x4cde85(0x9f7)]();const _0x36b13a=_0x4cde85(0x8c0)['format'](this[_0x4cde85(0x716)][_0x4cde85(0xb5d)][_0x4cde85(0x267)]),_0xd58601=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x4cde85(0x716)]['damage']['type']];return _0x3528a7[_0x36b13a][_0x4cde85(0x534)](_0xd58601);},Window_ShopStatus[_0x45d586(0x19f)][_0x45d586(0x61f)]=function(){const _0x43f466=_0x45d586,_0x4a297a=DataManager[_0x43f466(0x64e)](this[_0x43f466(0x716)]),_0x543f7a=VisuMZ['DamageStyles'][_0x4a297a];if(!_0x543f7a)return this[_0x43f466(0x8b7)]();return _0x543f7a[_0x43f466(0x2d0)][_0x43f466(0x1b5)](this);},VisuMZ['BattleCore'][_0x45d586(0x296)]=Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x6d1)],Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(_0x6b21eb){const _0x12d1e2=_0x45d586;VisuMZ['BattleCore'][_0x12d1e2(0x296)][_0x12d1e2(0x1b5)](this,_0x6b21eb),this[_0x12d1e2(0xa7f)](_0x6b21eb);},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0xa7f)]=function(_0x27a3c4){const _0x52ae7a=_0x45d586,_0xd82fef=new Rectangle(0x0,0x0,_0x27a3c4['width'],_0x27a3c4[_0x52ae7a(0x6ac)]);this[_0x52ae7a(0x402)]=new Window_Base(_0xd82fef),this[_0x52ae7a(0x402)]['opacity']=0x0,this['addChild'](this[_0x52ae7a(0x402)]),this['updateCommandNameWindow']();},Window_PartyCommand['prototype']['callUpdateHelp']=function(){const _0x30aa0f=_0x45d586;Window_Command[_0x30aa0f(0x19f)][_0x30aa0f(0x20c)]['call'](this);if(this[_0x30aa0f(0x402)])this[_0x30aa0f(0x553)]();},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x553)]=function(){const _0xc4cfbb=_0x45d586,_0x493714=this[_0xc4cfbb(0x402)];_0x493714[_0xc4cfbb(0x394)]['clear']();const _0x2fc964=this[_0xc4cfbb(0x7bc)](this[_0xc4cfbb(0x302)]());if(_0x2fc964===_0xc4cfbb(0x405)&&this[_0xc4cfbb(0x2e8)]()>0x0){const _0xcd7dfc=this[_0xc4cfbb(0x23d)](this[_0xc4cfbb(0x302)]());let _0x241b0d=this['commandName'](this[_0xc4cfbb(0x302)]());_0x241b0d=_0x241b0d[_0xc4cfbb(0x646)](/\\I\[(\d+)\]/gi,''),_0x493714['resetFontSettings'](),this[_0xc4cfbb(0x194)](_0x241b0d,_0xcd7dfc),this['commandNameWindowDrawText'](_0x241b0d,_0xcd7dfc),this[_0xc4cfbb(0x593)](_0x241b0d,_0xcd7dfc);}},Window_PartyCommand['prototype'][_0x45d586(0x194)]=function(_0x1cbc49,_0x578226){},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0xb3f)]=function(_0x41582e,_0x145e91){const _0xbd6f51=_0x45d586,_0x120118=this[_0xbd6f51(0x402)];_0x120118[_0xbd6f51(0x81b)](_0x41582e,0x0,_0x145e91['y'],_0x120118[_0xbd6f51(0x48a)],_0xbd6f51(0x735));},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x593)]=function(_0x19932b,_0x455160){const _0x2ec6b6=_0x45d586,_0x54be5=this['_commandNameWindow'],_0x1d2104=$gameSystem[_0x2ec6b6(0x289)](),_0x3b1037=_0x455160['x']+Math[_0x2ec6b6(0x85a)](_0x455160[_0x2ec6b6(0x7ea)]/0x2)+_0x1d2104;_0x54be5['x']=_0x54be5[_0x2ec6b6(0x7ea)]/-0x2+_0x3b1037,_0x54be5['y']=Math[_0x2ec6b6(0x85a)](_0x455160[_0x2ec6b6(0x6ac)]/0x2);},Window_PartyCommand[_0x45d586(0x19f)]['makeCommandList']=function(){const _0x1f99cc=_0x45d586;this[_0x1f99cc(0x48d)](),this[_0x1f99cc(0x259)](),this[_0x1f99cc(0x9a8)](),this[_0x1f99cc(0x2dd)](),this[_0x1f99cc(0x54d)](),this['addEscapeCommand']();},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x48d)]=function(){const _0x26db5d=_0x45d586,_0x374f4b=this[_0x26db5d(0x456)](),_0x2940b1=VisuMZ[_0x26db5d(0x6fe)]['Settings']['PartyCmd'][_0x26db5d(0x1bd)],_0x526e29=_0x374f4b===_0x26db5d(0x515)?TextManager[_0x26db5d(0x60f)]:_0x26db5d(0x4cc)[_0x26db5d(0x534)](_0x2940b1,TextManager['fight']),_0xb121fa=this['isFightCommandEnabled']();this[_0x26db5d(0x956)](_0x526e29,'fight',_0xb121fa);},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x7c3)]=function(){return!![];},Window_PartyCommand[_0x45d586(0x19f)]['addAutoBattleCommand']=function(){const _0x138de4=_0x45d586;if(!this['isAutoBattleCommandAdded']())return;const _0x19d69f=this[_0x138de4(0x456)](),_0x23ef34=VisuMZ['BattleCore'][_0x138de4(0xa41)]['PartyCmd'][_0x138de4(0x2df)],_0x109ba5=_0x19d69f===_0x138de4(0x515)?TextManager[_0x138de4(0xbdc)]:_0x138de4(0x4cc)[_0x138de4(0x534)](_0x23ef34,TextManager[_0x138de4(0xbdc)]),_0x2d0da6=this['isAutoBattleCommandEnabled']();this['addCommand'](_0x109ba5,_0x138de4(0xbdc),_0x2d0da6);},Window_PartyCommand['prototype'][_0x45d586(0x1db)]=function(){const _0x4b86a2=_0x45d586;return VisuMZ[_0x4b86a2(0x6fe)][_0x4b86a2(0xa41)][_0x4b86a2(0x6f3)]['CommandAddAutoBattle'];},Window_PartyCommand['prototype'][_0x45d586(0x6cc)]=function(){return!![];},Window_PartyCommand['prototype'][_0x45d586(0x9a8)]=function(){},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x2dd)]=function(){const _0x4bc7c5=_0x45d586,_0x119bd1=VisuMZ['BattleCore']['Settings'][_0x4bc7c5(0x6f3)][_0x4bc7c5(0x5a0)]??!![];if(!_0x119bd1)return;const _0x199a86=this[_0x4bc7c5(0x456)](),_0x2654f9=VisuMZ[_0x4bc7c5(0x6fe)][_0x4bc7c5(0xa41)][_0x4bc7c5(0x373)][_0x4bc7c5(0x215)]??0x57,_0x144c90=_0x199a86===_0x4bc7c5(0x515)?TextManager[_0x4bc7c5(0xa91)]:_0x4bc7c5(0x4cc)['format'](_0x2654f9,TextManager[_0x4bc7c5(0xa91)]),_0x53a896=!![];this[_0x4bc7c5(0x956)](_0x144c90,_0x4bc7c5(0xa91),_0x53a896);},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x54d)]=function(){const _0x496463=_0x45d586;if(!this[_0x496463(0x4cb)]())return;const _0x597022=this[_0x496463(0x456)](),_0x136c5b=VisuMZ[_0x496463(0x6fe)]['Settings'][_0x496463(0x6f3)][_0x496463(0x3fb)],_0x241467=_0x597022==='text'?TextManager['options']:_0x496463(0x4cc)[_0x496463(0x534)](_0x136c5b,TextManager['options']),_0x48eec5=this[_0x496463(0x8f6)]();this['addCommand'](_0x241467,_0x496463(0x78c),_0x48eec5);},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x4cb)]=function(){const _0x462eea=_0x45d586;return VisuMZ[_0x462eea(0x6fe)][_0x462eea(0xa41)][_0x462eea(0x6f3)]['CommandAddOptions'];},Window_PartyCommand[_0x45d586(0x19f)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x45d586(0x354)]=function(){const _0x5f503a=_0x45d586,_0x39ce9c=this[_0x5f503a(0x456)](),_0x4f9eea=VisuMZ[_0x5f503a(0x6fe)]['Settings'][_0x5f503a(0x6f3)][_0x5f503a(0x7f8)],_0x554dbc=_0x39ce9c===_0x5f503a(0x515)?TextManager['escape']:_0x5f503a(0x4cc)[_0x5f503a(0x534)](_0x4f9eea,TextManager[_0x5f503a(0x942)]),_0x292974=this[_0x5f503a(0xb81)]();this['addCommand'](_0x554dbc,_0x5f503a(0x942),_0x292974);},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0xb81)]=function(){return BattleManager['canEscape']();},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x389)]=function(){const _0x4fc7a4=_0x45d586;return VisuMZ[_0x4fc7a4(0x6fe)][_0x4fc7a4(0xa41)][_0x4fc7a4(0x6f3)][_0x4fc7a4(0x351)];},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x4a2)]=function(_0xd18621){const _0x316c9d=_0x45d586,_0x3d1e7e=this[_0x316c9d(0x7bc)](_0xd18621);if(_0x3d1e7e===_0x316c9d(0xa01))this[_0x316c9d(0x809)](_0xd18621);else _0x3d1e7e===_0x316c9d(0x405)?this[_0x316c9d(0x970)](_0xd18621):Window_Command[_0x316c9d(0x19f)][_0x316c9d(0x4a2)][_0x316c9d(0x1b5)](this,_0xd18621);},Window_PartyCommand[_0x45d586(0x19f)]['commandStyle']=function(){const _0x31aa1e=_0x45d586;return VisuMZ['BattleCore'][_0x31aa1e(0xa41)][_0x31aa1e(0x6f3)]['CmdStyle'];},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x7bc)]=function(_0x69df02){const _0x1f378d=_0x45d586;if(_0x69df02<0x0)return'text';const _0x5c9b4e=this[_0x1f378d(0x456)]();if(_0x5c9b4e!==_0x1f378d(0x1f0))return _0x5c9b4e;else{if(this['maxItems']()>0x0){const _0x41154a=this['commandName'](_0x69df02);if(_0x41154a[_0x1f378d(0x95f)](/\\I\[(\d+)\]/i)){const _0x19da84=this[_0x1f378d(0x23d)](_0x69df02),_0x1341c9=this['textSizeEx'](_0x41154a)[_0x1f378d(0x7ea)];return _0x1341c9<=_0x19da84[_0x1f378d(0x7ea)]?'iconText':_0x1f378d(0x405);}}}return _0x1f378d(0x515);},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x809)]=function(_0x344be8){const _0x4aa3f3=_0x45d586,_0x1134d6=this[_0x4aa3f3(0x23d)](_0x344be8),_0x5dc852=this[_0x4aa3f3(0x2fb)](_0x344be8),_0x15e662=this[_0x4aa3f3(0x82e)](_0x5dc852)[_0x4aa3f3(0x7ea)];this['changePaintOpacity'](this['isCommandEnabled'](_0x344be8));const _0x1168fc=this['itemTextAlign']();if(_0x1168fc==='right')this['drawTextEx'](_0x5dc852,_0x1134d6['x']+_0x1134d6['width']-_0x15e662,_0x1134d6['y'],_0x15e662);else{if(_0x1168fc===_0x4aa3f3(0x735)){const _0x3af37c=_0x1134d6['x']+Math[_0x4aa3f3(0x85a)]((_0x1134d6[_0x4aa3f3(0x7ea)]-_0x15e662)/0x2);this[_0x4aa3f3(0x55c)](_0x5dc852,_0x3af37c,_0x1134d6['y'],_0x15e662);}else this[_0x4aa3f3(0x55c)](_0x5dc852,_0x1134d6['x'],_0x1134d6['y'],_0x15e662);}},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x970)]=function(_0x21ca1d){const _0x2cd1cb=_0x45d586;this[_0x2cd1cb(0x2fb)](_0x21ca1d)[_0x2cd1cb(0x95f)](/\\I\[(\d+)\]/i);const _0x182679=Number(RegExp['$1'])||0x0,_0x45c955=this[_0x2cd1cb(0x23d)](_0x21ca1d),_0x5ed7b3=_0x45c955['x']+Math[_0x2cd1cb(0x85a)]((_0x45c955[_0x2cd1cb(0x7ea)]-ImageManager[_0x2cd1cb(0x217)])/0x2),_0x38b099=_0x45c955['y']+(_0x45c955[_0x2cd1cb(0x6ac)]-ImageManager[_0x2cd1cb(0x539)])/0x2;this[_0x2cd1cb(0x4d0)](_0x182679,_0x5ed7b3,_0x38b099);},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0xb6c)]=function(){},Window_PartyCommand[_0x45d586(0x19f)]['activate']=function(){const _0x1a99b5=_0x45d586;Window_Command[_0x1a99b5(0x19f)][_0x1a99b5(0x69e)][_0x1a99b5(0x1b5)](this);const _0x567d78=this[_0x1a99b5(0x61d)]();_0x567d78===_0x1a99b5(0x70e)&&this[_0x1a99b5(0x50d)]();},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x61d)]=function(){const _0x550cec=_0x45d586;if(this[_0x550cec(0x9c4)])return this['_battleLayoutStyle'];return this[_0x550cec(0x9c4)]=SceneManager[_0x550cec(0x4f4)][_0x550cec(0x61d)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x45d586(0x19f)][_0x45d586(0x42b)]=function(){const _0x25134a=_0x45d586,_0xeba7a=VisuMZ[_0x25134a(0x6fe)][_0x25134a(0xa41)][_0x25134a(0x6f3)],_0x1fcf66=this['currentSymbol']();switch(_0x1fcf66){case _0x25134a(0x60f):this[_0x25134a(0x8b3)][_0x25134a(0xa25)](_0xeba7a[_0x25134a(0x162)]);break;case _0x25134a(0xbdc):this[_0x25134a(0x8b3)]['setText'](_0xeba7a[_0x25134a(0x6a9)]);break;case _0x25134a(0x78c):this[_0x25134a(0x8b3)][_0x25134a(0xa25)](_0xeba7a['HelpOptions']);break;case _0x25134a(0x942):this[_0x25134a(0x8b3)][_0x25134a(0xa25)](_0xeba7a[_0x25134a(0x283)]);break;case _0x25134a(0xa91):this[_0x25134a(0x8b3)][_0x25134a(0xa25)](Window_InBattleStatus[_0x25134a(0x905)][_0x25134a(0x693)]);break;default:this[_0x25134a(0x8b3)][_0x25134a(0xa25)]('');break;}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x8c8)]=Window_ActorCommand['prototype'][_0x45d586(0x6d1)],Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(_0x12a219){const _0x8e6475=_0x45d586;VisuMZ[_0x8e6475(0x6fe)][_0x8e6475(0x8c8)][_0x8e6475(0x1b5)](this,_0x12a219),this[_0x8e6475(0xa7f)](_0x12a219);},Window_ActorCommand[_0x45d586(0x19f)]['createCommandNameWindow']=function(_0x900d5f){const _0x1e09eb=_0x45d586,_0x271042=new Rectangle(0x0,0x0,_0x900d5f[_0x1e09eb(0x7ea)],_0x900d5f[_0x1e09eb(0x6ac)]);this[_0x1e09eb(0x402)]=new Window_Base(_0x271042),this[_0x1e09eb(0x402)]['opacity']=0x0,this['addChild'](this[_0x1e09eb(0x402)]),this[_0x1e09eb(0x553)]();},Window_ActorCommand['prototype'][_0x45d586(0x20c)]=function(){const _0x3a2c9e=_0x45d586;Window_Command[_0x3a2c9e(0x19f)][_0x3a2c9e(0x20c)]['call'](this);if(this[_0x3a2c9e(0x402)])this[_0x3a2c9e(0x553)]();},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x553)]=function(){const _0xa63175=_0x45d586,_0x1bc909=this[_0xa63175(0x402)];_0x1bc909[_0xa63175(0x394)][_0xa63175(0xb8d)]();const _0x2cd120=this[_0xa63175(0x7bc)](this[_0xa63175(0x302)]());if(_0x2cd120==='icon'&&this[_0xa63175(0x2e8)]()>0x0){const _0xdfbfae=this[_0xa63175(0x23d)](this[_0xa63175(0x302)]());let _0x2c1d79=this[_0xa63175(0x2fb)](this['index']());_0x2c1d79=_0x2c1d79[_0xa63175(0x646)](/\\I\[(\d+)\]/gi,''),_0x1bc909[_0xa63175(0x773)](),this[_0xa63175(0x194)](_0x2c1d79,_0xdfbfae),this['commandNameWindowDrawText'](_0x2c1d79,_0xdfbfae),this[_0xa63175(0x593)](_0x2c1d79,_0xdfbfae);}},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x194)]=function(_0x354a15,_0x25b1f6){},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0xb3f)]=function(_0x3e2719,_0x2bbfe1){const _0xee5727=_0x45d586,_0x3c1826=this[_0xee5727(0x402)];_0x3c1826[_0xee5727(0x81b)](_0x3e2719,0x0,_0x2bbfe1['y'],_0x3c1826[_0xee5727(0x48a)],_0xee5727(0x735));},Window_ActorCommand['prototype'][_0x45d586(0x593)]=function(_0x46c399,_0x3ca8b6){const _0x3a63a0=_0x45d586,_0x4c27f1=this[_0x3a63a0(0x402)],_0x4cd6f1=$gameSystem['windowPadding'](),_0x29218c=_0x3ca8b6['x']+Math['floor'](_0x3ca8b6[_0x3a63a0(0x7ea)]/0x2)+_0x4cd6f1;_0x4c27f1['x']=_0x4c27f1[_0x3a63a0(0x7ea)]/-0x2+_0x29218c,_0x4c27f1['y']=Math[_0x3a63a0(0x85a)](_0x3ca8b6['height']/0x2);},Window_ActorCommand[_0x45d586(0x19f)]['makeCommandList']=function(){const _0x35d107=_0x45d586;if(!this['_actor'])return;const _0x5f9284=this[_0x35d107(0x770)][_0x35d107(0x3cc)]();for(const _0x390f99 of _0x5f9284){this[_0x35d107(0x19c)](_0x390f99['toUpperCase']()[_0x35d107(0x379)]());}},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x19c)]=function(_0x41be5d){const _0x10e227=_0x45d586;_0x41be5d===_0x10e227(0x729)&&this['addAttackCommand']();[_0x10e227(0xa19),_0x10e227(0x6e2)]['includes'](_0x41be5d)&&this[_0x10e227(0x636)]();_0x41be5d==='GUARD'&&this[_0x10e227(0xb20)]();_0x41be5d===_0x10e227(0x87f)&&this[_0x10e227(0x952)]();_0x41be5d===_0x10e227(0x2e6)&&this[_0x10e227(0x2dd)]();_0x41be5d===_0x10e227(0x175)&&this['addEscapeCommand']();_0x41be5d===_0x10e227(0x923)&&this[_0x10e227(0x259)]();if(_0x41be5d[_0x10e227(0x95f)](/STYPE: (\d+)/i)){const _0x4cc029=Number(RegExp['$1']);this[_0x10e227(0x3e0)](_0x4cc029);}else{if(_0x41be5d[_0x10e227(0x95f)](/STYPE: (.*)/i)){const _0x4d64b8=DataManager['getStypeIdWithName'](RegExp['$1']);this[_0x10e227(0x3e0)](_0x4d64b8);}}_0x41be5d===_0x10e227(0xb4f)&&this[_0x10e227(0x88b)]();if(_0x41be5d['match'](/SKILL: (\d+)/i)){const _0x2927c3=Number(RegExp['$1']);this[_0x10e227(0x543)]($dataSkills[_0x2927c3]);}else{if(_0x41be5d[_0x10e227(0x95f)](/SKILL: (.*)/i)){const _0xd7d10a=DataManager[_0x10e227(0x184)](RegExp['$1']);this[_0x10e227(0x543)]($dataSkills[_0xd7d10a]);}}_0x41be5d===_0x10e227(0x136)&&Imported[_0x10e227(0x9a1)]&&this[_0x10e227(0x93c)](),[_0x10e227(0x54f),'COMBAT\x20LOG']['includes'](_0x41be5d)&&Imported[_0x10e227(0x281)]&&this[_0x10e227(0x431)](),_0x41be5d===_0x10e227(0x8cc)&&Imported[_0x10e227(0x6b6)]&&this[_0x10e227(0x7f5)](!![]),_0x41be5d===_0x10e227(0x44e)&&Imported[_0x10e227(0x9dd)]&&this[_0x10e227(0x993)]();},Window_ActorCommand[_0x45d586(0x19f)]['addAttackCommand']=function(){const _0x5e615a=_0x45d586,_0x58ce4b=$dataSkills[this['_actor']['attackSkillId']()];if(!_0x58ce4b)return;if(!this[_0x5e615a(0x171)](_0x58ce4b))return;const _0x42dcd6=this['commandStyle'](),_0x311a13=DataManager[_0x5e615a(0x742)](_0x58ce4b),_0x5347f3=DataManager[_0x5e615a(0x721)](_0x58ce4b),_0xd5a0c6=_0x42dcd6==='text'?_0x311a13:_0x5e615a(0x4cc)[_0x5e615a(0x534)](_0x5347f3,_0x311a13);this['addCommand'](_0xd5a0c6,_0x5e615a(0x84c),this[_0x5e615a(0x770)][_0x5e615a(0x5a1)]());},Window_ActorCommand['prototype'][_0x45d586(0xb20)]=function(){const _0x5b7b65=_0x45d586,_0x1023ac=$dataSkills[this['_actor']['guardSkillId']()];if(!_0x1023ac)return;if(!this[_0x5b7b65(0x171)](_0x1023ac))return;const _0x427342=this[_0x5b7b65(0x456)](),_0x332ddc=DataManager['battleCommandName'](_0x1023ac),_0x380059=DataManager[_0x5b7b65(0x721)](_0x1023ac),_0x5cf728=_0x427342===_0x5b7b65(0x515)?_0x332ddc:_0x5b7b65(0x4cc)['format'](_0x380059,_0x332ddc);this[_0x5b7b65(0x956)](_0x5cf728,_0x5b7b65(0x59d),this['_actor'][_0x5b7b65(0x36e)]());},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x952)]=function(){const _0xf21bcb=_0x45d586,_0x2d70ee=this[_0xf21bcb(0x456)](),_0x30ed0a=VisuMZ['BattleCore'][_0xf21bcb(0xa41)][_0xf21bcb(0x1a0)][_0xf21bcb(0x586)],_0x76e6ba=_0x2d70ee==='text'?TextManager[_0xf21bcb(0xba9)]:_0xf21bcb(0x4cc)[_0xf21bcb(0x534)](_0x30ed0a,TextManager['item']),_0x3ef720=this['isItemCommandEnabled']();this[_0xf21bcb(0x956)](_0x76e6ba,_0xf21bcb(0xba9),_0x3ef720);},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x724)]=function(){const _0x1c4a89=_0x45d586;return this[_0x1c4a89(0x770)]&&this[_0x1c4a89(0x770)]['canUseItemCommand']();},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x636)]=function(){const _0x597445=_0x45d586,_0x382ecd=this[_0x597445(0x770)][_0x597445(0xbcb)]();for(const _0x40eddf of _0x382ecd){this['addSkillTypeCommand'](_0x40eddf);}},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x3e0)]=function(_0x199aaa){const _0x55c211=_0x45d586;let _0x224cd9=$dataSystem[_0x55c211(0xbcb)][_0x199aaa];if(!_0x224cd9)return;let _0x4ca753=_0x224cd9;const _0x5c4885=this[_0x55c211(0x456)]();if(_0x5c4885===_0x55c211(0x515))_0x4ca753=_0x4ca753[_0x55c211(0x646)](/\x1I\[(\d+)\]/gi,''),_0x4ca753=_0x4ca753[_0x55c211(0x646)](/\\I\[(\d+)\]/gi,'');else{if(!_0x224cd9[_0x55c211(0x95f)](/\\I\[(\d+)\]/i)){const _0x36354d=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x55c211(0x621)][_0x55c211(0xa41)][_0x55c211(0x868)]:VisuMZ['BattleCore']['Settings'][_0x55c211(0x1a0)],_0x4e6b26=$dataSystem[_0x55c211(0x10f)][_0x55c211(0x840)](_0x199aaa),_0x5ec89e=_0x4e6b26?_0x36354d['IconStypeMagic']:_0x36354d['IconStypeNorm'];_0x4ca753='\x5cI[%1]%2'[_0x55c211(0x534)](_0x5ec89e,_0x224cd9);}}this[_0x55c211(0x956)](_0x4ca753,_0x55c211(0x76c),!![],_0x199aaa);},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x88b)]=function(){const _0x3bfbca=_0x45d586,_0x1492a2=this[_0x3bfbca(0x770)][_0x3bfbca(0xbcb)](),_0x4767c2=this[_0x3bfbca(0x770)][_0x3bfbca(0x41e)]();for(const _0x57523b of _0x4767c2){if(!_0x57523b)continue;if(Imported[_0x3bfbca(0x903)]){if(this[_0x3bfbca(0x6e1)](_0x57523b))continue;if(this[_0x3bfbca(0x1c0)](_0x57523b))continue;}else{if(!_0x1492a2[_0x3bfbca(0x840)](_0x57523b['stypeId']))continue;}this[_0x3bfbca(0x543)](_0x57523b);}},Window_ActorCommand['prototype'][_0x45d586(0x6e1)]=function(_0x4a5be8){const _0x44ec52=_0x45d586,_0x115758=this[_0x44ec52(0x770)]['skillTypes'](),_0x2878af=_0x115758['filter'](_0x46b670=>DataManager[_0x44ec52(0x68a)](_0x4a5be8)['includes'](_0x46b670));return _0x2878af[_0x44ec52(0x1c9)]<=0x0;},Window_ActorCommand['prototype'][_0x45d586(0x1c0)]=function(_0x440ac0){const _0x40bb48=_0x45d586;if(Imported[_0x40bb48(0x903)]){if(VisuMZ['SkillsStatesCore']['version']>=1.24){if(this[_0x40bb48(0x770)]){if(!VisuMZ[_0x40bb48(0x621)][_0x40bb48(0x5ac)](this[_0x40bb48(0x770)],_0x440ac0))return!![];if(!VisuMZ[_0x40bb48(0x621)][_0x40bb48(0x366)](this[_0x40bb48(0x770)],_0x440ac0))return!![];if(!VisuMZ[_0x40bb48(0x621)][_0x40bb48(0x30e)](this[_0x40bb48(0x770)],_0x440ac0))return!![];}}else{if(!Window_SkillList[_0x40bb48(0x19f)]['checkShowHideBattleNotetags']['call'](this,_0x440ac0))return!![];if(!Window_SkillList[_0x40bb48(0x19f)][_0x40bb48(0x24b)][_0x40bb48(0x1b5)](this,_0x440ac0))return!![];if(!Window_SkillList[_0x40bb48(0x19f)][_0x40bb48(0x191)][_0x40bb48(0x1b5)](this,_0x440ac0))return!![];}}return![];},Window_ActorCommand[_0x45d586(0x19f)]['addSingleSkillCommand']=function(_0x35c7a9){const _0x91b377=_0x45d586;if(!_0x35c7a9)return;if(!this[_0x91b377(0x171)](_0x35c7a9))return;const _0x35f75c=this[_0x91b377(0x456)](),_0x2525a5=DataManager[_0x91b377(0x742)](_0x35c7a9),_0x5e7ed3=DataManager['battleCommandIcon'](_0x35c7a9),_0x2542a3=_0x35f75c===_0x91b377(0x515)?_0x2525a5:_0x91b377(0x4cc)[_0x91b377(0x534)](_0x5e7ed3,_0x2525a5),_0x412ba5=this[_0x91b377(0x770)][_0x91b377(0xb29)](_0x35c7a9);this[_0x91b377(0x956)](_0x2542a3,'singleSkill',_0x412ba5,_0x35c7a9['id']);},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x171)]=function(_0x396f5b){const _0x83950c=_0x45d586,_0x2302f6=_0x396f5b[_0x83950c(0x34a)];if(_0x2302f6[_0x83950c(0x95f)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor'][_0x83950c(0x653)](_0x396f5b['id']))return![];}if(_0x2302f6[_0x83950c(0x95f)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x83950c(0x770)][_0x83950c(0x83b)](_0x396f5b['id']))return![];}const _0x490fc4=VisuMZ[_0x83950c(0x6fe)]['createKeyJS'](_0x396f5b,'CommandVisible');if(VisuMZ[_0x83950c(0x6fe)]['JS'][_0x490fc4]){if(!VisuMZ[_0x83950c(0x6fe)]['JS'][_0x490fc4][_0x83950c(0x1b5)](this,this['_actor'],_0x396f5b))return![];}return VisuMZ['BattleCore'][_0x83950c(0xb57)](_0x396f5b);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xb57)]=function(_0xfdb5ac){const _0x285a47=_0x45d586,_0x136c2c=_0xfdb5ac[_0x285a47(0x34a)];if(_0x136c2c['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x105bdd=JSON[_0x285a47(0x7d4)]('['+RegExp['$1'][_0x285a47(0x95f)](/\d+/g)+']');for(const _0x123279 of _0x105bdd){if(!$gameSwitches['value'](_0x123279))return![];}return!![];}if(_0x136c2c[_0x285a47(0x95f)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x29fb3a=JSON[_0x285a47(0x7d4)]('['+RegExp['$1'][_0x285a47(0x95f)](/\d+/g)+']');for(const _0x570fcd of _0x29fb3a){if(!$gameSwitches[_0x285a47(0x72a)](_0x570fcd))return![];}return!![];}if(_0x136c2c['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x18bbfe=JSON[_0x285a47(0x7d4)]('['+RegExp['$1'][_0x285a47(0x95f)](/\d+/g)+']');for(const _0x31175b of _0x18bbfe){if($gameSwitches['value'](_0x31175b))return!![];}return![];}if(_0x136c2c[_0x285a47(0x95f)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x11a5a7=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x315314 of _0x11a5a7){if(!$gameSwitches[_0x285a47(0x72a)](_0x315314))return!![];}return![];}if(_0x136c2c[_0x285a47(0x95f)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x56e16b=JSON['parse']('['+RegExp['$1'][_0x285a47(0x95f)](/\d+/g)+']');for(const _0x3a3266 of _0x56e16b){if(!$gameSwitches[_0x285a47(0x72a)](_0x3a3266))return!![];}return![];}if(_0x136c2c[_0x285a47(0x95f)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1a59e0=JSON['parse']('['+RegExp['$1'][_0x285a47(0x95f)](/\d+/g)+']');for(const _0x57f8ee of _0x1a59e0){if($gameSwitches[_0x285a47(0x72a)](_0x57f8ee))return![];}return!![];}return!![];},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x2dd)]=function(){const _0x1f6c0d=_0x45d586,_0x1864bb=this['commandStyle'](),_0x2afdd8=VisuMZ['BattleCore']['Settings'][_0x1f6c0d(0x373)]['CmdIconStatus']??0x57,_0x4a1415=_0x1864bb==='text'?TextManager['status']:_0x1f6c0d(0x4cc)[_0x1f6c0d(0x534)](_0x2afdd8,TextManager[_0x1f6c0d(0xa91)]),_0x42bfe6=!![];this[_0x1f6c0d(0x956)](_0x4a1415,_0x1f6c0d(0xa91),_0x42bfe6);},Window_ActorCommand[_0x45d586(0x19f)]['addEscapeCommand']=function(){const _0x51e35e=_0x45d586,_0x294384=this['commandStyle'](),_0x3c0fcd=VisuMZ[_0x51e35e(0x6fe)][_0x51e35e(0xa41)][_0x51e35e(0x6f3)]['CmdIconEscape'],_0x235f6f=_0x294384===_0x51e35e(0x515)?TextManager[_0x51e35e(0x942)]:'\x5cI[%1]%2'[_0x51e35e(0x534)](_0x3c0fcd,TextManager[_0x51e35e(0x942)]),_0x1355ed=this[_0x51e35e(0xb81)]();this['addCommand'](_0x235f6f,'escape',_0x1355ed);},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0xb81)]=function(){const _0x373c83=_0x45d586;return BattleManager[_0x373c83(0x293)]();},Window_ActorCommand[_0x45d586(0x19f)]['addAutoBattleCommand']=function(){const _0x3d7ae3=_0x45d586,_0x10fcdf=this[_0x3d7ae3(0x456)](),_0x7af396=VisuMZ['BattleCore'][_0x3d7ae3(0xa41)]['PartyCmd']['CmdIconAutoBattle'],_0x34d743=_0x10fcdf===_0x3d7ae3(0x515)?TextManager['autoBattle']:_0x3d7ae3(0x4cc)[_0x3d7ae3(0x534)](_0x7af396,TextManager[_0x3d7ae3(0xbdc)]),_0x1fb370=this['isAutoBattleCommandEnabled']();this['addCommand'](_0x34d743,_0x3d7ae3(0xbdc),_0x1fb370);},Window_ActorCommand[_0x45d586(0x19f)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x389)]=function(){const _0x3df53e=_0x45d586;return VisuMZ[_0x3df53e(0x6fe)][_0x3df53e(0xa41)][_0x3df53e(0x1a0)]['CmdTextAlign'];},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x4a2)]=function(_0x18b813){const _0x348344=_0x45d586,_0x3a7b4b=this[_0x348344(0x7bc)](_0x18b813);if(_0x3a7b4b===_0x348344(0xa01))this[_0x348344(0x809)](_0x18b813);else _0x3a7b4b===_0x348344(0x405)?this['drawItemStyleIcon'](_0x18b813):Window_Command[_0x348344(0x19f)][_0x348344(0x4a2)][_0x348344(0x1b5)](this,_0x18b813);this[_0x348344(0x30b)](_0x18b813);},Window_ActorCommand[_0x45d586(0x19f)]['commandStyle']=function(){const _0x3bce3d=_0x45d586;return VisuMZ[_0x3bce3d(0x6fe)][_0x3bce3d(0xa41)][_0x3bce3d(0x1a0)][_0x3bce3d(0x94b)];},Window_ActorCommand['prototype'][_0x45d586(0x7bc)]=function(_0x35feb7){const _0x9f4fa7=_0x45d586;if(_0x35feb7<0x0)return'text';const _0x1661ad=this[_0x9f4fa7(0x456)]();if(_0x1661ad!=='auto')return _0x1661ad;else{if(this[_0x9f4fa7(0x2e8)]()>0x0){const _0x118dcb=this[_0x9f4fa7(0x2fb)](_0x35feb7);if(_0x118dcb['match'](/\\I\[(\d+)\]/i)){const _0x2ed4d6=this['itemLineRect'](_0x35feb7),_0x1e867e=this[_0x9f4fa7(0x82e)](_0x118dcb)[_0x9f4fa7(0x7ea)];return _0x1e867e<=_0x2ed4d6[_0x9f4fa7(0x7ea)]?_0x9f4fa7(0xa01):'icon';}}}return _0x9f4fa7(0x515);},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x809)]=function(_0x53b6e6){const _0x5eae51=_0x45d586,_0x11eab3=this[_0x5eae51(0x23d)](_0x53b6e6),_0x30cd72=this['commandName'](_0x53b6e6),_0x58986f=this[_0x5eae51(0x82e)](_0x30cd72)[_0x5eae51(0x7ea)];this['changePaintOpacity'](this[_0x5eae51(0x4fd)](_0x53b6e6));const _0x3a8ed4=this[_0x5eae51(0x389)]();if(_0x3a8ed4==='right')this['drawTextEx'](_0x30cd72,_0x11eab3['x']+_0x11eab3[_0x5eae51(0x7ea)]-_0x58986f,_0x11eab3['y'],_0x58986f);else{if(_0x3a8ed4===_0x5eae51(0x735)){const _0x543a37=_0x11eab3['x']+Math[_0x5eae51(0x85a)]((_0x11eab3[_0x5eae51(0x7ea)]-_0x58986f)/0x2);this[_0x5eae51(0x55c)](_0x30cd72,_0x543a37,_0x11eab3['y'],_0x58986f);}else this[_0x5eae51(0x55c)](_0x30cd72,_0x11eab3['x'],_0x11eab3['y'],_0x58986f);}},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x970)]=function(_0x2a2bbe){const _0x13bff5=_0x45d586;this[_0x13bff5(0x2fb)](_0x2a2bbe)[_0x13bff5(0x95f)](/\\I\[(\d+)\]/i);const _0x41345a=Number(RegExp['$1'])||0x0,_0x2cea54=this[_0x13bff5(0x23d)](_0x2a2bbe),_0x4b2b25=_0x2cea54['x']+Math['floor']((_0x2cea54[_0x13bff5(0x7ea)]-ImageManager[_0x13bff5(0x217)])/0x2),_0x2a190c=_0x2cea54['y']+(_0x2cea54[_0x13bff5(0x6ac)]-ImageManager[_0x13bff5(0x539)])/0x2;this[_0x13bff5(0x4d0)](_0x41345a,_0x4b2b25,_0x2a190c);},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x30b)]=function(_0x3f9cf2){const _0x81d79f=_0x45d586;if(!(VisuMZ[_0x81d79f(0x6fe)][_0x81d79f(0xa41)][_0x81d79f(0x1a0)]['ShowCosts']??!![]))return;const _0x2cb30b=this[_0x81d79f(0x43e)](_0x3f9cf2);if(![_0x81d79f(0x84c),'guard','singleSkill']['includes'](_0x2cb30b))return;const _0x5d65dd=this[_0x81d79f(0x23d)](_0x3f9cf2);let _0x4356a2=null;if(_0x2cb30b===_0x81d79f(0x84c))_0x4356a2=$dataSkills[this[_0x81d79f(0x770)][_0x81d79f(0x771)]()];else _0x2cb30b==='guard'?_0x4356a2=$dataSkills[this[_0x81d79f(0x770)][_0x81d79f(0x1cc)]()]:_0x4356a2=$dataSkills[this[_0x81d79f(0x203)][_0x3f9cf2]['ext']];this[_0x81d79f(0x9ef)](this['_actor'],_0x4356a2,_0x5d65dd['x'],_0x5d65dd['y'],_0x5d65dd[_0x81d79f(0x7ea)]);},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x9ef)]=function(_0x321286,_0x5cddaf,_0x42e988,_0x3a2513,_0x19023e){const _0x4dc340=_0x45d586;if(!_0x5cddaf)return;Imported['VisuMZ_1_SkillsStatesCore']?Window_Command[_0x4dc340(0x19f)][_0x4dc340(0x9ef)][_0x4dc340(0x1b5)](this,_0x321286,_0x5cddaf,_0x42e988,_0x3a2513,_0x19023e):Window_SkillList[_0x4dc340(0x19f)][_0x4dc340(0x9ef)][_0x4dc340(0x1b5)](this,_0x5cddaf,_0x42e988,_0x3a2513,_0x19023e);},Window_ActorCommand['prototype'][_0x45d586(0xb6c)]=function(){},Window_ActorCommand['prototype'][_0x45d586(0x69e)]=function(){const _0x4525c7=_0x45d586;Window_Command[_0x4525c7(0x19f)][_0x4525c7(0x69e)]['call'](this);const _0x1caaf7=this[_0x4525c7(0x61d)]();_0x1caaf7===_0x4525c7(0x70e)&&this[_0x4525c7(0x50d)]();},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x61d)]=function(){const _0x1a4dbd=_0x45d586;if(this[_0x1a4dbd(0x9c4)])return this[_0x1a4dbd(0x9c4)];return this[_0x1a4dbd(0x9c4)]=SceneManager[_0x1a4dbd(0x4f4)][_0x1a4dbd(0x61d)](),this['_battleLayoutStyle'];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x21b)]=Window_ActorCommand['prototype'][_0x45d586(0x846)],Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x846)]=function(_0x109ba2){const _0x2ad728=_0x45d586,_0x37dc17=this[_0x2ad728(0x61d)]();if(_0x109ba2&&['xp',_0x2ad728(0x376)]['includes'](_0x37dc17))this[_0x2ad728(0x70d)](_0x109ba2);else _0x109ba2&&[_0x2ad728(0x70e)][_0x2ad728(0x840)](_0x37dc17)&&(this[_0x2ad728(0x5cc)](_0x109ba2),this[_0x2ad728(0x50d)]());VisuMZ[_0x2ad728(0x6fe)][_0x2ad728(0x21b)][_0x2ad728(0x1b5)](this,_0x109ba2),_0x109ba2&&$gameTroop[_0x2ad728(0x60c)]()[_0x2ad728(0x1c9)]>0x0&&_0x109ba2[_0x2ad728(0xa7b)]()&&_0x109ba2[_0x2ad728(0xa7b)]()[_0x2ad728(0xa96)]();},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x70d)]=function(_0x1fc4b1){const _0x3e8b12=_0x45d586,_0x12b3bc=VisuMZ['BattleCore']['Settings'][_0x3e8b12(0x7a5)][_0x3e8b12(0x2ba)],_0x32fb05=Math[_0x3e8b12(0x31d)](Graphics[_0x3e8b12(0x6ae)]/0x3),_0x166aba=Math[_0x3e8b12(0x31d)](Graphics[_0x3e8b12(0x6ae)]/$gameParty[_0x3e8b12(0xb5c)]()['length']),_0x8900b9=Math[_0x3e8b12(0x61a)](Math[_0x3e8b12(0xb4b)](_0x32fb05,_0x166aba),_0x12b3bc),_0x463616=this['fittingHeight'](VisuMZ[_0x3e8b12(0x6fe)][_0x3e8b12(0xa41)][_0x3e8b12(0x7a5)][_0x3e8b12(0x5a8)]),_0x1a124e=Math[_0x3e8b12(0x85a)]((Graphics['boxWidth']-Graphics[_0x3e8b12(0x7ea)])/0x2),_0x542ace=Graphics[_0x3e8b12(0x6ae)]-_0x1a124e,_0x5f39ae=(Math[_0x3e8b12(0x31d)](_0x166aba*_0x1fc4b1[_0x3e8b12(0x302)]())+Math[_0x3e8b12(0x31d)]((_0x166aba-_0x8900b9)/0x2))[_0x3e8b12(0xa3f)](_0x1a124e,_0x542ace-_0x8900b9),_0x5872a4=Math[_0x3e8b12(0x31d)](SceneManager[_0x3e8b12(0x4f4)]['_statusWindow']['y']-_0x463616);this['move'](_0x5f39ae,_0x5872a4,_0x8900b9,_0x463616),this[_0x3e8b12(0x869)](),this[_0x3e8b12(0x250)](0x1);},Window_ActorCommand['prototype'][_0x45d586(0x5cc)]=function(_0x27449b){const _0xe9a00=_0x45d586,_0xf671d1=SceneManager[_0xe9a00(0x4f4)]['partyCommandWindowRectBorderStyle']();this[_0xe9a00(0x15b)](_0xf671d1['x'],_0xf671d1['y'],_0xf671d1[_0xe9a00(0x7ea)],_0xf671d1['height']),this[_0xe9a00(0x869)](),this[_0xe9a00(0x250)](0x0);},Window_ActorCommand[_0x45d586(0x19f)]['refreshDimmerBitmap']=function(){const _0x45db4d=_0x45d586;if(this[_0x45db4d(0x84d)]){const _0x4e289=this['_dimmerSprite'][_0x45db4d(0x46a)],_0x1e87cf=this[_0x45db4d(0x7ea)]-0x8,_0x5e2163=this[_0x45db4d(0x6ac)],_0xff645d=this[_0x45db4d(0x330)],_0x4cda83=ColorManager['dimColor1'](),_0x3334e2=ColorManager[_0x45db4d(0x9cf)]();this[_0x45db4d(0x84d)]['x']=0x4,_0x4e289[_0x45db4d(0x7db)](_0x1e87cf,_0x5e2163),_0x4e289[_0x45db4d(0x472)](0x0,0x0,_0x1e87cf,_0xff645d,_0x3334e2,_0x4cda83,!![]),_0x4e289['fillRect'](0x0,_0xff645d,_0x1e87cf,_0x5e2163-_0xff645d*0x2,_0x4cda83),_0x4e289[_0x45db4d(0x472)](0x0,_0x5e2163-_0xff645d,_0x1e87cf,_0xff645d,_0x4cda83,_0x3334e2,!![]),this[_0x45db4d(0x84d)][_0x45db4d(0xa84)](0x0,0x0,_0x1e87cf,_0x5e2163);}},Window_ActorCommand[_0x45d586(0x19f)]['updateHelp']=function(){const _0x38edcb=_0x45d586;if(!this[_0x38edcb(0x770)])return;const _0x5d2a03=VisuMZ[_0x38edcb(0x6fe)][_0x38edcb(0xa41)][_0x38edcb(0x1a0)],_0x51609f=this[_0x38edcb(0xbe9)]();switch(_0x51609f){case _0x38edcb(0x84c):this[_0x38edcb(0x298)]($dataSkills[this[_0x38edcb(0x770)]['attackSkillId']()]);break;case _0x38edcb(0x59d):this[_0x38edcb(0x298)]($dataSkills[this['_actor'][_0x38edcb(0x1cc)]()]);break;case _0x38edcb(0x76c):const _0x587dfe=_0x5d2a03[_0x38edcb(0x1e7)],_0x149eb2=_0x587dfe[_0x38edcb(0x534)]($dataSystem[_0x38edcb(0xbcb)][this[_0x38edcb(0x17f)]()]);this['_helpWindow']['setText'](_0x149eb2);break;case _0x38edcb(0xa1e):this[_0x38edcb(0x298)]($dataSkills[this[_0x38edcb(0x17f)]()]);break;case _0x38edcb(0xba9):this[_0x38edcb(0x8b3)]['setText'](_0x5d2a03[_0x38edcb(0x4b8)]);break;case _0x38edcb(0x942):this['_helpWindow'][_0x38edcb(0xa25)](_0x5d2a03[_0x38edcb(0x283)]);break;case _0x38edcb(0xbdc):this[_0x38edcb(0x8b3)][_0x38edcb(0xa25)](_0x5d2a03[_0x38edcb(0x6a9)]);break;case _0x38edcb(0xa91):this['_helpWindow']['setText'](Window_InBattleStatus[_0x38edcb(0x905)]['statusHelpDesc']);break;default:this['_helpWindow']['setText']('');break;}},Window_ActorCommand[_0x45d586(0x19f)][_0x45d586(0x1d2)]=function(){const _0x2a046f=_0x45d586;this[_0x2a046f(0x167)](0x0);if(this['_actor']&&ConfigManager[_0x2a046f(0xbc3)]){const _0x16a1a1=this[_0x2a046f(0x770)][_0x2a046f(0x727)]();this[_0x2a046f(0x139)](_0x16a1a1);if(_0x16a1a1==='skill'){const _0x56728c=this[_0x2a046f(0x770)][_0x2a046f(0x258)]();if(_0x56728c){const _0x5e474=this['findSymbolExt']('skill',_0x56728c[_0x2a046f(0xac9)]);this[_0x2a046f(0x4e6)](_0x5e474||0x0);}}else{if(_0x16a1a1===_0x2a046f(0xa1e)){const _0x110e3b=this['_actor'][_0x2a046f(0x258)]();if(_0x110e3b){const _0x589539=this[_0x2a046f(0x458)](_0x2a046f(0xa1e),_0x110e3b['id']);this[_0x2a046f(0x4e6)](_0x589539||0x0);}}}}},Window_ActorCommand[_0x45d586(0x19f)]['findSymbolExt']=function(_0x5662d5,_0x1e3d1b){const _0x181ba6=_0x45d586;return this[_0x181ba6(0x203)][_0x181ba6(0x48c)](_0x3f5f12=>_0x3f5f12[_0x181ba6(0x4ad)]===_0x5662d5&&_0x3f5f12[_0x181ba6(0x3eb)]===_0x1e3d1b);},VisuMZ['BattleCore']['Window_BattleStatus_initialize']=Window_BattleStatus['prototype'][_0x45d586(0x6d1)],Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(_0x19e6f5){const _0x1da98b=_0x45d586;VisuMZ[_0x1da98b(0x6fe)][_0x1da98b(0x4b6)][_0x1da98b(0x1b5)](this,_0x19e6f5),this[_0x1da98b(0x3fa)](),this[_0x1da98b(0x994)]();},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x61d)]=function(){const _0x2a6fe9=_0x45d586;if(this[_0x2a6fe9(0x9c4)])return this[_0x2a6fe9(0x9c4)];return this[_0x2a6fe9(0x9c4)]=SceneManager[_0x2a6fe9(0x4f4)][_0x2a6fe9(0x61d)](),this[_0x2a6fe9(0x9c4)];},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x3fa)]=function(){const _0x5eaa92=_0x45d586;this['frameVisible']=this[_0x5eaa92(0x8ed)]();const _0x58f598=VisuMZ[_0x5eaa92(0x6fe)][_0x5eaa92(0xa41)][_0x5eaa92(0x7a5)];_0x58f598[_0x5eaa92(0x357)]&&(this[_0x5eaa92(0x125)]=0x0);},Window_BattleStatus['prototype'][_0x45d586(0x8ed)]=function(){const _0x14c9f3=_0x45d586,_0xa45028=VisuMZ[_0x14c9f3(0x6fe)][_0x14c9f3(0xa41)][_0x14c9f3(0x7a5)];if(_0xa45028[_0x14c9f3(0x2f7)])return!![];const _0x41b235=this[_0x14c9f3(0x61d)]();switch(_0x41b235){case'list':case _0x14c9f3(0x70e):return!![];break;case'default':case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xb4c)]=function(){const _0x583c10=_0x45d586;return this[_0x583c10(0x8ed)]()?0x0:0xa;},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x14f)]=function(){const _0x52e232=_0x45d586,_0x49b8e7=this['battleLayoutStyle']();switch(_0x49b8e7){case _0x52e232(0x505):return 0x1;break;case'xp':case _0x52e232(0x376):return $gameParty[_0x52e232(0xb5c)]()[_0x52e232(0x1c9)];break;case _0x52e232(0x915):default:return $gameParty[_0x52e232(0x29b)]();break;}},Window_BattleStatus[_0x45d586(0x19f)]['itemHeight']=function(){const _0x4531b1=_0x45d586,_0x54235b=this[_0x4531b1(0x61d)]();switch(_0x54235b){case _0x4531b1(0x505):return Window_StatusBase[_0x4531b1(0x19f)][_0x4531b1(0x21d)][_0x4531b1(0x1b5)](this);break;case'default':case'xp':case _0x4531b1(0x376):default:return this[_0x4531b1(0xb54)];break;}},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x9bc)]=function(){const _0x201f80=_0x45d586,_0x5d415b=this[_0x201f80(0x61d)]();switch(_0x5d415b){case _0x201f80(0x505):return Window_StatusBase[_0x201f80(0x19f)]['rowSpacing']['call'](this);break;case _0x201f80(0x915):case'xp':case _0x201f80(0x376):default:return 0x0;break;}},Window_BattleStatus[_0x45d586(0x19f)]['updatePadding']=function(){const _0x41f32f=_0x45d586;this[_0x41f32f(0x8ed)]()?Window_StatusBase['prototype'][_0x41f32f(0x902)][_0x41f32f(0x1b5)](this):this[_0x41f32f(0x330)]=0x8;},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x1e6)]=function(){const _0x103e95=_0x45d586,_0x233e6c=VisuMZ[_0x103e95(0x6fe)][_0x103e95(0xa41)][_0x103e95(0x7a5)];_0x233e6c['StatusWindowSkinFilename']?this['windowskin']=ImageManager[_0x103e95(0xbef)](_0x233e6c[_0x103e95(0x2f7)]):Window_StatusBase[_0x103e95(0x19f)][_0x103e95(0x1e6)][_0x103e95(0x1b5)](this);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xa12)]=function(_0x1bf2f4){const _0x3219e1=_0x45d586,_0x40ada5=VisuMZ[_0x3219e1(0x6fe)]['Settings']['BattleLayout'];if(_0x40ada5['StatusWindowSelectableBackHide'])return;Window_StatusBase['prototype'][_0x3219e1(0xa12)]['call'](this,_0x1bf2f4);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x6d2)]=function(){const _0x3637aa=_0x45d586;this[_0x3637aa(0x2b5)]=!![];},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xae1)]=function(){const _0xc82454=_0x45d586;Window_StatusBase[_0xc82454(0x19f)][_0xc82454(0xae1)]['call'](this),this[_0xc82454(0x1b6)](),this[_0xc82454(0x99d)]();if(this[_0xc82454(0x61d)]()===_0xc82454(0x70e))this['updateBorderStyle']();},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x1b6)]=function(){const _0x185392=_0x45d586;if($gameTemp[_0x185392(0x5b7)]())this['preparePartyRefresh'](),this[_0x185392(0x2b5)]=![],$gameTemp[_0x185392(0x369)]();else this[_0x185392(0x2b5)]&&(this[_0x185392(0x2b5)]=![],this[_0x185392(0x291)](),this[_0x185392(0x8f3)]());},Window_BattleStatus['prototype'][_0x45d586(0xa0a)]=function(){const _0x34fe85=_0x45d586;Window_StatusBase[_0x34fe85(0x19f)][_0x34fe85(0xa0a)][_0x34fe85(0x1b5)](this);if(!$gameSystem[_0x34fe85(0x138)]())this[_0x34fe85(0x291)]();},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xb6c)]=function(){const _0x225f10=_0x45d586;if(this[_0x225f10(0xb62)]===Window_BattleStatus)return;Window_StatusBase[_0x225f10(0x19f)][_0x225f10(0xb6c)][_0x225f10(0x1b5)](this);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x8c1)]=function(_0x400473){const _0xb365c4=_0x45d586,_0x3884c8=this['battleLayoutStyle']();switch(_0x3884c8){case'xp':case'portrait':break;case'default':case _0xb365c4(0x505):case _0xb365c4(0x70e):default:return Window_StatusBase[_0xb365c4(0x19f)]['drawBackgroundRect'][_0xb365c4(0x1b5)](this,_0x400473);break;}},VisuMZ[_0x45d586(0x6fe)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xbb1)],Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xbb1)]=function(_0x165894){const _0x5ef23b=_0x45d586,_0x2adfb6=this[_0x5ef23b(0x61d)]();switch(_0x2adfb6){case _0x5ef23b(0x505):this[_0x5ef23b(0x2d4)](_0x165894);break;case'xp':this[_0x5ef23b(0xb19)](_0x165894);break;case _0x5ef23b(0x376):this[_0x5ef23b(0x2e1)](_0x165894);break;case _0x5ef23b(0x915):case _0x5ef23b(0x70e):default:VisuMZ['BattleCore'][_0x5ef23b(0x507)]['call'](this,_0x165894);break;}},Window_BattleStatus['prototype'][_0x45d586(0x5d3)]=function(_0xfdeff2){const _0x114463=_0x45d586,_0x3a6233=this['battleLayoutStyle']();if(!$gameSystem['isSideView']())this[_0x114463(0x776)](_0xfdeff2);switch(_0x3a6233){case _0x114463(0x505):this[_0x114463(0x7b8)](_0xfdeff2);break;case'xp':case _0x114463(0x376):case _0x114463(0x915):case'border':default:this[_0x114463(0x46f)](_0xfdeff2);break;}},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x755)]=function(){const _0x2b19ca=_0x45d586,_0x5d808c=this['battleLayoutStyle']();if(['xp'][_0x2b19ca(0x840)](_0x5d808c)&&!$gameSystem[_0x2b19ca(0x138)]()){this[_0x2b19ca(0x843)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x2b19ca(0x19f)][_0x2b19ca(0x755)]['call'](this);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x776)]=function(_0x32093b){const _0x1dd20a=_0x45d586,_0x2299c5=this[_0x1dd20a(0xb77)](_0x32093b)[_0x1dd20a(0xa7b)]();if(!_0x2299c5)return;const _0x4d82b6=this['battleLayoutStyle'](),_0x527a26=this[_0x1dd20a(0x977)](_0x32093b);let _0x1c84d9=Math['round'](_0x527a26['x']+_0x527a26[_0x1dd20a(0x7ea)]/0x2)+this[_0x1dd20a(0x330)];[_0x1dd20a(0x505)][_0x1dd20a(0x840)](_0x4d82b6)&&(_0x1c84d9=_0x527a26[_0x1dd20a(0x7ea)]/$gameParty[_0x1dd20a(0xb5c)]()[_0x1dd20a(0x1c9)],_0x1c84d9*=_0x32093b,_0x1c84d9+=_0x527a26['width']/$gameParty['battleMembers']()[_0x1dd20a(0x1c9)]/0x2);let _0x4d239a=Math[_0x1dd20a(0x31d)](this[_0x1dd20a(0x381)](_0x32093b,_0x2299c5,_0x527a26));_0x2299c5['setHome'](_0x1c84d9,_0x4d239a),this[_0x1dd20a(0x84b)](_0x2299c5,0x1),_0x2299c5[_0x1dd20a(0xa0a)](),this['updateEffectsContainer'](),this[_0x1dd20a(0x8f3)]();},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x381)]=function(_0x51033a,_0x6f8aa1,_0x3290ce){const _0x33770e=_0x45d586,_0x6fd8e=VisuMZ[_0x33770e(0x6fe)]['Settings'][_0x33770e(0x7a5)],_0x3d96a1=this[_0x33770e(0x61d)]();if(_0x3d96a1==='xp'){const _0x55edec=_0x6fd8e[_0x33770e(0x6da)];switch(_0x55edec[_0x33770e(0x2ab)]()[_0x33770e(0x379)]()){case _0x33770e(0x5f8):return _0x3290ce[_0x33770e(0x6ac)]-_0x6f8aa1['_shadowSprite']['height']/0x4;break;case _0x33770e(0x735):const _0x43400c=_0x6fd8e[_0x33770e(0x8b9)];return(_0x3290ce['height']+(_0x6f8aa1[_0x33770e(0x6ac)]||_0x43400c))/0x2;break;case _0x33770e(0x42e):return 0x0;case _0x33770e(0x5c2):default:return this[_0x33770e(0x62f)](_0x3290ce);break;}}else{if(_0x3d96a1==='portrait'){}}return _0x6f8aa1[_0x33770e(0x6ac)];},Sprite_Name[_0x45d586(0x19f)]['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x45d586(0x19f)][_0x45d586(0x1b1)]=function(){const _0x80994c=_0x45d586,_0x28c9bf=this[_0x80994c(0x5c2)](),_0x368a27=this['bitmapWidth'](),_0x285c2e=this[_0x80994c(0x438)]();this[_0x80994c(0x38e)](),this[_0x80994c(0x46a)][_0x80994c(0xb8d)](),this[_0x80994c(0x46a)]['drawTextTopAligned'](_0x28c9bf,0x4,0x0,_0x368a27,_0x285c2e,'left');},Bitmap[_0x45d586(0x19f)]['drawTextTopAligned']=function(_0x1a0f86,_0x4f92be,_0x15b112,_0x43e622,_0x2bb35a,_0x413fac){const _0x1d86a5=_0x45d586;TextManager[_0x1d86a5(0x4b7)]&&(_0x1a0f86=TextManager['parseLocalizedText'](_0x1a0f86));const _0xf5121d=this[_0x1d86a5(0x7da)],_0x50ecc8=_0xf5121d[_0x1d86a5(0x6e8)];_0x43e622=_0x43e622||0xffffffff;let _0x130395=_0x4f92be,_0x169250=Math[_0x1d86a5(0x31d)](_0x15b112+0x18/0x2+this[_0x1d86a5(0x5a2)]*0.35);_0x413fac==='center'&&(_0x130395+=_0x43e622/0x2),_0x413fac==='right'&&(_0x130395+=_0x43e622),_0xf5121d[_0x1d86a5(0xac3)](),_0xf5121d[_0x1d86a5(0xbf6)]=this['_makeFontNameText'](),_0xf5121d['textAlign']=_0x413fac,_0xf5121d[_0x1d86a5(0xb65)]='alphabetic',_0xf5121d['globalAlpha']=0x1,this['_drawTextOutline'](_0x1a0f86,_0x130395,_0x169250,_0x43e622),_0xf5121d[_0x1d86a5(0x6e8)]=_0x50ecc8,this[_0x1d86a5(0x37b)](_0x1a0f86,_0x130395,_0x169250,_0x43e622),_0xf5121d[_0x1d86a5(0x3af)](),this[_0x1d86a5(0x28d)][_0x1d86a5(0xae1)]();},Window_BattleStatus[_0x45d586(0x19f)]['nameY']=function(_0x5c8518){const _0x20db86=_0x45d586;return this[_0x20db86(0xbc1)](_0x5c8518)-this['gaugeLineHeight']();},Window_BattleStatus[_0x45d586(0x19f)]['drawItemImageListStyle']=function(_0x661479){const _0x433bfa=_0x45d586;if(!VisuMZ[_0x433bfa(0x6fe)][_0x433bfa(0xa41)][_0x433bfa(0x7a5)][_0x433bfa(0x907)])return;const _0x58f9c4=this[_0x433bfa(0xb77)](_0x661479),_0x4eeadc=this[_0x433bfa(0x977)](_0x661479);_0x4eeadc[_0x433bfa(0x7ea)]=ImageManager[_0x433bfa(0x91b)],_0x4eeadc[_0x433bfa(0x6ac)]-=0x2,this[_0x433bfa(0x7aa)](_0x58f9c4,_0x4eeadc['x']+0x1,_0x4eeadc['y']+0x1,_0x4eeadc[_0x433bfa(0x7ea)],_0x4eeadc[_0x433bfa(0x6ac)]);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x7b8)]=function(_0x2ccd39){const _0xc2ddb7=_0x45d586,_0x225bbf=VisuMZ['BattleCore'][_0xc2ddb7(0xa41)][_0xc2ddb7(0x7a5)],_0x2ae9a5=$dataSystem['optDisplayTp']?0x4:0x3,_0x4c0519=_0x2ae9a5*0x80+(_0x2ae9a5-0x1)*0x8+0x4,_0x4b93b7=this[_0xc2ddb7(0xb77)](_0x2ccd39),_0x48e6b2=this[_0xc2ddb7(0x977)](_0x2ccd39);let _0x1c202a=_0x48e6b2['x']+this['padding'];_0x225bbf[_0xc2ddb7(0x907)]?_0x1c202a=_0x48e6b2['x']+ImageManager['faceWidth']+0x8:_0x1c202a+=ImageManager[_0xc2ddb7(0x217)];const _0x4227d7=Math['round'](Math[_0xc2ddb7(0xb4b)](_0x48e6b2['x']+_0x48e6b2[_0xc2ddb7(0x7ea)]-_0x4c0519,_0x1c202a)),_0x109dfd=Math[_0xc2ddb7(0x31d)](_0x48e6b2['y']+(_0x48e6b2[_0xc2ddb7(0x6ac)]-Sprite_Name['prototype'][_0xc2ddb7(0x438)]())/0x2),_0x58ba10=Math[_0xc2ddb7(0x31d)](_0x4227d7-ImageManager[_0xc2ddb7(0x217)]/0x2-0x4),_0x1154f1=Math[_0xc2ddb7(0x31d)](_0x48e6b2['y']+(_0x48e6b2[_0xc2ddb7(0x6ac)]-ImageManager[_0xc2ddb7(0x539)])/0x2+ImageManager[_0xc2ddb7(0x539)]/0x2);let _0x3a378c=_0x4227d7+0x88;const _0x8d19c=_0x109dfd;this['placeTimeGauge'](_0x4b93b7,_0x4227d7-0x4+(_0x225bbf[_0xc2ddb7(0x2b9)]||0x0),_0x109dfd+(_0x225bbf[_0xc2ddb7(0x46c)]||0x0)),this[_0xc2ddb7(0xb8a)](_0x4b93b7,_0x4227d7+(_0x225bbf['NameOffsetX']||0x0),_0x109dfd+(_0x225bbf[_0xc2ddb7(0x143)]||0x0)),this[_0xc2ddb7(0x535)](_0x4b93b7,_0x58ba10+(_0x225bbf[_0xc2ddb7(0xa54)]||0x0),_0x1154f1+(_0x225bbf[_0xc2ddb7(0x63d)]||0x0)),this[_0xc2ddb7(0x6ff)](_0x4b93b7,'hp',_0x3a378c+0x88*0x0+(_0x225bbf[_0xc2ddb7(0x744)]||0x0),_0x8d19c+(_0x225bbf['HpGaugeOffsetY']||0x0)),this[_0xc2ddb7(0x6ff)](_0x4b93b7,'mp',_0x3a378c+0x88*0x1+(_0x225bbf[_0xc2ddb7(0xe6)]||0x0),_0x8d19c+(_0x225bbf[_0xc2ddb7(0x8d9)]||0x0)),$dataSystem[_0xc2ddb7(0x2c6)]&&this['placeGauge'](_0x4b93b7,'tp',_0x3a378c+0x88*0x2+(_0x225bbf[_0xc2ddb7(0xbbd)]||0x0),_0x8d19c+(_0x225bbf[_0xc2ddb7(0x7ec)]||0x0));},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xb19)]=function(_0x3a1109){if(!$gameSystem['isSideView']())return;VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage']['call'](this,_0x3a1109);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x46f)]=function(_0x3a82f1){const _0x164d97=_0x45d586,_0x26f913=VisuMZ[_0x164d97(0x6fe)]['Settings'][_0x164d97(0x7a5)],_0x33b290=this['actor'](_0x3a82f1),_0x365f34=this[_0x164d97(0x977)](_0x3a82f1),_0x4f0220=Math[_0x164d97(0x31d)](_0x365f34['x']+(_0x365f34[_0x164d97(0x7ea)]-0x80)/0x2),_0x2e0337=this[_0x164d97(0x62f)](_0x365f34);let _0x43d8c6=_0x4f0220-ImageManager[_0x164d97(0x217)]/0x2-0x4,_0x54dff0=_0x2e0337+ImageManager['iconHeight']/0x2;_0x43d8c6-ImageManager['iconWidth']/0x2<_0x365f34['x']&&(_0x43d8c6=_0x4f0220+ImageManager[_0x164d97(0x217)]/0x2-0x4,_0x54dff0=_0x2e0337-ImageManager[_0x164d97(0x539)]/0x2);const _0x277b14=_0x4f0220,_0xd5551a=this[_0x164d97(0xbc1)](_0x365f34);this[_0x164d97(0x95c)](_0x33b290,_0x4f0220+(_0x26f913[_0x164d97(0x2b9)]||0x0),_0x2e0337+(_0x26f913['TpbGaugeOffsetY']||0x0)),this[_0x164d97(0xb8a)](_0x33b290,_0x4f0220+(_0x26f913['NameOffsetX']||0x0),_0x2e0337+(_0x26f913[_0x164d97(0x143)]||0x0)),this[_0x164d97(0x535)](_0x33b290,_0x43d8c6+(_0x26f913['StateIconOffsetX']||0x0),_0x54dff0+(_0x26f913[_0x164d97(0x63d)]||0x0)),this[_0x164d97(0x6ff)](_0x33b290,'hp',_0x277b14+(_0x26f913[_0x164d97(0x744)]||0x0),_0xd5551a+(_0x26f913['HpGaugeOffsetY']||0x0)),this[_0x164d97(0x6ff)](_0x33b290,'mp',_0x277b14+(_0x26f913[_0x164d97(0xe6)]||0x0),_0xd5551a+this[_0x164d97(0xacd)]()+(_0x26f913[_0x164d97(0x8d9)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x164d97(0x6ff)](_0x33b290,'tp',_0x277b14+(_0x26f913[_0x164d97(0xbbd)]||0x0),_0xd5551a+this['gaugeLineHeight']()*0x2+(_0x26f913[_0x164d97(0x7ec)]||0x0));},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x347)]=function(_0x3b5a09){const _0x3261a2=_0x45d586;if(!VisuMZ[_0x3261a2(0x6fe)][_0x3261a2(0xa41)][_0x3261a2(0x7a5)]['ShowPortraits'])return![];if(_0x3b5a09[_0x3261a2(0x8bf)]())return!![];return Imported[_0x3261a2(0x9cd)]&&_0x3b5a09[_0x3261a2(0x228)]();},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x847)]=function(){const _0x4d336e=_0x45d586;if(this[_0x4d336e(0xb77)]()[_0x4d336e(0x34a)][_0x4d336e(0x95f)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x4d336e(0x34a)][_0x4d336e(0x95f)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x45d586(0x19f)][_0x45d586(0x1a5)]=function(){const _0x4a0cc9=_0x45d586;if(this['actor']()[_0x4a0cc9(0x34a)][_0x4a0cc9(0x95f)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x4a0cc9(0x34a)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x45d586(0x19f)]['drawItemImagePortraitStyle']=function(_0x955265){const _0x6036cb=_0x45d586,_0x5a3222=this['actor'](_0x955265);if(this[_0x6036cb(0x347)](_0x5a3222)){const _0x19cc1b=_0x6036cb(0x504)['format'](_0x5a3222[_0x6036cb(0x533)]()),_0x5ba3dc=this[_0x6036cb(0x2be)](_0x19cc1b,Sprite),_0x4d53e7=_0x5a3222['getBattlePortraitFilename']();_0x4d53e7!==''?_0x5ba3dc[_0x6036cb(0x46a)]=ImageManager[_0x6036cb(0x664)](_0x4d53e7):_0x5ba3dc[_0x6036cb(0x46a)]=ImageManager[_0x6036cb(0x60a)];const _0x43a9e5=this[_0x6036cb(0x977)](_0x955265);_0x5ba3dc[_0x6036cb(0x9ea)]['x']=0.5,_0x5ba3dc[_0x6036cb(0x9ea)]['y']=0x1;let _0x1fbea1=Math[_0x6036cb(0x31d)](_0x43a9e5['x']+_0x43a9e5[_0x6036cb(0x7ea)]/0x2)+this[_0x6036cb(0x330)];_0x1fbea1+=_0x5a3222[_0x6036cb(0x847)]();let _0x32328b=Math[_0x6036cb(0x31d)](this['height']);_0x32328b+=_0x5a3222[_0x6036cb(0x1a5)](),_0x5ba3dc[_0x6036cb(0x15b)](_0x1fbea1,_0x32328b);const _0x4d9731=VisuMZ[_0x6036cb(0x6fe)][_0x6036cb(0xa41)][_0x6036cb(0x7a5)][_0x6036cb(0x97a)];_0x5ba3dc[_0x6036cb(0x889)]['x']=_0x4d9731,_0x5ba3dc[_0x6036cb(0x889)]['y']=_0x4d9731,_0x5ba3dc[_0x6036cb(0xa0a)]();}else{const _0x2e07ea=this[_0x6036cb(0x115)](_0x955265);this[_0x6036cb(0x7aa)](_0x5a3222,_0x2e07ea['x'],_0x2e07ea['y'],_0x2e07ea['width'],_0x2e07ea[_0x6036cb(0x6ac)]);}},Window_BattleStatus['prototype'][_0x45d586(0x2be)]=function(_0x5ce5a0,_0x5a49f0){const _0x60c9b2=_0x45d586,_0x1849b5=this[_0x60c9b2(0x3ce)];if(_0x1849b5[_0x5ce5a0])return _0x1849b5[_0x5ce5a0];else{const _0x4742e8=new _0x5a49f0();return _0x1849b5[_0x5ce5a0]=_0x4742e8,this[_0x60c9b2(0xb33)](_0x4742e8),this[_0x60c9b2(0xb33)](this[_0x60c9b2(0x23c)]),_0x4742e8;}},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x6de)]=function(){const _0x31eb4b=_0x45d586;this[_0x31eb4b(0x9f6)](),this[_0x31eb4b(0xb42)](),Window_StatusBase[_0x31eb4b(0x19f)][_0x31eb4b(0x6de)][_0x31eb4b(0x1b5)](this),this[_0x31eb4b(0x45e)]();},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x9f6)]=function(){const _0x1c91c7=_0x45d586;this[_0x1c91c7(0x23c)]=new Sprite(),this[_0x1c91c7(0x23c)][_0x1c91c7(0x18d)]=[new PIXI['filters']['AlphaFilter']()],this[_0x1c91c7(0x23c)][_0x1c91c7(0x210)]=new Rectangle(),this[_0x1c91c7(0x23c)]['move'](this[_0x1c91c7(0x287)],this[_0x1c91c7(0x287)]),this[_0x1c91c7(0x34e)](this['_cursorArea']);},Window_BattleStatus['prototype'][_0x45d586(0xb42)]=function(){const _0x46754f=_0x45d586;this[_0x46754f(0xdf)]=new Sprite(),this['addChild'](this[_0x46754f(0xdf)]);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x656)]=function(){const _0x269dab=_0x45d586;this['_effectsContainer']&&this['addChild'](this[_0x269dab(0xdf)]);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x45e)]=function(){const _0x1bb574=_0x45d586;this[_0x1bb574(0x9ca)]=new Sprite(),this['addChild'](this[_0x1bb574(0x9ca)]);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xda)]=function(){const _0x345845=_0x45d586;this[_0x345845(0x713)]=new Sprite();for(let _0x131e49=0x0;_0x131e49<0x9;_0x131e49++){this[_0x345845(0x713)][_0x345845(0x34e)](new Sprite());}this[_0x345845(0x23c)][_0x345845(0x34e)](this[_0x345845(0x713)]);},Window_BattleStatus['prototype'][_0x45d586(0x8ee)]=function(){const _0x632111=_0x45d586;Window_StatusBase['prototype'][_0x632111(0x8ee)][_0x632111(0x1b5)](this),this[_0x632111(0xbb2)]();},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xbb2)]=function(){const _0x47616b=_0x45d586,_0x44e07f=this[_0x47616b(0x287)];this[_0x47616b(0x23c)][_0x47616b(0x15b)](_0x44e07f,_0x44e07f),this[_0x47616b(0x23c)]['x']=_0x44e07f-this[_0x47616b(0xb0e)]['x'],this[_0x47616b(0x23c)]['y']=_0x44e07f-this[_0x47616b(0xb0e)]['y'],this[_0x47616b(0x48a)]>0x0&&this[_0x47616b(0xb54)]>0x0?this[_0x47616b(0x23c)]['visible']=this[_0x47616b(0x983)]():this['_cursorArea'][_0x47616b(0x3d1)]=![];},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x5e2)]=function(){const _0x28e370=_0x45d586;Window_StatusBase[_0x28e370(0x19f)][_0x28e370(0x5e2)][_0x28e370(0x1b5)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xa0c)]=function(){const _0x3db30e=_0x45d586,_0x18d875=this['_cursorArea']['worldTransform'][_0x3db30e(0x6f1)](new Point(0x0,0x0)),_0x2a8081=this[_0x3db30e(0x23c)]['filterArea'];_0x2a8081['x']=_0x18d875['x']+this[_0x3db30e(0xb0e)]['x'],_0x2a8081['y']=_0x18d875['y']+this[_0x3db30e(0xb0e)]['y'],_0x2a8081[_0x3db30e(0x7ea)]=this[_0x3db30e(0x48a)],_0x2a8081[_0x3db30e(0x6ac)]=this[_0x3db30e(0xb54)];},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xafd)]=function(_0x2e6b2f){const _0x52a2fa=_0x45d586;if(this[_0x52a2fa(0x61d)]()!=='portrait')return;this[_0x52a2fa(0x2e1)](_0x2e6b2f[_0x52a2fa(0x302)]());},Window_BattleStatus['prototype']['addDamageSprite']=function(_0x15e805,_0x4ff3ee){const _0x157d11=_0x45d586;if(!this['_damageContainer'])return;if(!_0x15e805)return;if(!_0x4ff3ee)return;const _0x30f16f=this[_0x157d11(0x977)](_0x4ff3ee['index']());_0x30f16f['x']+=_0x30f16f[_0x157d11(0x7ea)]/0x2+this[_0x157d11(0x330)],_0x15e805['x']=_0x30f16f['x'],_0x15e805['y']=_0x30f16f['y'],this[_0x157d11(0x9ca)][_0x157d11(0x34e)](_0x15e805);},Window_BattleStatus['prototype'][_0x45d586(0x5f9)]=function(_0x401fa6){const _0x27e31b=_0x45d586;if(!this['_damageContainer'])return;if(!_0x401fa6)return;this['_damageContainer'][_0x27e31b(0x6c6)](_0x401fa6);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0xa45)]=function(){const _0x1e24fb=_0x45d586;if(!this[_0x1e24fb(0x6ed)]())return;if(!this[_0x1e24fb(0x40d)])this[_0x1e24fb(0x153)]();this['prepareBorderActor'](),this[_0x1e24fb(0x2c8)]();},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x6ed)]=function(){const _0x489a48=_0x45d586;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x489a48(0x81a)]())return![];return VisuMZ[_0x489a48(0x6fe)]['Settings'][_0x489a48(0x7a5)][_0x489a48(0xbbb)];},Window_BattleStatus[_0x45d586(0x19f)]['createBorderStylePortraitSprite']=function(){const _0x574124=_0x45d586;this[_0x574124(0x40d)]=new Sprite();const _0xe05f30=SceneManager[_0x574124(0x4f4)],_0x55aa9e=_0xe05f30[_0x574124(0x4bb)]['indexOf'](_0xe05f30['_windowLayer']);_0xe05f30['addChildAt'](this['_borderPortraitSprite'],_0x55aa9e),this[_0x574124(0x40d)][_0x574124(0x9ea)]['x']=0.5,this[_0x574124(0x40d)][_0x574124(0x9ea)]['y']=0x1;const _0x5a9ebf=VisuMZ[_0x574124(0x6fe)]['Settings'][_0x574124(0x7a5)]['PortraitScaleBorderStyle'];this['_borderPortraitSprite'][_0x574124(0x889)]['x']=_0x5a9ebf,this[_0x574124(0x40d)][_0x574124(0x889)]['y']=_0x5a9ebf,this[_0x574124(0x40d)]['y']=this['y']+this[_0x574124(0x6ac)],this[_0x574124(0x799)]=0x0;},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x273)]=function(){const _0x5556f8=_0x45d586;return BattleManager[_0x5556f8(0x917)]();},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x939)]=function(){const _0x4aa63f=_0x45d586;this[_0x4aa63f(0x40d)][_0x4aa63f(0x3d1)]=this[_0x4aa63f(0x273)]();const _0x47ec63=BattleManager[_0x4aa63f(0xb77)](),_0x4917f2=_0x47ec63?_0x47ec63['getBattlePortraitFilename']()||'':'';if(_0x47ec63===this['_borderPortraitSprite'][_0x4aa63f(0xb77)]&&_0x4917f2===this[_0x4aa63f(0x40d)][_0x4aa63f(0x3be)])return;this[_0x4aa63f(0x40d)][_0x4aa63f(0xb77)]=_0x47ec63||this[_0x4aa63f(0x40d)][_0x4aa63f(0xb77)],this[_0x4aa63f(0x40d)][_0x4aa63f(0x3be)]=_0x4917f2;if(!_0x47ec63)return;else{if(_0x4917f2===''){this['_borderPortraitSprite']['bitmap']=ImageManager[_0x4aa63f(0x60a)],this[_0x4aa63f(0x40d)][_0x4aa63f(0x3be)]='';return;}else{const _0x41260c=ImageManager[_0x4aa63f(0x664)](_0x4917f2);this[_0x4aa63f(0x40d)][_0x4aa63f(0x125)]=0x0,_0x41260c[_0x4aa63f(0x6d7)](this[_0x4aa63f(0xa47)][_0x4aa63f(0x856)](this,_0x41260c));}}},Window_BattleStatus['prototype']['processBorderActor']=function(_0xf09b36){const _0x140a61=_0x45d586;this[_0x140a61(0x799)]=0x14,this[_0x140a61(0x40d)][_0x140a61(0x46a)]=_0xf09b36;SceneManager[_0x140a61(0x4f4)][_0x140a61(0xaa4)]()?(this[_0x140a61(0x40d)]['x']=0x0,this[_0x140a61(0x89a)]=Math[_0x140a61(0xb32)](_0xf09b36[_0x140a61(0x7ea)]/0x2)):(this[_0x140a61(0x40d)]['x']=this[_0x140a61(0x7ea)],this[_0x140a61(0x89a)]=this[_0x140a61(0x7ea)]*0x3/0x4);this[_0x140a61(0x40d)][_0x140a61(0x125)]=0x0,this[_0x140a61(0x40d)]['y']=this['y']+this[_0x140a61(0x6ac)];const _0x4e5c37=BattleManager[_0x140a61(0xb77)]();_0x4e5c37&&(this['_borderPortraitTargetX']+=_0x4e5c37[_0x140a61(0x847)](),this['_borderPortraitSprite']['y']+=_0x4e5c37['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x45d586(0x19f)]['updateBorderSprite']=function(){const _0x30c7a9=_0x45d586;if(this[_0x30c7a9(0x799)]>0x0){const _0x4c262d=this[_0x30c7a9(0x799)],_0x477e16=this[_0x30c7a9(0x40d)];_0x477e16['x']=(_0x477e16['x']*(_0x4c262d-0x1)+this[_0x30c7a9(0x89a)])/_0x4c262d,_0x477e16[_0x30c7a9(0x125)]=(_0x477e16[_0x30c7a9(0x125)]*(_0x4c262d-0x1)+0xff)/_0x4c262d,this[_0x30c7a9(0x799)]--;}},Window_BattleStatus['prototype'][_0x45d586(0x99d)]=function(){const _0x408eaa=_0x45d586;return;this[_0x408eaa(0xdf)]&&(this[_0x408eaa(0xdf)]['x']=this['x'],this[_0x408eaa(0xdf)]['y']=this['y']),this[_0x408eaa(0x9ca)]&&(this[_0x408eaa(0x9ca)]['x']=this['x'],this[_0x408eaa(0x9ca)]['y']=this['y']);},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x994)]=function(){const _0x46076b=_0x45d586,_0x4df801=VisuMZ[_0x46076b(0x6fe)][_0x46076b(0xa41)]['BattleLayout'];if(_0x4df801['StatusWindowAttachmentBack']){const _0x55872c=new Sprite();_0x55872c[_0x46076b(0x46a)]=ImageManager[_0x46076b(0xbef)](_0x4df801['StatusWindowAttachmentBack']),_0x55872c['x']=_0x4df801[_0x46076b(0x340)]||0x0,_0x55872c['y']=_0x4df801[_0x46076b(0x47b)]||0x0,this[_0x46076b(0xb33)](_0x55872c),this['_backAttachmentSprite']=_0x55872c;}if(_0x4df801[_0x46076b(0xb43)]){const _0x65fadd=new Sprite();_0x65fadd[_0x46076b(0x46a)]=ImageManager['loadSystem'](_0x4df801[_0x46076b(0xb43)]),_0x65fadd['x']=_0x4df801[_0x46076b(0x525)]||0x0,_0x65fadd['y']=_0x4df801[_0x46076b(0x8fe)]||0x0,this[_0x46076b(0x34e)](_0x65fadd),this[_0x46076b(0x590)]=_0x65fadd;}},Window_BattleStatus[_0x45d586(0x19f)][_0x45d586(0x8f3)]=function(){const _0x35c3eb=_0x45d586;this[_0x35c3eb(0x590)]&&this[_0x35c3eb(0x34e)](this[_0x35c3eb(0x590)]),this[_0x35c3eb(0x61e)]&&this[_0x35c3eb(0xb33)](this['_backAttachmentSprite']);},Window_BattleActor[_0x45d586(0x19f)]['isCurrentItemEnabled']=function(){return this['isActionSelectionValid']();},Window_BattleActor['prototype'][_0x45d586(0x286)]=function(){const _0xb1ec3=_0x45d586,_0x54c832=BattleManager[_0xb1ec3(0x517)]();if(!_0x54c832)return!![];if(!_0x54c832[_0xb1ec3(0xba9)]())return!![];const _0x112887=this[_0xb1ec3(0xb77)](this['index']()),_0x2f6e21=_0x54c832[_0xb1ec3(0xba9)]()[_0xb1ec3(0x34a)];if(_0x54c832['isForNotUser']()){if(_0x112887===BattleManager['actor']())return![];}if(_0x54c832[_0xb1ec3(0x99b)]()){if(!_0x112887[_0xb1ec3(0x1e3)]())return![];}if(_0x54c832[_0xb1ec3(0x674)]()){if(!_0x112887['isAlive']())return![];}return!![];},Window_BattleActor[_0x45d586(0x19f)][_0x45d586(0x884)]=function(_0x240b9f){const _0x3a93d9=_0x45d586;this[_0x3a93d9(0x9c3)]=_0x240b9f;},VisuMZ['BattleCore'][_0x45d586(0x559)]=Window_BattleActor[_0x45d586(0x19f)]['processTouch'],Window_BattleActor['prototype'][_0x45d586(0x4a7)]=function(){const _0x5edcd0=_0x45d586;Window_BattleStatus[_0x5edcd0(0x19f)][_0x5edcd0(0x4a7)]['call'](this),this[_0x5edcd0(0x9c3)]?this[_0x5edcd0(0x375)]():VisuMZ['BattleCore'][_0x5edcd0(0x559)]['call'](this);},Window_BattleActor['prototype'][_0x45d586(0x375)]=function(){const _0x55ce2c=_0x45d586,_0x4ac7c5=SceneManager[_0x55ce2c(0x4f4)]['_enemyWindow'];if(!_0x4ac7c5)return;this[_0x55ce2c(0x852)]=![];const _0x4b7d84=this['hitIndex']();if(_0x4b7d84>=0x0){this[_0x55ce2c(0x4e6)](_0x4b7d84);if(TouchInput['isClicked']()){const _0x68f1f1=$gameParty[_0x55ce2c(0xad5)]()[_0x4b7d84],_0x7b2e3a=_0x4ac7c5['_enemies'][_0x55ce2c(0xa63)](_0x68f1f1);_0x7b2e3a>=0x0&&(_0x4ac7c5[_0x55ce2c(0x4e6)](_0x7b2e3a),_0x4ac7c5[_0x55ce2c(0x107)]());}}},Window_BattleActor['prototype'][_0x45d586(0x9b1)]=function(){const _0x520be4=_0x45d586;this[_0x520be4(0x9c3)]&&(this[_0x520be4(0x82c)]++,this[_0x520be4(0x4cf)]=!![]);const _0x306e99=Window_BattleStatus['prototype'][_0x520be4(0x9b1)][_0x520be4(0x1b5)](this);return this[_0x520be4(0x9c3)]&&(this[_0x520be4(0x4cf)]=![]),_0x306e99;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x61b)]=Window_BattleActor[_0x45d586(0x19f)]['show'],Window_BattleActor['prototype']['show']=function(){const _0x2d6f17=_0x45d586;VisuMZ[_0x2d6f17(0x6fe)]['Window_BattleActor_show'][_0x2d6f17(0x1b5)](this);const _0xa9d33f=BattleManager['inputtingAction']();if(_0xa9d33f){const _0x29a242=$gameParty[_0x2d6f17(0x60c)]();_0xa9d33f[_0x2d6f17(0x1f3)]()&&_0x29a242['length']>0x1&&this[_0x2d6f17(0x612)]('pagedown',this['selectAllActors'][_0x2d6f17(0x856)](this));}},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x7f2)]=Window_BattleActor[_0x45d586(0x19f)][_0x45d586(0xb6c)],Window_BattleActor['prototype'][_0x45d586(0xb6c)]=function(){const _0x3e746f=_0x45d586;VisuMZ[_0x3e746f(0x6fe)][_0x3e746f(0x7f2)][_0x3e746f(0x1b5)](this),delete this[_0x3e746f(0x120)][_0x3e746f(0xa76)],delete this[_0x3e746f(0x120)][_0x3e746f(0xb59)];},Window_BattleActor['prototype'][_0x45d586(0x67d)]=function(){const _0x74981a=_0x45d586,_0x533549=BattleManager[_0x74981a(0x517)]();if(_0x533549)_0x533549[_0x74981a(0x1c4)](_0x74981a(0x7a7));this['processOk']();},VisuMZ['BattleCore'][_0x45d586(0x836)]=Window_BattleEnemy[_0x45d586(0x19f)]['initialize'],Window_BattleEnemy[_0x45d586(0x19f)]['initialize']=function(_0x267f28){const _0x2484db=_0x45d586;this[_0x2484db(0xb69)]=null,VisuMZ[_0x2484db(0x6fe)][_0x2484db(0x836)][_0x2484db(0x1b5)](this,_0x267f28);if(Imported['VisuMZ_2_AggroControlSystem']){if(VisuMZ[_0x2484db(0x5b4)][_0x2484db(0x23e)]<1.12){let _0x4dc698='';_0x4dc698+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x4dc698+='in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20',_0x4dc698+=_0x2484db(0x87c),alert(_0x4dc698),SceneManager[_0x2484db(0x16f)]();}}},Window_BattleEnemy[_0x45d586(0x19f)]['maxCols']=function(){const _0x21b25f=_0x45d586;return this[_0x21b25f(0x2e8)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xbdb)]=Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0xa0a)],Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0xa0a)]=function(){const _0x589d5c=_0x45d586;VisuMZ[_0x589d5c(0x6fe)][_0x589d5c(0xbdb)]['call'](this),this['y']=Graphics[_0x589d5c(0x6ac)]*0xa,this[_0x589d5c(0x9e3)]()&&this['openBattleActorWindow']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x947)]=Window_BattleEnemy['prototype'][_0x45d586(0xb6c)],Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0xb6c)]=function(){const _0x36b1d2=_0x45d586;VisuMZ[_0x36b1d2(0x6fe)][_0x36b1d2(0x947)][_0x36b1d2(0x1b5)](this),$gameParty[_0x36b1d2(0x4e6)](null),delete this[_0x36b1d2(0x120)][_0x36b1d2(0xa76)],delete this['_handlers'][_0x36b1d2(0xb59)];},Window_BattleEnemy[_0x45d586(0x19f)]['validTargets']=function(){const _0x2e6c09=_0x45d586;let _0x4bc19d=$gameTroop[_0x2e6c09(0x60c)]();const _0xba0858=BattleManager[_0x2e6c09(0x517)]();if(_0xba0858){_0xba0858[_0x2e6c09(0x1f3)]()&&_0x4bc19d[_0x2e6c09(0x1c9)]>0x1&&this['setHandler'](_0x2e6c09(0xa76),this[_0x2e6c09(0x1aa)][_0x2e6c09(0x856)](this));if(_0xba0858['isForAnyone']()){const _0x4b820b=$gameParty['aliveMembers']();_0x4bc19d=_0x4bc19d[_0x2e6c09(0xb10)](_0x4b820b),_0xba0858[_0x2e6c09(0x1f3)]()&&_0x4b820b[_0x2e6c09(0x1c9)]>0x1&&this[_0x2e6c09(0x612)](_0x2e6c09(0xb59),this[_0x2e6c09(0x67d)]['bind'](this));}}return _0x4bc19d;},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0x291)]=function(){const _0xb883a4=_0x45d586;this[_0xb883a4(0x2bf)]=this[_0xb883a4(0xbd0)](),this[_0xb883a4(0x222)](),Window_Selectable[_0xb883a4(0x19f)][_0xb883a4(0x291)][_0xb883a4(0x1b5)](this);},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0x222)]=function(){const _0x4c5897=_0x45d586;this[_0x4c5897(0x2bf)]['sort']((_0xe6ac1d,_0xfccec0)=>{const _0x4b1fe4=_0x4c5897;if(_0xe6ac1d[_0x4b1fe4(0x7f0)]()!==_0xfccec0[_0x4b1fe4(0x7f0)]()){if(_0xe6ac1d[_0x4b1fe4(0x690)]())return-0x1;if(_0xfccec0['isEnemy']())return 0x1;}if(_0xe6ac1d[_0x4b1fe4(0x7f0)]()&&_0xfccec0[_0x4b1fe4(0x7f0)]())return _0xe6ac1d[_0x4b1fe4(0x302)]()-_0xfccec0['index']();return _0xe6ac1d[_0x4b1fe4(0xa7b)]()[_0x4b1fe4(0x5bb)]===_0xfccec0[_0x4b1fe4(0xa7b)]()['_baseX']?_0xe6ac1d[_0x4b1fe4(0xa7b)]()['_baseY']-_0xfccec0['battler']()[_0x4b1fe4(0x83d)]:_0xe6ac1d[_0x4b1fe4(0xa7b)]()['_baseX']-_0xfccec0[_0x4b1fe4(0xa7b)]()[_0x4b1fe4(0x5bb)];}),SceneManager[_0x4c5897(0x8cd)]()&&this['_enemies'][_0x4c5897(0x584)]();},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0x874)]=function(){const _0xad3804=_0x45d586,_0x30132c=VisuMZ[_0xad3804(0x6fe)][_0xad3804(0xa41)][_0xad3804(0x401)];_0x30132c[_0xad3804(0x919)]?this[_0xad3804(0xa2e)]():this['autoSelectPriority']();},Window_BattleEnemy[_0x45d586(0x19f)]['autoSelectLastSelected']=function(){const _0x308abe=_0x45d586,_0x4e7623=BattleManager[_0x308abe(0x517)]();if(_0x4e7623&&_0x4e7623[_0x308abe(0x652)]()){if(_0x4e7623[_0x308abe(0x92f)]()){if(this['_lastActor']&&this['_enemies'][_0x308abe(0x840)](this[_0x308abe(0x44a)])){const _0x4ee1b8=this['_enemies'][_0x308abe(0xa63)](this[_0x308abe(0x44a)]);return this[_0x308abe(0x167)](_0x4ee1b8);}else return this[_0x308abe(0x76a)]();}}if(this[_0x308abe(0xb69)]&&this[_0x308abe(0x2bf)]['includes'](this[_0x308abe(0xb69)])){const _0x35330a=this[_0x308abe(0x2bf)][_0x308abe(0xa63)](this['_lastEnemy']);this[_0x308abe(0x167)](_0x35330a);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x45d586(0x19f)]['autoSelectPriority']=function(){const _0x608d1a=_0x45d586,_0x1fb076=BattleManager[_0x608d1a(0x517)]();if(_0x1fb076&&_0x1fb076[_0x608d1a(0x652)]()){const _0x1f3fdd=$gameParty[_0x608d1a(0x60c)]()[0x0];let _0x3e7280=this[_0x608d1a(0x2bf)][_0x608d1a(0xa63)](_0x1f3fdd);const _0x31b283=_0x1fb076['item']()[_0x608d1a(0x657)];if(_0x31b283[_0x608d1a(0x95f)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x608d1a(0x167)](_0x3e7280);return;}else{if(_0x31b283['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x608d1a(0x167)](_0x3e7280-0x1);return;}}}const _0xe3c263=VisuMZ[_0x608d1a(0x6fe)][_0x608d1a(0xa41)][_0x608d1a(0x401)];let _0x4ffea0=![];$gameSystem['isSideView']()?_0x4ffea0=_0xe3c263['SideviewSelect']:_0x4ffea0=_0xe3c263['FrontViewSelect'],this['forceSelect'](_0x4ffea0?this[_0x608d1a(0x2e8)]()-0x1:0x0);},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0x9c9)]=function(){const _0x2040f1=_0x45d586;Window_Selectable[_0x2040f1(0x19f)][_0x2040f1(0x9c9)][_0x2040f1(0x1b5)](this);if(!this[_0x2040f1(0x6bc)]())return;if(this[_0x2040f1(0x6bc)]()['isEnemy']())this[_0x2040f1(0xb69)]=this[_0x2040f1(0x6bc)]();if(this[_0x2040f1(0x6bc)]()[_0x2040f1(0x7f0)]())this['_lastActor']=this['enemy']();},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0x4e6)]=function(_0x439b09){const _0x1122d5=_0x45d586;Window_Selectable[_0x1122d5(0x19f)]['select'][_0x1122d5(0x1b5)](this,_0x439b09),$gameTroop['select'](this[_0x1122d5(0x6bc)]()),$gameParty[_0x1122d5(0x4e6)](this[_0x1122d5(0x6bc)]());if(!this['enemy']())return;if(this[_0x1122d5(0x9e3)]()){const _0x3db41b=SceneManager['_scene'][_0x1122d5(0x78e)];this[_0x1122d5(0x6bc)]()[_0x1122d5(0x7f0)]()?_0x3db41b[_0x1122d5(0x4e6)](this[_0x1122d5(0x6bc)]()[_0x1122d5(0x302)]()):_0x3db41b[_0x1122d5(0x65b)]();}},Window_BattleEnemy['prototype'][_0x45d586(0x9e3)]=function(){const _0x554f8b=_0x45d586;if(!this[_0x554f8b(0x3d1)])return![];if($gameSystem[_0x554f8b(0x138)]())return![];const _0x4e0f60=SceneManager[_0x554f8b(0x4f4)][_0x554f8b(0x61d)](),_0x492bf4=[_0x554f8b(0x915),_0x554f8b(0x505),'xp','portrait',_0x554f8b(0x70e)];return _0x492bf4['includes'](_0x4e0f60);},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0xb45)]=function(){const _0x2acd82=_0x45d586,_0x3c957b=SceneManager[_0x2acd82(0x4f4)][_0x2acd82(0x78e)];_0x3c957b['show'](),_0x3c957b['setEnemyWindowMode'](!![]),_0x3c957b[_0x2acd82(0x291)](),_0x3c957b[_0x2acd82(0x65b)]();const _0x3e6601=SceneManager[_0x2acd82(0x4f4)][_0x2acd82(0x61d)](),_0x52cf88=['xp',_0x2acd82(0x376),_0x2acd82(0x70e)];if(_0x52cf88[_0x2acd82(0x840)](_0x3e6601)){const _0x2ea803=SceneManager[_0x2acd82(0x4f4)][_0x2acd82(0x3c5)];_0x2ea803['scale']['y']=0x0;}},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0x90c)]=function(){const _0x2fcd50=_0x45d586,_0x10fa9c=SceneManager[_0x2fcd50(0x4f4)][_0x2fcd50(0x78e)];_0x10fa9c['hide'](),_0x10fa9c[_0x2fcd50(0x884)](![]),_0x10fa9c[_0x2fcd50(0x65b)]();const _0x52ce19=SceneManager[_0x2fcd50(0x4f4)]['_statusWindow'];_0x52ce19['scale']['y']=0x1;},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0x1aa)]=function(){const _0x395709=_0x45d586,_0x24a6a6=BattleManager[_0x395709(0x517)]();if(_0x24a6a6)_0x24a6a6[_0x395709(0x1c4)](_0x395709(0x245));this[_0x395709(0x107)]();},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0x67d)]=function(){const _0x11c776=_0x45d586,_0x2e5c97=BattleManager[_0x11c776(0x517)]();if(_0x2e5c97)_0x2e5c97[_0x11c776(0x1c4)](_0x11c776(0x7a7));this[_0x11c776(0x107)]();},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0x513)]=function(){return this['isActionSelectionValid']();},Window_BattleEnemy[_0x45d586(0x19f)][_0x45d586(0x286)]=function(){const _0x43a7f9=_0x45d586,_0x48427f=BattleManager[_0x43a7f9(0x517)]();if(!_0x48427f)return!![];if(!_0x48427f[_0x43a7f9(0xba9)]())return!![];const _0x39759b=this[_0x43a7f9(0x6bc)](),_0x3e5816=_0x48427f[_0x43a7f9(0xba9)]()[_0x43a7f9(0x34a)];if(_0x48427f['isForNotUser']()){if(_0x39759b===BattleManager[_0x43a7f9(0xb77)]())return![];}return!![];},Window_BattleItem['prototype'][_0x45d586(0x840)]=function(_0x32649b){const _0x5a27f4=_0x45d586;if(!_0x32649b)return![];return _0x32649b[_0x5a27f4(0x912)]===0x0||_0x32649b[_0x5a27f4(0x912)]===0x1;};function Window_AutoBattleCancel(){const _0x1346ca=_0x45d586;this[_0x1346ca(0x6d1)](...arguments);}Window_AutoBattleCancel[_0x45d586(0x19f)]=Object[_0x45d586(0x838)](Window_Base['prototype']),Window_AutoBattleCancel[_0x45d586(0x19f)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(_0xcd06d){const _0x51a996=_0x45d586;Window_Base['prototype'][_0x51a996(0x6d1)][_0x51a996(0x1b5)](this,_0xcd06d),this[_0x51a996(0x250)](this['bgType']()),this[_0x51a996(0x291)]();},Window_AutoBattleCancel[_0x45d586(0x19f)][_0x45d586(0x1e4)]=function(){const _0xf3db03=_0x45d586;return VisuMZ[_0xf3db03(0x6fe)]['Settings'][_0xf3db03(0x2cb)]['AutoBattleBgType'];},Window_AutoBattleCancel[_0x45d586(0x19f)]['refresh']=function(){const _0x30a604=_0x45d586;this[_0x30a604(0x394)][_0x30a604(0xb8d)]();const _0x4aac8d=VisuMZ[_0x30a604(0x6fe)][_0x30a604(0xa41)][_0x30a604(0x2cb)][_0x30a604(0x9b3)],_0x2f4014=_0x4aac8d[_0x30a604(0x534)](this[_0x30a604(0x8e1)](),this[_0x30a604(0x4ed)]()),_0xe02283=this[_0x30a604(0x82e)](_0x2f4014)['width'],_0x4fbf0a=Math[_0x30a604(0x85a)]((this['innerWidth']-_0xe02283)/0x2);this['drawTextEx'](_0x2f4014,_0x4fbf0a,0x0,_0xe02283);},Window_AutoBattleCancel[_0x45d586(0x19f)][_0x45d586(0x8e1)]=function(){const _0x1612cb=_0x45d586;return Imported[_0x1612cb(0xbc5)]?TextManager[_0x1612cb(0xa3a)]('ok'):VisuMZ[_0x1612cb(0x6fe)][_0x1612cb(0xa41)]['AutoBattle'][_0x1612cb(0x35e)];},Window_AutoBattleCancel[_0x45d586(0x19f)][_0x45d586(0x4ed)]=function(){const _0x41d5d8=_0x45d586;return Imported[_0x41d5d8(0xbc5)]?TextManager[_0x41d5d8(0xa3a)]('cancel'):VisuMZ[_0x41d5d8(0x6fe)][_0x41d5d8(0xa41)][_0x41d5d8(0x2cb)][_0x41d5d8(0xbdd)];},Window_AutoBattleCancel['prototype']['update']=function(){const _0x3fe58d=_0x45d586;Window_Base[_0x3fe58d(0x19f)][_0x3fe58d(0xae1)]['call'](this),this[_0x3fe58d(0x805)](),this[_0x3fe58d(0x4ec)]();},Window_AutoBattleCancel['prototype'][_0x45d586(0x805)]=function(){const _0x55d851=_0x45d586;this[_0x55d851(0x3d1)]=BattleManager['_autoBattle'];},Window_AutoBattleCancel['prototype']['updateCancel']=function(){const _0x256ba6=_0x45d586;if(!BattleManager['_autoBattle'])return;(Input['isTriggered']('ok')||Input[_0x256ba6(0x155)]('cancel')||TouchInput[_0x256ba6(0x3a4)]()||TouchInput[_0x256ba6(0x2a6)]())&&(SoundManager[_0x256ba6(0x4ac)](),BattleManager[_0x256ba6(0xa4b)]=![],Input[_0x256ba6(0xb8d)](),TouchInput[_0x256ba6(0xb8d)]());};function Window_EnemyName(){const _0x5380d9=_0x45d586;this[_0x5380d9(0x6d1)](...arguments);}Window_EnemyName['prototype']=Object[_0x45d586(0x838)](Window_StatusBase['prototype']),Window_EnemyName[_0x45d586(0x19f)]['constructor']=Window_EnemyName,Window_EnemyName[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(_0x18ec29){const _0x1838f8=_0x45d586;this[_0x1838f8(0x1bf)]=_0x18ec29,this['_text']='';const _0x193e9c=new Rectangle(0x0,0x0,Graphics[_0x1838f8(0x6ae)],this['lineHeight']()*0x4);Window_StatusBase[_0x1838f8(0x19f)]['initialize'][_0x1838f8(0x1b5)](this,_0x193e9c),this['setBackgroundType'](0x2),this[_0x1838f8(0x41d)]=0x0;},Window_EnemyName['prototype']['updatePadding']=function(){this['padding']=0x0;},Window_EnemyName[_0x45d586(0x19f)][_0x45d586(0x6bc)]=function(){const _0x48ac07=_0x45d586;return $gameTroop['members']()[this[_0x48ac07(0x1bf)]];},Window_EnemyName[_0x45d586(0x19f)][_0x45d586(0xae1)]=function(){const _0x4e33a6=_0x45d586;Window_StatusBase[_0x4e33a6(0x19f)][_0x4e33a6(0xae1)][_0x4e33a6(0x1b5)](this),this[_0x4e33a6(0x6bc)]()&&this[_0x4e33a6(0x6bc)]()[_0x4e33a6(0x5c2)]()!==this['_text']&&(this[_0x4e33a6(0x4b5)]=this[_0x4e33a6(0x6bc)]()[_0x4e33a6(0x5c2)](),this['refresh']()),this[_0x4e33a6(0x3cd)](),this[_0x4e33a6(0x8f0)]();},Window_EnemyName[_0x45d586(0x19f)][_0x45d586(0x3cd)]=function(){const _0x172c0=_0x45d586;if(!this['enemy']()){if(this['contentsOpacity']>0x0)this[_0x172c0(0x41d)]-=0x10;}else{if(this[_0x172c0(0x6bc)]()[_0x172c0(0x1e3)]()){if(this[_0x172c0(0x41d)]>0x0)this[_0x172c0(0x41d)]-=0x10;}else{if(SceneManager['_scene'][_0x172c0(0x918)]&&SceneManager['_scene']['_enemyWindow'][_0x172c0(0x4cf)]&&SceneManager[_0x172c0(0x4f4)][_0x172c0(0x918)][_0x172c0(0x2bf)]['includes'](this[_0x172c0(0x6bc)]())){if(this[_0x172c0(0x41d)]<0xff)this[_0x172c0(0x41d)]+=0x10;}else this['contentsOpacity']>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName[_0x45d586(0x19f)][_0x45d586(0x8f0)]=function(){const _0x39f9df=_0x45d586;if(!this[_0x39f9df(0x6bc)]())return;SceneManager[_0x39f9df(0x8cd)]()?this['x']=Graphics[_0x39f9df(0x6ae)]-this['enemy']()[_0x39f9df(0xa7b)]()[_0x39f9df(0x5bb)]:this['x']=this['enemy']()[_0x39f9df(0xa7b)]()[_0x39f9df(0x5bb)];this['x']-=Math[_0x39f9df(0x31d)](this[_0x39f9df(0x7ea)]/0x2),this['y']=this['enemy']()[_0x39f9df(0xa7b)]()[_0x39f9df(0x83d)]-Math[_0x39f9df(0x31d)](this[_0x39f9df(0x7fb)]()*1.5);const _0x1c80df=VisuMZ[_0x39f9df(0x6fe)][_0x39f9df(0xa41)][_0x39f9df(0x401)];this['x']+=_0x1c80df[_0x39f9df(0x682)]||0x0,this['y']+=_0x1c80df['NameOffsetY']||0x0;},Window_EnemyName[_0x45d586(0x19f)][_0x45d586(0x773)]=function(){const _0x2aee0e=_0x45d586;Window_Base[_0x2aee0e(0x19f)][_0x2aee0e(0x773)][_0x2aee0e(0x1b5)](this),this[_0x2aee0e(0x394)][_0x2aee0e(0x5a2)]=VisuMZ[_0x2aee0e(0x6fe)][_0x2aee0e(0xa41)][_0x2aee0e(0x401)][_0x2aee0e(0x1f1)];},Window_EnemyName[_0x45d586(0x19f)][_0x45d586(0x291)]=function(){const _0x94e569=_0x45d586;Window_StatusBase[_0x94e569(0x19f)][_0x94e569(0x291)][_0x94e569(0x1b5)](this),this[_0x94e569(0x394)][_0x94e569(0xb8d)]();if(!this['enemy']())return;this[_0x94e569(0x414)]();},Window_EnemyName[_0x45d586(0x19f)][_0x45d586(0x414)]=function(){const _0x42b95e=_0x45d586;this[_0x42b95e(0x4b5)]=this[_0x42b95e(0x6bc)]()['name']();const _0x275235=this[_0x42b95e(0x82e)](this['_text'])[_0x42b95e(0x7ea)],_0x1e8a25=Math[_0x42b95e(0x31d)]((this[_0x42b95e(0x48a)]-_0x275235)/0x2);this[_0x42b95e(0x55c)](this[_0x42b95e(0x4b5)],_0x1e8a25,0x0,_0x275235+0x8);},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x4f1)]=function(){const _0x5d30ac=_0x45d586;return VisuMZ[_0x5d30ac(0x6fe)][_0x5d30ac(0xa41)][_0x5d30ac(0x63e)][_0x5d30ac(0xbcd)];},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x734)]=function(){const _0x5b5e9f=_0x45d586;return VisuMZ[_0x5b5e9f(0x6fe)][_0x5b5e9f(0xa41)][_0x5b5e9f(0x63e)][_0x5b5e9f(0x4ef)];},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x8ab)]=function(){const _0x5cbf49=_0x45d586;return VisuMZ[_0x5cbf49(0x6fe)][_0x5cbf49(0xa41)][_0x5cbf49(0x63e)]['BackColor'];},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xac2)]=function(){return![];},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x2b7)]=function(_0x38bc30,_0x2e9f45){const _0x123f25=_0x45d586;this['unshift']('actionSplicePoint'),BattleManager[_0x123f25(0x38c)](_0x38bc30,_0x2e9f45),this['callNextMethod']();},Window_BattleLog['prototype'][_0x45d586(0xa1d)]=function(_0x4d1830,_0x4c4f22,_0x11094b){const _0x41021c=_0x45d586;this[_0x41021c(0x96c)](_0x41021c(0x9a2)),BattleManager[_0x41021c(0x6bd)](_0x4d1830,_0x4c4f22,_0x11094b),this['callNextMethod']();},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x9a2)]=function(){const _0x214faf=_0x45d586;this[_0x214faf(0x3fe)]();},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x119)]=function(_0x15e3fe){const _0x183dd2=_0x45d586,_0x28164d=Array[_0x183dd2(0x19f)]['slice'][_0x183dd2(0x1b5)](arguments,0x1),_0x4b962e={'name':_0x15e3fe,'params':_0x28164d},_0x2fc6ac=this[_0x183dd2(0xb7e)]['map'](_0xca68c9=>_0xca68c9[_0x183dd2(0x5c2)])[_0x183dd2(0xa63)](_0x183dd2(0x9a2));_0x2fc6ac>=0x0?this['_methods'][_0x183dd2(0x58b)](_0x2fc6ac,0x0,_0x4b962e):this[_0x183dd2(0xb7e)][_0x183dd2(0x119)](_0x4b962e);},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x96c)]=function(_0x2c9b08){const _0x36603b=_0x45d586,_0x56826c=Array[_0x36603b(0x19f)][_0x36603b(0x25a)][_0x36603b(0x1b5)](arguments,0x1);this[_0x36603b(0xb7e)][_0x36603b(0x96c)]({'name':_0x2c9b08,'params':_0x56826c});},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x462)]=function(){const _0x3dc0f6=_0x45d586;if(!$gameTemp['isPlaytest']())return;console[_0x3dc0f6(0x833)](this[_0x3dc0f6(0xb7e)]['map'](_0x5599c6=>_0x5599c6[_0x3dc0f6(0x5c2)])['join']('\x0a'));},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x176)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x291)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x291)]=function(){const _0x5ef3bb=_0x45d586;this[_0x5ef3bb(0x2b5)]=!![];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x867)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xae1)],Window_BattleLog[_0x45d586(0x19f)]['update']=function(){const _0x20e4ab=_0x45d586;VisuMZ[_0x20e4ab(0x6fe)][_0x20e4ab(0x867)][_0x20e4ab(0x1b5)](this);if(this['_requestRefresh'])this['processRefresh']();},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xbc2)]=function(){const _0x4d09f0=_0x45d586;this[_0x4d09f0(0x2b5)]=![],VisuMZ[_0x4d09f0(0x6fe)][_0x4d09f0(0x176)][_0x4d09f0(0x1b5)](this);},Window_BattleLog[_0x45d586(0x19f)]['drawLineText']=function(_0x5e9fed){const _0x52ceed=_0x45d586;let _0x5d5e91=VisuMZ[_0x52ceed(0x6fe)]['Settings'][_0x52ceed(0x63e)]['TextAlign'][_0x52ceed(0x2ab)]()[_0x52ceed(0x379)](),_0xfccfe1=this[_0x52ceed(0x74d)][_0x5e9fed];if(_0xfccfe1[_0x52ceed(0x95f)](/<LEFT>/i))_0x5d5e91=_0x52ceed(0x717);else{if(_0xfccfe1[_0x52ceed(0x95f)](/<CENTER>/i))_0x5d5e91=_0x52ceed(0x735);else _0xfccfe1[_0x52ceed(0x95f)](/<RIGHT>/i)&&(_0x5d5e91=_0x52ceed(0xae5));}_0xfccfe1=_0xfccfe1[_0x52ceed(0x646)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0xfccfe1=_0xfccfe1[_0x52ceed(0x646)](/\\I\[0\]/gi,'');const _0x49cc98=this[_0x52ceed(0xa51)](_0x5e9fed);this[_0x52ceed(0x394)][_0x52ceed(0xb5a)](_0x49cc98['x'],_0x49cc98['y'],_0x49cc98[_0x52ceed(0x7ea)],_0x49cc98[_0x52ceed(0x6ac)]);const _0x4f9b92=this[_0x52ceed(0x82e)](_0xfccfe1)[_0x52ceed(0x7ea)];let _0xd8cc2b=_0x49cc98['x'];if(_0x5d5e91===_0x52ceed(0x735))_0xd8cc2b+=(_0x49cc98[_0x52ceed(0x7ea)]-_0x4f9b92)/0x2;else _0x5d5e91===_0x52ceed(0xae5)&&(_0xd8cc2b+=_0x49cc98[_0x52ceed(0x7ea)]-_0x4f9b92);this[_0x52ceed(0x55c)](_0xfccfe1,_0xd8cc2b,_0x49cc98['y'],_0x4f9b92+0x8);},Window_BattleLog[_0x45d586(0x19f)]['addText']=function(_0x5d3c7d){const _0x3960a7=_0x45d586;this[_0x3960a7(0x74d)][_0x3960a7(0x119)](_0x5d3c7d),this[_0x3960a7(0x291)](),this[_0x3960a7(0x3fe)]();},Window_BattleLog[_0x45d586(0x19f)]['updateWaitMode']=function(){const _0x5180a3=_0x45d586;let _0x30bde0=![];switch(this['_waitMode']){case _0x5180a3(0x941):_0x30bde0=this[_0x5180a3(0x992)][_0x5180a3(0x6d9)]();break;case _0x5180a3(0x5be):_0x30bde0=this[_0x5180a3(0x992)]['isAnyoneMoving']();break;case _0x5180a3(0x275):_0x30bde0=this[_0x5180a3(0x992)]['isAnimationPlaying']();break;case _0x5180a3(0x663):_0x30bde0=this[_0x5180a3(0x992)]['isAnyoneFloating']();break;case _0x5180a3(0x383):_0x30bde0=this[_0x5180a3(0x992)]['isAnyoneJumping']();break;case'opacity':_0x30bde0=this[_0x5180a3(0x992)]['isAnyoneChangingOpacity']();break;}return!_0x30bde0&&(this['_waitMode']=''),_0x30bde0;},Window_BattleLog[_0x45d586(0x19f)]['waitForAnimation']=function(){const _0x15d9fb=_0x45d586;this[_0x15d9fb(0x9c6)](_0x15d9fb(0x275));},Window_BattleLog[_0x45d586(0x19f)]['waitForFloat']=function(){this['setWaitMode']('float');},Window_BattleLog[_0x45d586(0x19f)]['waitForJump']=function(){const _0x59c178=_0x45d586;this[_0x59c178(0x9c6)](_0x59c178(0x383));},Window_BattleLog[_0x45d586(0x19f)]['waitForOpacity']=function(){const _0x50e26e=_0x45d586;this['setWaitMode'](_0x50e26e(0x125));},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x74e)]=function(){const _0x2c7fd0=_0x45d586,_0x485bdc=VisuMZ[_0x2c7fd0(0x6fe)][_0x2c7fd0(0xa41)][_0x2c7fd0(0x63e)];if(!_0x485bdc['StartTurnShow'])return;this[_0x2c7fd0(0x119)](_0x2c7fd0(0x53b),_0x485bdc['StartTurnMsg'][_0x2c7fd0(0x534)]($gameTroop['turnCount']())),this[_0x2c7fd0(0x119)](_0x2c7fd0(0xae4),_0x485bdc[_0x2c7fd0(0x13f)]),this[_0x2c7fd0(0x119)]('clear');};var $subject,$action,$targets;Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x133)]=function(_0x36e320,_0x182d24,_0x1a31ab){const _0x4ad73a=_0x45d586;$subject=_0x36e320,$action=_0x182d24,$targets=_0x1a31ab,this['isCustomActionSequence'](_0x182d24)?BattleManager[_0x4ad73a(0x17d)]():this['usePremadeActionSequence'](_0x36e320,_0x182d24,_0x1a31ab);},Window_BattleLog[_0x45d586(0x19f)]['isCustomActionSequence']=function(_0x5f328c){const _0x7443df=_0x45d586;if(!SceneManager[_0x7443df(0x81a)]())return![];if(!_0x5f328c)return![];if(!_0x5f328c[_0x7443df(0xba9)]())return![];if(_0x5f328c['item']()[_0x7443df(0x34a)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x7443df(0x9f8)](_0x5f328c[_0x7443df(0xba9)]()))return!![];return![];},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xaae)]=function(_0x2a74af,_0x29c091,_0x476f8a){const _0x1c5366=_0x45d586;this['setupActionSet'](_0x2a74af,_0x29c091,_0x476f8a),this[_0x1c5366(0x7e6)](_0x2a74af,_0x29c091,_0x476f8a),this['finishActionSet'](_0x2a74af,_0x29c091,_0x476f8a);},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x950)]=function(_0x3abf91,_0x3d8fac){const _0x4c2a3e=_0x45d586,_0x4d7a7d=VisuMZ[_0x4c2a3e(0x6fe)][_0x4c2a3e(0xa41)][_0x4c2a3e(0x63e)];_0x4d7a7d['ActionCenteredName']&&this['push'](_0x4c2a3e(0x53b),_0x4c2a3e(0x556)[_0x4c2a3e(0x534)](DataManager[_0x4c2a3e(0x4e1)](_0x3d8fac)));if(DataManager['isSkill'](_0x3d8fac)){if(_0x4d7a7d[_0x4c2a3e(0xbd4)])this[_0x4c2a3e(0x788)](_0x3d8fac[_0x4c2a3e(0x8ea)],_0x3abf91,_0x3d8fac);if(_0x4d7a7d['ActionSkillMsg2'])this[_0x4c2a3e(0x788)](_0x3d8fac[_0x4c2a3e(0xbcf)],_0x3abf91,_0x3d8fac);}else{if(_0x4d7a7d[_0x4c2a3e(0x6c2)])this['displayItemMessage'](TextManager[_0x4c2a3e(0x32f)],_0x3abf91,_0x3d8fac);}},Window_BattleLog[_0x45d586(0x19f)]['setupActionSet']=function(_0x18487a,_0x515fdc,_0x641e04){const _0xfca05c=_0x45d586,_0x46d028=_0x515fdc[_0xfca05c(0xba9)]();this[_0xfca05c(0x950)](_0x18487a,_0x46d028),this[_0xfca05c(0x119)]('applyImmortal',_0x18487a,_0x641e04,!![]),this[_0xfca05c(0x119)]('performActionStart',_0x18487a,_0x515fdc),this[_0xfca05c(0x119)]('waitForMovement'),this[_0xfca05c(0x119)](_0xfca05c(0x3a3),_0x18487a,_0x515fdc),this[_0xfca05c(0x119)](_0xfca05c(0x16a));},Window_BattleLog['prototype'][_0x45d586(0x7e6)]=function(_0x493cd7,_0x267118,_0x4bd230){const _0x497013=_0x45d586;if(this['isMeleeSingleTargetAction'](_0x267118))this[_0x497013(0x73c)](_0x493cd7,_0x267118,_0x4bd230);else{if(this[_0x497013(0x8df)](_0x267118))this[_0x497013(0x72c)](_0x493cd7,_0x267118,_0x4bd230);else _0x267118[_0x497013(0x623)]()?this['targetActionSet'](_0x493cd7,_0x267118,_0x4bd230):this[_0x497013(0x4f5)](_0x493cd7,_0x267118,_0x4bd230);}},Window_BattleLog['prototype'][_0x45d586(0xa53)]=function(_0x41a53f,_0x5c3bc8,_0x38e06d,_0x101086){const _0x583b6a=_0x45d586;if(_0x5c3bc8){const _0x4698e5=_0x41a53f[_0x583b6a(0xa7b)]();this[_0x583b6a(0x119)](_0x583b6a(0x22a),[_0x41a53f],_0x38e06d,_0x101086),this[_0x583b6a(0x119)]('performMoveToPoint',_0x41a53f,_0x4698e5['_homeX'],_0x4698e5[_0x583b6a(0xac0)],_0x101086,![],_0x583b6a(0xa8e)),this[_0x583b6a(0x119)](_0x583b6a(0x135),[_0x41a53f],'evade'),this['push']('waitForMovement'),this['push'](_0x583b6a(0x135),[_0x41a53f],_0x583b6a(0xab0));}},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x804)]=function(_0x18cec0){const _0x3c4742=_0x45d586;if(!_0x18cec0['isPhysical']())return![];if(!_0x18cec0['isForOne']())return![];if(!_0x18cec0['isForOpponent']())return![];return VisuMZ[_0x3c4742(0x6fe)][_0x3c4742(0xa41)]['ActionSequence']['AutoMeleeSolo'];},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x73c)]=function(_0x160d57,_0x5514e0,_0x22bd43){const _0x10d84f=_0x45d586,_0x422a5e=_0x160d57['getAttackMotion']()[_0x10d84f(0x267)]<0x2,_0x1ba1f3=0x14,_0x8969be=0x30;let _0xa42e06=!![];_0x22bd43[_0x10d84f(0x1c9)]>0x0&&_0x160d57['isActor']()===_0x22bd43[0x0][_0x10d84f(0x7f0)]()&&(_0xa42e06=![]);_0x422a5e&&_0xa42e06&&(this[_0x10d84f(0x119)](_0x10d84f(0x22a),[_0x160d57],_0x8969be,_0x1ba1f3),this[_0x10d84f(0x119)](_0x10d84f(0x2ec),_0x160d57,_0x22bd43,_0x10d84f(0x35f),_0x1ba1f3,!![],_0x10d84f(0xa8e),!![]),this[_0x10d84f(0x119)]('requestMotion',[_0x160d57],_0x10d84f(0xab0)),this[_0x10d84f(0x119)](_0x10d84f(0x2c7)));let _0x1f796c=_0x5514e0[_0x10d84f(0xe4)]()?this['getDualWieldTimes'](_0x160d57):0x1;for(let _0x2e0be9=0x0;_0x2e0be9<_0x1f796c;_0x2e0be9++){_0x5514e0['isAttack']()&&_0x160d57[_0x10d84f(0x7f0)]()&&this[_0x10d84f(0x119)](_0x10d84f(0xb66),_0x160d57,_0x2e0be9),_0x5514e0[_0x10d84f(0xba9)]()[_0x10d84f(0x71b)]<0x0?this[_0x10d84f(0x89b)](_0x160d57,_0x5514e0,_0x22bd43):this[_0x10d84f(0x4f5)](_0x160d57,_0x5514e0,_0x22bd43);}_0x5514e0[_0x10d84f(0xe4)]()&&_0x160d57[_0x10d84f(0x7f0)]()&&this[_0x10d84f(0x119)](_0x10d84f(0x6db),_0x160d57),this[_0x10d84f(0x119)](_0x10d84f(0x52b),_0x160d57,_0x22bd43,![]),this['addMeleeReturnActionSet'](_0x160d57,_0x422a5e,_0x8969be,_0x1ba1f3);},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x8df)]=function(_0x3015aa){const _0x4895ed=_0x45d586;if(!_0x3015aa['isPhysical']())return![];if(!_0x3015aa[_0x4895ed(0xb67)]())return![];if(!_0x3015aa[_0x4895ed(0x29f)]())return![];return VisuMZ['BattleCore'][_0x4895ed(0xa41)][_0x4895ed(0x205)]['AutoMeleeAoE'];},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x72c)]=function(_0x3634d5,_0x56325d,_0x48b201){const _0x20b535=_0x45d586,_0xdee52b=_0x3634d5['getAttackMotion']()[_0x20b535(0x267)]<0x2,_0x3c7a6b=0x14,_0x442541=0x30;if(_0xdee52b){this['push'](_0x20b535(0x22a),[_0x3634d5],_0x442541,_0x3c7a6b);const _0x453773=_0x48b201['length']>0x1?_0x20b535(0xd6):_0x20b535(0x35f);this[_0x20b535(0x119)](_0x20b535(0x2ec),_0x3634d5,_0x48b201,_0x453773,_0x3c7a6b,!![],_0x20b535(0xa8e),!![]),this[_0x20b535(0x119)](_0x20b535(0x135),[_0x3634d5],_0x20b535(0xab0)),this[_0x20b535(0x119)](_0x20b535(0x2c7));}let _0x51ca95=_0x56325d[_0x20b535(0xe4)]()?this['getDualWieldTimes'](_0x3634d5):0x1;for(let _0x2aa6cc=0x0;_0x2aa6cc<_0x51ca95;_0x2aa6cc++){_0x56325d[_0x20b535(0xe4)]()&&_0x3634d5[_0x20b535(0x7f0)]()&&this[_0x20b535(0x119)]('setActiveWeaponSet',_0x3634d5,_0x2aa6cc),this[_0x20b535(0x4f5)](_0x3634d5,_0x56325d,_0x48b201);}_0x56325d[_0x20b535(0xe4)]()&&_0x3634d5['isActor']()&&this[_0x20b535(0x119)](_0x20b535(0x6db),_0x3634d5),this[_0x20b535(0x119)](_0x20b535(0x52b),_0x3634d5,_0x48b201,![]),this[_0x20b535(0xa53)](_0x3634d5,_0xdee52b,_0x442541,_0x3c7a6b);},Window_BattleLog[_0x45d586(0x19f)]['targetActionSet']=function(_0x12f67f,_0x2355b0,_0x470f6d){const _0x3f137c=_0x45d586,_0x396949=_0x2355b0[_0x3f137c(0xba9)]();for(const _0x17e565 of _0x470f6d){if(!_0x17e565)continue;this['push'](_0x3f137c(0xa5e),_0x12f67f,_0x2355b0),this[_0x3f137c(0x119)](_0x3f137c(0xae4),Sprite_Battler[_0x3f137c(0x591)]),this[_0x3f137c(0x119)](_0x3f137c(0x7d3),_0x12f67f,[_0x17e565],_0x396949[_0x3f137c(0x71b)]),this[_0x3f137c(0x119)](_0x3f137c(0xae4),0x18),this[_0x3f137c(0x119)](_0x3f137c(0x2b7),_0x12f67f,_0x17e565);}},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x4f5)]=function(_0x543202,_0x241367,_0x2088b9){const _0x4d5720=_0x45d586,_0x53c068=_0x241367[_0x4d5720(0xba9)]();let _0x2a857d=_0x241367[_0x4d5720(0xe4)]()?0x1+_0x543202[_0x4d5720(0xd8)]():0x1;while(_0x2a857d--){this[_0x4d5720(0x119)]('performAction',_0x543202,_0x241367),this[_0x4d5720(0x119)]('waitCount',Sprite_Battler[_0x4d5720(0x591)]),this[_0x4d5720(0x119)](_0x4d5720(0x7d3),_0x543202,_0x2088b9[_0x4d5720(0x5e8)](),_0x53c068[_0x4d5720(0x71b)]),this[_0x4d5720(0x119)](_0x4d5720(0x16a));}for(const _0x4414a6 of _0x2088b9){if(!_0x4414a6)continue;this['push'](_0x4d5720(0x2b7),_0x543202,_0x4414a6);}},Window_BattleLog[_0x45d586(0x19f)]['finishActionSet']=function(_0x24cd2d,_0xd86f48,_0x3172ff){const _0x1e3492=_0x45d586,_0x1b8c90=_0xd86f48['item']();this[_0x1e3492(0x119)](_0x1e3492(0x52b),_0x24cd2d,_0x3172ff,![]),this[_0x1e3492(0x119)](_0x1e3492(0x572)),this[_0x1e3492(0x119)]('waitForEffect'),this[_0x1e3492(0x119)](_0x1e3492(0xb8d)),this['push'](_0x1e3492(0x822),_0x24cd2d),this[_0x1e3492(0x119)](_0x1e3492(0x2c7));},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xa59)]=function(_0x13f363){$subject=null,$action=null,$targets=[];},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x323)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x6c5)],Window_BattleLog['prototype'][_0x45d586(0x6c5)]=function(_0x2feb36){const _0x591dd4=_0x45d586;if(!VisuMZ[_0x591dd4(0x6fe)][_0x591dd4(0xa41)][_0x591dd4(0x63e)]['ShowCurrentState'])return;VisuMZ[_0x591dd4(0x6fe)]['Window_BattleLog_displayCurrentState'][_0x591dd4(0x1b5)](this,_0x2feb36);},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xbb6)]=function(_0x12cd30){const _0x4fa200=_0x45d586;this[_0x4fa200(0x119)](_0x4fa200(0x409),_0x12cd30);VisuMZ['BattleCore'][_0x4fa200(0xa41)][_0x4fa200(0x205)][_0x4fa200(0xb2e)]&&this[_0x4fa200(0x119)](_0x4fa200(0x7d3),_0x12cd30,[BattleManager[_0x4fa200(0x1ce)]],-0x1);if(!VisuMZ['BattleCore'][_0x4fa200(0xa41)][_0x4fa200(0x63e)][_0x4fa200(0x41b)])return;this[_0x4fa200(0x119)](_0x4fa200(0x53b),TextManager['counterAttack']['format'](_0x12cd30[_0x4fa200(0x5c2)]()));const _0xb9d07d=VisuMZ[_0x4fa200(0x6fe)]['Settings'][_0x4fa200(0x63e)][_0x4fa200(0x173)]??0x0;if(_0xb9d07d>0x0)this[_0x4fa200(0x119)](_0x4fa200(0xae4),_0xb9d07d);;},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x168)]=function(_0x803a12){const _0x4799c0=_0x45d586;this[_0x4799c0(0x119)](_0x4799c0(0x857),_0x803a12);if(!VisuMZ[_0x4799c0(0x6fe)][_0x4799c0(0xa41)][_0x4799c0(0x63e)][_0x4799c0(0x8b4)])return;this[_0x4799c0(0x119)](_0x4799c0(0x53b),TextManager[_0x4799c0(0xa35)]['format'](_0x803a12[_0x4799c0(0x5c2)]()));const _0x3b1193=VisuMZ['BattleCore'][_0x4799c0(0xa41)][_0x4799c0(0x63e)][_0x4799c0(0x9ba)]??0x0;if(_0x3b1193>0x0)this[_0x4799c0(0x119)]('waitCount',_0x3b1193);;},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x705)]=function(_0x39cf35,_0x12fd6b){const _0x169912=_0x45d586;if(VisuMZ[_0x169912(0x6fe)][_0x169912(0xa41)][_0x169912(0x205)][_0x169912(0x230)]){const _0xb12554=_0x12fd6b['item']();this[_0x169912(0x119)]('showAnimation',_0x39cf35,[_0x39cf35],_0xb12554[_0x169912(0x71b)]);}},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x370)]=function(_0x32b688,_0x44443a){const _0x43900d=_0x45d586;this[_0x43900d(0x119)](_0x43900d(0x90f),_0x32b688,_0x44443a);if(!VisuMZ[_0x43900d(0x6fe)][_0x43900d(0xa41)]['BattleLog'][_0x43900d(0xbb9)])return;const _0x19377c=_0x32b688[_0x43900d(0x5c2)](),_0x37b21b=TextManager[_0x43900d(0x97b)]['format'](_0x19377c,_0x44443a[_0x43900d(0x5c2)]());this[_0x43900d(0x119)](_0x43900d(0x53b),_0x37b21b);const _0x1c2527=VisuMZ[_0x43900d(0x6fe)][_0x43900d(0xa41)][_0x43900d(0x63e)]['ShowSubstituteWait']??0x0;if(_0x1c2527>0x0)this[_0x43900d(0x119)]('waitCount',_0x1c2527);;},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x7df)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x512)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x512)]=function(_0x221666,_0x304251){const _0x3d98ad=_0x45d586;VisuMZ[_0x3d98ad(0x6fe)]['Window_BattleLog_displayActionResults']['call'](this,_0x221666,_0x304251);},VisuMZ[_0x45d586(0x6fe)]['Window_BattleLog_displayFailure']=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xae7)],Window_BattleLog['prototype'][_0x45d586(0xae7)]=function(_0x21395f){const _0xbb9530=_0x45d586;if(!VisuMZ[_0xbb9530(0x6fe)][_0xbb9530(0xa41)][_0xbb9530(0x63e)][_0xbb9530(0x7e8)])return;VisuMZ['BattleCore'][_0xbb9530(0x7cd)][_0xbb9530(0x1b5)](this,_0x21395f);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x8e7)]=Window_BattleLog[_0x45d586(0x19f)]['displayCritical'],Window_BattleLog['prototype'][_0x45d586(0x1a7)]=function(_0x5afccd){const _0x2f9c63=_0x45d586;if(!VisuMZ[_0x2f9c63(0x6fe)][_0x2f9c63(0xa41)][_0x2f9c63(0x63e)]['ShowCritical'])return;VisuMZ[_0x2f9c63(0x6fe)][_0x2f9c63(0x8e7)][_0x2f9c63(0x1b5)](this,_0x5afccd);},VisuMZ[_0x45d586(0x6fe)]['Window_BattleLog_displayMiss']=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x6a7)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x6a7)]=function(_0x5129a1){const _0x13f47c=_0x45d586;!VisuMZ[_0x13f47c(0x6fe)][_0x13f47c(0xa41)][_0x13f47c(0x63e)]['ShowMissEvasion']?this['push'](_0x13f47c(0x863),_0x5129a1):VisuMZ[_0x13f47c(0x6fe)][_0x13f47c(0xd4)][_0x13f47c(0x1b5)](this,_0x5129a1);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xac4)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xb24)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xb24)]=function(_0x2b0bf7){const _0xa5930a=_0x45d586;!VisuMZ[_0xa5930a(0x6fe)][_0xa5930a(0xa41)][_0xa5930a(0x63e)][_0xa5930a(0x93b)]?_0x2b0bf7[_0xa5930a(0x116)]()[_0xa5930a(0x930)]?this[_0xa5930a(0x119)](_0xa5930a(0x7ad),_0x2b0bf7):this[_0xa5930a(0x119)](_0xa5930a(0x4f9),_0x2b0bf7):VisuMZ[_0xa5930a(0x6fe)][_0xa5930a(0xac4)][_0xa5930a(0x1b5)](this,_0x2b0bf7);},Window_BattleLog[_0x45d586(0x19f)]['displayHpDamage']=function(_0x21d732){const _0x4ba1fa=_0x45d586;_0x21d732['result']()[_0x4ba1fa(0x625)]&&(_0x21d732[_0x4ba1fa(0x797)]=0x0,_0x21d732[_0x4ba1fa(0x116)]()['hpDamage']>0x0&&!_0x21d732[_0x4ba1fa(0x116)]()['drain']&&(_0x21d732['_lastHpDamage']=_0x21d732['result']()['hpDamage'],this[_0x4ba1fa(0x119)](_0x4ba1fa(0xa04),_0x21d732)),_0x21d732[_0x4ba1fa(0x116)]()[_0x4ba1fa(0x541)]<0x0&&this[_0x4ba1fa(0x119)](_0x4ba1fa(0xade),_0x21d732),VisuMZ[_0x4ba1fa(0x6fe)]['Settings'][_0x4ba1fa(0x63e)]['ShowHpDmg']&&this[_0x4ba1fa(0x119)](_0x4ba1fa(0x53b),this['makeHpDamageText'](_0x21d732)));},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x12a)]=Window_BattleLog['prototype'][_0x45d586(0x7d7)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x7d7)]=function(_0x3203c3){const _0x3eb9b6=_0x45d586;if(!VisuMZ['BattleCore'][_0x3eb9b6(0xa41)][_0x3eb9b6(0x63e)][_0x3eb9b6(0x427)])return;VisuMZ[_0x3eb9b6(0x6fe)]['Window_BattleLog_displayMpDamage'][_0x3eb9b6(0x1b5)](this,_0x3203c3);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x706)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xa75)],Window_BattleLog['prototype']['displayTpDamage']=function(_0x327fcc){const _0x59b170=_0x45d586;if(!VisuMZ[_0x59b170(0x6fe)][_0x59b170(0xa41)]['BattleLog'][_0x59b170(0x220)])return;VisuMZ[_0x59b170(0x6fe)][_0x59b170(0x706)][_0x59b170(0x1b5)](this,_0x327fcc);},Window_BattleLog['prototype'][_0x45d586(0x3b0)]=function(_0x7b4e7f){const _0x59b20a=_0x45d586;_0x7b4e7f[_0x59b20a(0x116)]()[_0x59b20a(0x774)]()&&(this['push']('pushBaseLine'),this[_0x59b20a(0x51a)](_0x7b4e7f),this[_0x59b20a(0x1f5)](_0x7b4e7f),this[_0x59b20a(0x119)]('waitForNewLine'));},Window_BattleLog['prototype'][_0x45d586(0x62c)]=function(_0x41d880){const _0x39c61d=_0x45d586,_0x1378ad=_0x41d880[_0x39c61d(0x116)](),_0x4c941e=_0x1378ad[_0x39c61d(0x982)]();for(const _0x37a5cf of _0x4c941e){const _0x3d3a22=_0x41d880[_0x39c61d(0x7f0)]()?_0x37a5cf[_0x39c61d(0x8ea)]:_0x37a5cf[_0x39c61d(0xbcf)];_0x3d3a22&&VisuMZ[_0x39c61d(0x6fe)][_0x39c61d(0xa41)][_0x39c61d(0x63e)][_0x39c61d(0x79f)]&&(this[_0x39c61d(0x119)](_0x39c61d(0x73e)),this[_0x39c61d(0x119)](_0x39c61d(0x9ff)),this[_0x39c61d(0x119)]('pushBaseLine'),this[_0x39c61d(0x119)](_0x39c61d(0x53b),_0x3d3a22['format'](_0x41d880[_0x39c61d(0x5c2)]())),this[_0x39c61d(0x119)](_0x39c61d(0x643))),_0x37a5cf['id']===_0x41d880[_0x39c61d(0x19d)]()&&this['push'](_0x39c61d(0xa50),_0x41d880);}},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x73e)]=function(){},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x7a3)]=function(_0x4ed881){const _0x14abfb=_0x45d586;if(!VisuMZ['BattleCore'][_0x14abfb(0xa41)][_0x14abfb(0x63e)][_0x14abfb(0x842)])return;const _0x3e8514=_0x4ed881[_0x14abfb(0x116)](),_0x54737e=_0x3e8514[_0x14abfb(0x77d)]();for(const _0x49a573 of _0x54737e){_0x49a573[_0x14abfb(0x52e)]&&(this[_0x14abfb(0x119)](_0x14abfb(0x913)),this[_0x14abfb(0x119)](_0x14abfb(0x9ff)),this[_0x14abfb(0x119)](_0x14abfb(0x787)),this[_0x14abfb(0x119)]('addText',_0x49a573[_0x14abfb(0x52e)][_0x14abfb(0x534)](_0x4ed881[_0x14abfb(0x5c2)]())),this['push'](_0x14abfb(0x643)));}},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x913)]=function(){},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x1f5)]=function(_0x24b8a1){const _0x583443=_0x45d586,_0x593d5e=VisuMZ[_0x583443(0x6fe)][_0x583443(0xa41)][_0x583443(0x63e)],_0x2bfa97=_0x24b8a1['result']();if(_0x593d5e[_0x583443(0xd9)])this[_0x583443(0x62e)](_0x24b8a1,_0x2bfa97[_0x583443(0x337)],TextManager['buffAdd']);if(_0x593d5e[_0x583443(0x75c)])this[_0x583443(0x62e)](_0x24b8a1,_0x2bfa97[_0x583443(0x800)],TextManager[_0x583443(0x7d2)]);if(_0x593d5e[_0x583443(0x6e6)])this['displayBuffs'](_0x24b8a1,_0x2bfa97[_0x583443(0x545)],TextManager[_0x583443(0x77c)]);},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x62e)]=function(_0x1dfa49,_0x598fbd,_0x501864){const _0x381354=_0x45d586;for(const _0x2557d4 of _0x598fbd){const _0x412435=_0x501864[_0x381354(0x534)](_0x1dfa49[_0x381354(0x5c2)](),TextManager[_0x381354(0x1fa)](_0x2557d4));this[_0x381354(0x119)](_0x381354(0x9ff)),this['push']('pushBaseLine'),this[_0x381354(0x119)](_0x381354(0x53b),_0x412435),this[_0x381354(0x119)](_0x381354(0x643));}},VisuMZ['BattleCore'][_0x45d586(0x3b6)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xb8d)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xb8d)]=function(){const _0x1ecaa2=_0x45d586;VisuMZ[_0x1ecaa2(0x6fe)][_0x1ecaa2(0x3b6)][_0x1ecaa2(0x1b5)](this),this[_0x1ecaa2(0x3fe)]();},VisuMZ['BattleCore'][_0x45d586(0x712)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x787)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x787)]=function(){const _0x485ef8=_0x45d586;VisuMZ[_0x485ef8(0x6fe)][_0x485ef8(0x712)][_0x485ef8(0x1b5)](this),this[_0x485ef8(0x3fe)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xad0)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x9ff)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x9ff)]=function(){const _0x4c62f6=_0x45d586;VisuMZ[_0x4c62f6(0x6fe)]['Window_BattleLog_popBaseLine'][_0x4c62f6(0x1b5)](this),this[_0x4c62f6(0xbc2)](),this[_0x4c62f6(0x3fe)]();},VisuMZ['BattleCore']['Window_BattleLog_popupDamage']=Window_BattleLog['prototype'][_0x45d586(0xa43)],Window_BattleLog[_0x45d586(0x19f)]['popupDamage']=function(_0x2bd55e){const _0xc08987=_0x45d586;VisuMZ[_0xc08987(0x6fe)][_0xc08987(0x6fc)][_0xc08987(0x1b5)](this,_0x2bd55e),this[_0xc08987(0x3fe)]();},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x572)]=function(){const _0x39e6e7=_0x45d586;let _0x115c80=0x0;this[_0x39e6e7(0x4d3)][_0x39e6e7(0x1c9)]>0x0&&(_0x115c80=this[_0x39e6e7(0x4d3)][this[_0x39e6e7(0x4d3)][_0x39e6e7(0x1c9)]-0x1]),this[_0x39e6e7(0x74d)][_0x39e6e7(0x1c9)]>_0x115c80?this['wait']():this[_0x39e6e7(0x3fe)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x666)]=Window_BattleLog['prototype'][_0x45d586(0x4dd)],Window_BattleLog[_0x45d586(0x19f)]['performActionStart']=function(_0x3be4a7,_0x12fbda){const _0x363c63=_0x45d586;VisuMZ[_0x363c63(0x6fe)][_0x363c63(0x666)][_0x363c63(0x1b5)](this,_0x3be4a7,_0x12fbda),this[_0x363c63(0x3fe)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x239)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xa5e)],Window_BattleLog['prototype'][_0x45d586(0xa5e)]=function(_0x2c8c50,_0x32281f){const _0x2a4c7b=_0x45d586;VisuMZ[_0x2a4c7b(0x6fe)][_0x2a4c7b(0x239)][_0x2a4c7b(0x1b5)](this,_0x2c8c50,_0x32281f),this['callNextMethod']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x1ca)]=Window_BattleLog['prototype'][_0x45d586(0x822)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x822)]=function(_0x418b07){const _0x5dbdf0=_0x45d586;VisuMZ['BattleCore'][_0x5dbdf0(0x1ca)][_0x5dbdf0(0x1b5)](this,_0x418b07);for(const _0x3194f4 of BattleManager['allBattleMembers']()){if(!_0x3194f4)continue;if(_0x3194f4[_0x5dbdf0(0x1e3)]())continue;_0x3194f4[_0x5dbdf0(0x9df)]();}this[_0x5dbdf0(0x3fe)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x32a)]=Window_BattleLog[_0x45d586(0x19f)]['performDamage'],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xa04)]=function(_0xf4d8a8){const _0x31ad41=_0x45d586;VisuMZ[_0x31ad41(0x6fe)][_0x31ad41(0x32a)][_0x31ad41(0x1b5)](this,_0xf4d8a8),this[_0x31ad41(0x3fe)]();},VisuMZ['BattleCore'][_0x45d586(0x7ba)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x863)],Window_BattleLog['prototype']['performMiss']=function(_0x2a6603){const _0x2b20eb=_0x45d586;VisuMZ[_0x2b20eb(0x6fe)]['Window_BattleLog_performMiss']['call'](this,_0x2a6603),this['callNextMethod']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x6ad)]=Window_BattleLog['prototype'][_0x45d586(0xade)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xade)]=function(_0x5c6dab){const _0x2be4a7=_0x45d586;VisuMZ['BattleCore'][_0x2be4a7(0x6ad)][_0x2be4a7(0x1b5)](this,_0x5c6dab),this[_0x2be4a7(0x3fe)]();},VisuMZ[_0x45d586(0x6fe)]['Window_BattleLog_performEvasion']=Window_BattleLog[_0x45d586(0x19f)]['performEvasion'],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x7ad)]=function(_0x1f3394){const _0x520d74=_0x45d586;VisuMZ[_0x520d74(0x6fe)]['Window_BattleLog_performEvasion'][_0x520d74(0x1b5)](this,_0x1f3394),this[_0x520d74(0x3fe)]();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x7f9)]=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x4f9)],Window_BattleLog[_0x45d586(0x19f)]['performMagicEvasion']=function(_0x1a6810){const _0x45cd3a=_0x45d586;VisuMZ[_0x45cd3a(0x6fe)][_0x45cd3a(0x7f9)][_0x45cd3a(0x1b5)](this,_0x1a6810),this[_0x45cd3a(0x3fe)]();},VisuMZ['BattleCore']['Window_BattleLog_performCounter']=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x409)],Window_BattleLog[_0x45d586(0x19f)]['performCounter']=function(_0x54892f){const _0x1d0741=_0x45d586;VisuMZ[_0x1d0741(0x6fe)][_0x1d0741(0x142)][_0x1d0741(0x1b5)](this,_0x54892f),this[_0x1d0741(0x3fe)]();},VisuMZ[_0x45d586(0x6fe)]['Window_BattleLog_performReflection']=Window_BattleLog[_0x45d586(0x19f)]['performReflection'],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x857)]=function(_0x381359){const _0x556a4a=_0x45d586;VisuMZ['BattleCore'][_0x556a4a(0x841)][_0x556a4a(0x1b5)](this,_0x381359),this['callNextMethod']();},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xb3b)]=Window_BattleLog['prototype'][_0x45d586(0x90f)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x90f)]=function(_0x939771,_0x19f0d8){const _0x50bbee=_0x45d586;VisuMZ[_0x50bbee(0x6fe)][_0x50bbee(0xb3b)][_0x50bbee(0x1b5)](this,_0x939771,_0x19f0d8),this[_0x50bbee(0x3fe)]();},VisuMZ[_0x45d586(0x6fe)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xa50)],Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0xa50)]=function(_0x4f7cd3){const _0x5daf98=_0x45d586;VisuMZ[_0x5daf98(0x6fe)][_0x5daf98(0x27a)][_0x5daf98(0x1b5)](this,_0x4f7cd3),this[_0x5daf98(0x3fe)]();},Window_BattleLog['prototype'][_0x45d586(0x3a3)]=function(_0x41f0ba,_0x25a816){const _0x5384d0=_0x45d586;_0x41f0ba[_0x5384d0(0x3a3)](_0x25a816),this['callNextMethod']();},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x4c7)]=function(_0x153494,_0x1b0854){const _0x419cfe=_0x45d586,_0x208178=_0x153494[_0x419cfe(0x746)]();_0x208178<=0x0?SoundManager[_0x419cfe(0x451)]():this['showNormalAnimation'](_0x1b0854,_0x208178);},Window_BattleLog['prototype'][_0x45d586(0x52b)]=function(_0x7a088e,_0x2fb9f2,_0x403487){const _0x1f4af0=_0x45d586,_0x4a80af=[_0x7a088e]['concat'](_0x2fb9f2);for(const _0x2eb75d of _0x4a80af){if(!_0x2eb75d)continue;_0x2eb75d[_0x1f4af0(0x2d7)](_0x403487);}this[_0x1f4af0(0x3fe)]();},Window_BattleLog[_0x45d586(0x19f)]['waitCount']=function(_0x52eb04){const _0x631b89=_0x45d586;this[_0x631b89(0x74b)]=_0x52eb04;},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x135)]=function(_0x59b8c1,_0x1df69d){const _0x40cf82=_0x45d586;for(const _0x504c00 of _0x59b8c1){if(!_0x504c00)continue;_0x504c00['requestMotion'](_0x1df69d);}this[_0x40cf82(0x3fe)]();},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x96b)]=function(_0x507eac,_0x57001f,_0x82d17c,_0x4d0bb0,_0x965e87,_0x40fed5){const _0x23489c=_0x45d586;_0x507eac[_0x23489c(0xb12)](_0x57001f,_0x82d17c,_0x4d0bb0,_0x965e87,_0x40fed5,-0x1),this['callNextMethod']();},Window_BattleLog['prototype'][_0x45d586(0x2ec)]=function(_0x21f6b5,_0x4aa0ee,_0x458046,_0x3d1e53,_0x36a0e8,_0x4cab4a,_0x126001){const _0x51ea30=_0x45d586,_0x320a1e=Math[_0x51ea30(0xb4b)](..._0x4aa0ee['map'](_0x378f2b=>_0x378f2b[_0x51ea30(0xa7b)]()['_baseX']-_0x378f2b[_0x51ea30(0xa7b)]()['mainSpriteWidth']()/0x2)),_0x4b88fd=Math[_0x51ea30(0x61a)](..._0x4aa0ee[_0x51ea30(0x7a1)](_0x21504f=>_0x21504f[_0x51ea30(0xa7b)]()[_0x51ea30(0x5bb)]+_0x21504f[_0x51ea30(0xa7b)]()[_0x51ea30(0x102)]()/0x2)),_0x10cf21=Math[_0x51ea30(0xb4b)](..._0x4aa0ee[_0x51ea30(0x7a1)](_0x26eb97=>_0x26eb97[_0x51ea30(0xa7b)]()[_0x51ea30(0x83d)]-_0x26eb97[_0x51ea30(0xa7b)]()[_0x51ea30(0xa23)]())),_0x3a2cfe=Math[_0x51ea30(0x61a)](..._0x4aa0ee[_0x51ea30(0x7a1)](_0xd5e73f=>_0xd5e73f['battler']()[_0x51ea30(0x83d)])),_0x1bd061=_0x4aa0ee[_0x51ea30(0x229)](_0x3c54f3=>_0x3c54f3['isActor']())[_0x51ea30(0x1c9)],_0x3e71f8=_0x4aa0ee[_0x51ea30(0x229)](_0x44e64b=>_0x44e64b[_0x51ea30(0x690)]())[_0x51ea30(0x1c9)];let _0x3ecf46=0x0,_0x464049=0x0;if(_0x458046[_0x51ea30(0x95f)](/front/i))_0x3ecf46=_0x1bd061>=_0x3e71f8?_0x320a1e:_0x4b88fd;else{if(_0x458046[_0x51ea30(0x95f)](/middle/i))_0x3ecf46=(_0x320a1e+_0x4b88fd)/0x2,_0x126001=-0x1;else _0x458046[_0x51ea30(0x95f)](/back/i)&&(_0x3ecf46=_0x1bd061>=_0x3e71f8?_0x4b88fd:_0x320a1e);}if(_0x458046[_0x51ea30(0x95f)](/head/i))_0x464049=_0x10cf21;else{if(_0x458046[_0x51ea30(0x95f)](/center/i)){_0x464049=(_0x10cf21+_0x3a2cfe)/0x2;if(_0x21f6b5[_0x51ea30(0xa7b)]())_0x464049+=_0x21f6b5['battler']()[_0x51ea30(0x6ac)]/0x2;}else _0x458046[_0x51ea30(0x95f)](/base/i)&&(_0x464049=_0x3a2cfe);}_0x21f6b5[_0x51ea30(0xb12)](_0x3ecf46,_0x464049,_0x3d1e53,_0x36a0e8,_0x4cab4a,_0x126001),this[_0x51ea30(0x3fe)]();},Window_BattleLog[_0x45d586(0x19f)][_0x45d586(0x22a)]=function(_0x15569e,_0x4556dc,_0x1034be){const _0x32e62f=_0x45d586;for(const _0x2b3523 of _0x15569e){if(!_0x2b3523)continue;_0x2b3523[_0x32e62f(0x5f1)](_0x4556dc,_0x1034be);}this[_0x32e62f(0x3fe)]();};function Window_BattleMultiTarget(){const _0x56ce5d=_0x45d586;this[_0x56ce5d(0x6d1)](...arguments);}Window_BattleMultiTarget[_0x45d586(0x19f)]=Object[_0x45d586(0x838)](Window_Command[_0x45d586(0x19f)]),Window_BattleMultiTarget[_0x45d586(0x19f)][_0x45d586(0xb62)]=Window_BattleMultiTarget,VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)]['MultiTarget']=VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x15f)]||{},Window_BattleMultiTarget['WIDTH']=VisuMZ['BattleCore']['Settings'][_0x45d586(0x15f)][_0x45d586(0x597)]??0x118,Window_BattleMultiTarget['BG_TYPE']=VisuMZ[_0x45d586(0x6fe)]['Settings']['MultiTarget'][_0x45d586(0x1d7)]??0x2,Window_BattleMultiTarget[_0x45d586(0x516)]=VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x15f)]['ShowButton']??!![],Window_BattleMultiTarget[_0x45d586(0xb0c)]=VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x15f)][_0x45d586(0x7be)]??_0x45d586(0x604),Window_BattleMultiTarget[_0x45d586(0x8d8)]=VisuMZ[_0x45d586(0x6fe)]['Settings'][_0x45d586(0x15f)]['AllEnemiesText']??_0x45d586(0x353),Window_BattleMultiTarget[_0x45d586(0x9b6)]=VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0x15f)]['ActorOffsetX']??0x0,Window_BattleMultiTarget[_0x45d586(0x87e)]=VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0x15f)][_0x45d586(0x8d2)]??0x0,Window_BattleMultiTarget[_0x45d586(0x9fa)]=VisuMZ[_0x45d586(0x6fe)]['Settings'][_0x45d586(0x15f)][_0x45d586(0x2dc)]??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_Y']=VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x15f)][_0x45d586(0xbc9)]??0x0,Window_BattleMultiTarget['prototype'][_0x45d586(0x6d1)]=function(_0x366bf9,_0x3b86f6){const _0x420ba6=_0x45d586;this[_0x420ba6(0x635)]=_0x3b86f6,Window_Command[_0x420ba6(0x19f)][_0x420ba6(0x6d1)][_0x420ba6(0x1b5)](this,_0x366bf9),this['setBackgroundType'](Window_BattleMultiTarget[_0x420ba6(0x79d)]),this['deactivate'](),this[_0x420ba6(0xb6c)](),this['deselect']();},Window_BattleMultiTarget[_0x45d586(0x19f)]['forActor']=function(){const _0x507596=_0x45d586;return this[_0x507596(0x635)];},Window_BattleMultiTarget[_0x45d586(0x19f)][_0x45d586(0x277)]=function(){const _0x26980e=_0x45d586;let _0x43b0cc=this[_0x26980e(0x62a)]()?Window_BattleMultiTarget[_0x26980e(0xb0c)]:Window_BattleMultiTarget[_0x26980e(0x8d8)];if(Imported[_0x26980e(0xbc5)]&&Window_BattleMultiTarget[_0x26980e(0x516)]){this[_0x26980e(0xae0)]=this[_0x26980e(0x62a)]()?_0x26980e(0xb59):_0x26980e(0xa76),this[_0x26980e(0x30d)]=TextManager[_0x26980e(0xa3a)](this[_0x26980e(0xae0)]);const _0x270c65=VisuMZ[_0x26980e(0xa37)][_0x26980e(0xa41)][_0x26980e(0x9fe)][_0x26980e(0xa2a)];_0x43b0cc=_0x270c65[_0x26980e(0x534)](this['_buttonText'],_0x43b0cc);}this[_0x26980e(0x956)](_0x43b0cc,'selectAll');},Window_BattleMultiTarget[_0x45d586(0x19f)]['drawItem']=function(_0x15817f){const _0x36efb9=_0x45d586,_0x1c7faa=this[_0x36efb9(0x23d)](_0x15817f);this['resetTextColor'](),this[_0x36efb9(0x8e4)](this[_0x36efb9(0x4fd)](_0x15817f));const _0x5ba08a=this[_0x36efb9(0x2fb)](_0x15817f),_0x276936=this[_0x36efb9(0x82e)](_0x5ba08a)[_0x36efb9(0x7ea)],_0x188b28=_0x1c7faa['x']+Math['floor']((_0x1c7faa[_0x36efb9(0x7ea)]-_0x276936)/0x2);this[_0x36efb9(0x55c)](_0x5ba08a,_0x188b28,_0x1c7faa['y'],_0x1c7faa[_0x36efb9(0x7ea)]);},Window_BattleMultiTarget['prototype'][_0x45d586(0xae1)]=function(){const _0x284345=_0x45d586;Window_Command[_0x284345(0x19f)]['update'][_0x284345(0x1b5)](this),this['updateVisibility'](),this[_0x284345(0x11d)]();},Window_BattleMultiTarget[_0x45d586(0x19f)]['updateVisibility']=function(){const _0x3a3f4e=_0x45d586;this['visible']=this[_0x3a3f4e(0x7f7)]();},Window_BattleMultiTarget[_0x45d586(0x19f)]['visibilityState']=function(){const _0x5137b4=_0x45d586,_0x2e93d4=BattleManager[_0x5137b4(0x517)](),_0x301f2e=_0x2e93d4&&_0x2e93d4[_0x5137b4(0x1f3)]();if(!_0x301f2e)return![];const _0x55e9a4=SceneManager[_0x5137b4(0x4f4)];if(this[_0x5137b4(0x62a)]()){if(_0x55e9a4['_actorWindow']['active']&&_0x55e9a4[_0x5137b4(0x78e)][_0x5137b4(0x120)][_0x5137b4(0xb59)])return!![];if(_0x55e9a4['_enemyWindow'][_0x5137b4(0x4cf)]&&_0x55e9a4['_enemyWindow'][_0x5137b4(0x120)]['pagedown'])return!![];}else{if(_0x55e9a4['_enemyWindow'][_0x5137b4(0x4cf)]&&_0x55e9a4[_0x5137b4(0x918)][_0x5137b4(0x120)][_0x5137b4(0xa76)])return!![];}return![];},Window_BattleMultiTarget['prototype'][_0x45d586(0x11d)]=function(){const _0x358808=_0x45d586;if(!Imported[_0x358808(0xbc5)])return;this[_0x358808(0x30d)]!==TextManager[_0x358808(0xa3a)](this[_0x358808(0xae0)])&&this[_0x358808(0x291)]();},Window_BattleMultiTarget[_0x45d586(0x19f)][_0x45d586(0x4a7)]=function(){const _0x7bbebf=_0x45d586;if(this['visible']&&TouchInput['isClicked']()){const _0x4cd6ee=this[_0x7bbebf(0x955)]();if(_0x4cd6ee>=0x0){const _0x1a1bf2=this[_0x7bbebf(0x62a)]()?'pagedown':_0x7bbebf(0xa76);Input[_0x7bbebf(0x566)](_0x1a1bf2);}}};function Window_DamageCounter(){this['initialize'](...arguments);}Window_DamageCounter[_0x45d586(0x19f)]=Object[_0x45d586(0x838)](Window_Base[_0x45d586(0x19f)]),Window_DamageCounter[_0x45d586(0x19f)]['constructor']=Window_DamageCounter,Window_DamageCounter[_0x45d586(0x905)]={'enabled':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0xb23)][_0x45d586(0x8fa)]??!![],'customFontFace':VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0xb23)]['CustomFontFace']??'','textAlign':VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0xb23)][_0x45d586(0x1fd)]??_0x45d586(0x717),'hitsDmgFmt':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0xb23)][_0x45d586(0xb7c)]??_0x45d586(0x477),'hitsHealFmt':VisuMZ['BattleCore'][_0x45d586(0xa41)]['ComboWindow'][_0x45d586(0xae3)]??_0x45d586(0x959),'totalDmgFmt':VisuMZ['BattleCore']['Settings']['ComboWindow']['totalDmgFmt']??_0x45d586(0xacc),'totalHealFmt':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)]['ComboWindow'][_0x45d586(0xb35)]??_0x45d586(0x6ca),'fadeShiftX':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0xb23)][_0x45d586(0x190)]??-0x2,'fadeShiftY':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0xb23)][_0x45d586(0x251)]??0x0,'positionOffsetX':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)]['ComboWindow'][_0x45d586(0x503)]??0x0,'positionOffsetY':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)]['ComboWindow'][_0x45d586(0x532)]??0x0,'updateDuration':VisuMZ[_0x45d586(0x6fe)]['Settings'][_0x45d586(0xb23)][_0x45d586(0x88f)]??0x14,'minimumStayDuration':VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0xb23)][_0x45d586(0xada)]??0x28,'minimumHits':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0xb23)][_0x45d586(0xf0)]??0x1,'opacitySpeed':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)]['ComboWindow']['opacitySpeed']??0x10},Window_DamageCounter['prototype'][_0x45d586(0x6d1)]=function(_0xf35436){const _0x38252=_0x45d586;this[_0x38252(0x310)]=0x0,Window_Base[_0x38252(0x19f)]['initialize'][_0x38252(0x1b5)](this,_0xf35436),this[_0x38252(0x8e9)]=_0xf35436['x'],this[_0x38252(0x237)]=_0xf35436['y'],this[_0x38252(0x662)](),this[_0x38252(0x250)](0x2);},Window_DamageCounter[_0x45d586(0x19f)][_0x45d586(0x662)]=function(){const _0x29f8ed=_0x45d586;this[_0x29f8ed(0x6fa)]=0x0,this['_totalHits']=0x0,this['_totalDamage']=0x0,this[_0x29f8ed(0x527)]=0x0,this['_targetDamage']=0x0;},Window_DamageCounter[_0x45d586(0x19f)][_0x45d586(0x773)]=function(){const _0x470bd9=_0x45d586;Window_Base[_0x470bd9(0x19f)]['resetFontSettings'][_0x470bd9(0x1b5)](this);const _0x4500a6=Window_DamageCounter[_0x470bd9(0x905)];_0x4500a6[_0x470bd9(0x31c)]?this[_0x470bd9(0x394)][_0x470bd9(0x896)]=_0x4500a6[_0x470bd9(0x31c)]:this['contents']['fontFace']=$gameSystem['numberFontFace']();};var $comboWindowReset=function(){const _0x26e010=_0x45d586;if(!SceneManager[_0x26e010(0x81a)]())return;const _0x269568=SceneManager[_0x26e010(0x4f4)]['_damageCounterWindow'];if(_0x269568)_0x269568['resetCounter']();};Window_DamageCounter[_0x45d586(0x19f)]['increaseHits']=function(_0x8cbcbe){const _0x4edaf8=_0x45d586;this[_0x4edaf8(0x527)]+=Math[_0x4edaf8(0x31d)](_0x8cbcbe);const _0x5ea475=Window_DamageCounter[_0x4edaf8(0x905)];this[_0x4edaf8(0x6fa)]=_0x5ea475[_0x4edaf8(0x88f)],this[_0x4edaf8(0x527)]>=_0x5ea475['minimumHits']&&(this['_visibleDuration']=_0x5ea475[_0x4edaf8(0xada)]);};var $comboWindowIncreaseHits=function(_0x3cd2b9){const _0x2e7d81=_0x45d586;if(!SceneManager[_0x2e7d81(0x81a)]())return;const _0x29ed70=SceneManager[_0x2e7d81(0x4f4)][_0x2e7d81(0x767)];if(_0x29ed70)_0x29ed70[_0x2e7d81(0x106)](_0x3cd2b9);};Window_DamageCounter[_0x45d586(0x19f)]['increaseTotal']=function(_0x3e4230){const _0x51793b=_0x45d586;this[_0x51793b(0xa64)]+=Math['round'](_0x3e4230);const _0x4b4cf6=Window_DamageCounter[_0x51793b(0x905)];this[_0x51793b(0x6fa)]=_0x4b4cf6[_0x51793b(0x88f)],this[_0x51793b(0x527)]>=_0x4b4cf6['minimumHits']&&(this[_0x51793b(0x310)]=_0x4b4cf6[_0x51793b(0xada)]);};var $comboWindowIncreaseDamage=function(_0x3ec205){const _0x349b50=_0x45d586;if(!SceneManager['isSceneBattle']())return;const _0x44adb0=SceneManager[_0x349b50(0x4f4)][_0x349b50(0x767)];if(_0x44adb0)_0x44adb0['increaseTotal'](_0x3ec205);},$comboWindowIncreaseHealing=function(_0x40000d){const _0x5b3635=_0x45d586;if(!SceneManager[_0x5b3635(0x81a)]())return;const _0x5d19c7=SceneManager[_0x5b3635(0x4f4)]['_damageCounterWindow'];if(_0x5d19c7)_0x5d19c7['increaseTotal'](-_0x40000d);};VisuMZ[_0x45d586(0x6fe)]['Scene_Battle_createAllWindows_ComboWindow']=Scene_Battle[_0x45d586(0x19f)]['createAllWindows'],Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x821)]=function(){const _0x230782=_0x45d586;this[_0x230782(0x78a)](),VisuMZ[_0x230782(0x6fe)][_0x230782(0x558)][_0x230782(0x1b5)](this);},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x78a)]=function(){const _0x56b290=_0x45d586;if(!Window_DamageCounter[_0x56b290(0x905)][_0x56b290(0x9e6)])return;const _0x2ce42f=this[_0x56b290(0x4eb)](),_0x47b6b2=new Window_DamageCounter(_0x2ce42f);this['addWindow'](_0x47b6b2),this[_0x56b290(0x767)]=_0x47b6b2;},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x4eb)]=function(){const _0x57d805=_0x45d586;if(VisuMZ[_0x57d805(0x6fe)][_0x57d805(0xa41)][_0x57d805(0xb23)]['ComboWindow_RectJS'])return VisuMZ[_0x57d805(0x6fe)]['Settings']['ComboWindow'][_0x57d805(0x1c3)][_0x57d805(0x1b5)](this);const _0x132f60=Math[_0x57d805(0xb32)](Graphics[_0x57d805(0x7ea)]/0x4),_0x244f5d=this[_0x57d805(0xb15)](0x2,!![]),_0x1f21bf=0x0+this[_0x57d805(0x94e)](),_0xc9895f=Math[_0x57d805(0x31d)](Graphics[_0x57d805(0x56c)]*0x1/0x3)+this[_0x57d805(0x6d0)]();return new Rectangle(_0x1f21bf,_0xc9895f,_0x132f60,_0x244f5d);},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x94e)]=function(){const _0x3452c6=_0x45d586;return Window_DamageCounter[_0x3452c6(0x905)][_0x3452c6(0x43d)];},Scene_Battle[_0x45d586(0x19f)][_0x45d586(0x6d0)]=function(){const _0x529ba9=_0x45d586;return Window_DamageCounter[_0x529ba9(0x905)][_0x529ba9(0x10e)];},Window_DamageCounter[_0x45d586(0x19f)][_0x45d586(0xae1)]=function(){const _0x30823d=_0x45d586;Window_Base[_0x30823d(0x19f)]['update']['call'](this),this[_0x30823d(0x39f)](),this[_0x30823d(0x3cd)]();},Window_DamageCounter['prototype']['updateCounter']=function(){const _0x281418=_0x45d586;if(this[_0x281418(0x6fa)]<=0x0)return;const _0x5d186f=this[_0x281418(0x6fa)];this[_0x281418(0x52d)]=this['_targetHits'],this[_0x281418(0x355)]=(this[_0x281418(0x355)]*(_0x5d186f-0x1)+this['_targetDamage'])/_0x5d186f,this['_updateDuration']--,this[_0x281418(0x6fa)]<=0x0&&(this[_0x281418(0x52d)]=this[_0x281418(0x527)],this[_0x281418(0x355)]=this[_0x281418(0xa64)]),this['refresh']();},Window_DamageCounter[_0x45d586(0x19f)]['updateOpacity']=function(){const _0xd09d4c=_0x45d586,_0x275344=Window_DamageCounter[_0xd09d4c(0x905)],_0x51ca96=this['visibilityState'](),_0x216ad3=_0x275344[_0xd09d4c(0x231)]||0x1;if(_0x51ca96&&this[_0xd09d4c(0x41d)]<0xff)this[_0xd09d4c(0x41d)]+=_0x216ad3;else!_0x51ca96&&this[_0xd09d4c(0x41d)]>0x0&&(this[_0xd09d4c(0x41d)]-=_0x216ad3,this['x']+=_0x275344['fadeShiftX']||0x0,this['y']+=_0x275344[_0xd09d4c(0x251)]||0x0);},Window_DamageCounter['prototype']['visibilityState']=function(){const _0x1b48ec=_0x45d586,_0x5d61e1=Window_DamageCounter[_0x1b48ec(0x905)];if(this[_0x1b48ec(0x527)]>=_0x5d61e1[_0x1b48ec(0xf0)])return!![];if(this['_visibleDuration']-->0x0)return!![];return![];},VisuMZ['BattleCore'][_0x45d586(0x6ef)]=Game_Action[_0x45d586(0x19f)][_0x45d586(0x589)],Game_Action[_0x45d586(0x19f)][_0x45d586(0x589)]=function(_0x47bb5e,_0x47e417){const _0xdadbfc=_0x45d586;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x47e417),VisuMZ['BattleCore']['Game_Action_executeHpDamage_ComboWindow'][_0xdadbfc(0x1b5)](this,_0x47bb5e,_0x47e417);},VisuMZ[_0x45d586(0x6fe)][_0x45d586(0x463)]=BattleManager[_0x45d586(0xa59)],BattleManager[_0x45d586(0xa59)]=function(){const _0x2494d7=_0x45d586;$comboWindowReset(),VisuMZ[_0x2494d7(0x6fe)][_0x2494d7(0x463)][_0x2494d7(0x1b5)](this);},Window_DamageCounter['prototype']['refresh']=function(){const _0x3f4dda=_0x45d586;this['contents'][_0x3f4dda(0xb8d)](),this[_0x3f4dda(0x7a9)](),this['x']=this[_0x3f4dda(0x8e9)],this['y']=this[_0x3f4dda(0x237)];},Window_DamageCounter[_0x45d586(0x19f)][_0x45d586(0x123)]=function(){const _0x3763cb=_0x45d586,_0x905109=Window_DamageCounter[_0x3763cb(0x905)];return _0x905109[_0x3763cb(0x57f)]||_0x3763cb(0x717);},Window_DamageCounter[_0x45d586(0x19f)][_0x45d586(0x26a)]=function(){const _0x13ea61=_0x45d586,_0x4e1731=Window_DamageCounter[_0x13ea61(0x905)];let _0x124019=this[_0x13ea61(0x355)]>=0x0?_0x4e1731[_0x13ea61(0xb7c)]:_0x4e1731[_0x13ea61(0xae3)];return _0x124019[_0x13ea61(0x534)](Math[_0x13ea61(0xb5e)](Math[_0x13ea61(0xb32)](this[_0x13ea61(0x52d)])));},Window_DamageCounter[_0x45d586(0x19f)][_0x45d586(0xa9b)]=function(){const _0x371033=_0x45d586,_0x271c17=Window_DamageCounter[_0x371033(0x905)];let _0x2d7ac8=this[_0x371033(0x355)]>=0x0?_0x271c17[_0x371033(0xa06)]:_0x271c17[_0x371033(0xb35)];return _0x2d7ac8['format'](Math[_0x371033(0xb5e)](Math['round'](this['_totalDamage'])));},Window_DamageCounter[_0x45d586(0x19f)]['drawComboText']=function(){const _0x173a09=_0x45d586;if(VisuMZ['BattleCore'][_0x173a09(0xa41)]['ComboWindow'][_0x173a09(0x84e)])return VisuMZ[_0x173a09(0x6fe)][_0x173a09(0xa41)][_0x173a09(0xb23)][_0x173a09(0x84e)][_0x173a09(0x1b5)](this);let _0xad754a=0x0,_0x1a468c=0x0;const _0xd6a069=this['hitText'](),_0x936a59=this['textSizeEx'](_0xd6a069);if(this['textAlignment']()===_0x173a09(0xae5))_0xad754a=this[_0x173a09(0x48a)]-this[_0x173a09(0x6cd)]()-_0x936a59[_0x173a09(0x7ea)];else this[_0x173a09(0x123)]()===_0x173a09(0x735)?_0xad754a=Math['floor']((this[_0x173a09(0x48a)]-_0x936a59[_0x173a09(0x7ea)])/0x2):_0xad754a=this[_0x173a09(0x6cd)]();this['drawTextEx'](_0xd6a069,_0xad754a,_0x1a468c),_0x1a468c+=Math[_0x173a09(0xb32)](this[_0x173a09(0x7fb)]()*0x2/0x3);const _0x28e192=this[_0x173a09(0xa9b)](),_0x3392e6=this[_0x173a09(0x82e)](_0x28e192);if(this[_0x173a09(0x123)]()==='right')_0xad754a=this[_0x173a09(0x48a)]-this['itemPadding']()-_0x3392e6[_0x173a09(0x7ea)];else this[_0x173a09(0x123)]()===_0x173a09(0x735)?_0xad754a=Math[_0x173a09(0x85a)]((this[_0x173a09(0x48a)]-_0x3392e6[_0x173a09(0x7ea)])/0x2):_0xad754a=this[_0x173a09(0x6cd)]();this['drawTextEx'](_0x28e192,_0xad754a,_0x1a468c);};function Window_InBattleStatus(){const _0xc02517=_0x45d586;this[_0xc02517(0x6d1)](...arguments);}Window_InBattleStatus['prototype']=Object[_0x45d586(0x838)](Window_StatusBase['prototype']),Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0xb62)]=Window_InBattleStatus,Window_InBattleStatus['SETTINGS']={'bgType':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x676)]??0x0,'statusGraphic':VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0x373)]['StatusGraphic']??_0x45d586(0x304),'statusHelpDesc':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x4dc)]??'View\x20battle\x20member\x20status.','pageButtons':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x39c)]??!![],'pageButtonPosition':VisuMZ[_0x45d586(0x6fe)]['Settings'][_0x45d586(0x373)]['pageButtonPosition']??_0x45d586(0x717),'pageOffsetX':VisuMZ[_0x45d586(0x6fe)]['Settings'][_0x45d586(0x373)][_0x45d586(0x494)]??0x0,'pageOffsetY':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x34c)]??0x0,'buffValueFmt':VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x1b3)]??_0x45d586(0x22b),'debuffValueFmt':VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0x373)]['debuffValueFmt']??_0x45d586(0xb0b),'enemyStatus':VisuMZ[_0x45d586(0x6fe)]['Settings'][_0x45d586(0x373)][_0x45d586(0x8a8)]??!![],'enemyShowLevel':VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x632)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ['BattleCore']['Settings'][_0x45d586(0x373)][_0x45d586(0x90e)]??_0x45d586(0x328),'enemyShowParametersAlways':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x911)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x45d586(0x6fe)]['Settings']['InBattleStatus'][_0x45d586(0x260)]??!![],'enemyShowParametersIfDefeated':VisuMZ['BattleCore']['Settings'][_0x45d586(0x373)][_0x45d586(0x1f2)]??!![]},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(_0x10b44c){const _0x118887=_0x45d586;Window_StatusBase['prototype'][_0x118887(0x6d1)]['call'](this,_0x10b44c),this[_0x118887(0x250)](Window_InBattleStatus[_0x118887(0x905)][_0x118887(0x1e4)]),this[_0x118887(0x108)](),this[_0x118887(0x5bd)](),this['createPageButtons']();},Window_InBattleStatus[_0x45d586(0x19f)]['setBattler']=function(_0x5d351b){const _0xd1d50a=_0x45d586;this[_0xd1d50a(0x86c)]=_0x5d351b,this[_0xd1d50a(0x291)](),this['_statesWindow']&&this[_0xd1d50a(0x602)][_0xd1d50a(0x63f)](_0x5d351b);},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x997)]=function(){const _0x109538=_0x45d586;Window_StatusBase[_0x109538(0x19f)][_0x109538(0x997)][_0x109538(0x1b5)](this);if(this[_0x109538(0x602)])this['_statesWindow'][_0x109538(0x997)]();this[_0x109538(0x810)](),Imported[_0x109538(0x548)]&&SceneManager[_0x109538(0x101)](null);},Window_InBattleStatus[_0x45d586(0x19f)]['close']=function(){const _0x168bf3=_0x45d586;Window_StatusBase[_0x168bf3(0x19f)][_0x168bf3(0x56a)][_0x168bf3(0x1b5)](this);if(this[_0x168bf3(0x602)])this['_statesWindow'][_0x168bf3(0x56a)]();},Window_InBattleStatus['prototype'][_0x45d586(0x3c9)]=function(_0x3c196b){const _0x85f584=_0x45d586;this[_0x85f584(0x8bb)]=_0x3c196b;},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x7e2)]=function(){const _0x3c2fec=_0x45d586;return this['_returnWindow']||SceneManager[_0x3c2fec(0x4f4)][_0x3c2fec(0x514)];},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x8f9)]=function(){const _0x58c6fe=_0x45d586;Window_StatusBase[_0x58c6fe(0x19f)][_0x58c6fe(0x8f9)][_0x58c6fe(0x1b5)](this),this['loadOtherActorImages']();},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x1d9)]=function(){const _0x5be85d=_0x45d586;for(const _0x291299 of $gameParty[_0x5be85d(0xad5)]()){if(!_0x291299)continue;_0x291299[_0x5be85d(0x103)]()&&ImageManager[_0x5be85d(0xbce)](_0x291299[_0x5be85d(0x103)]()),_0x291299[_0x5be85d(0x3ea)]()&&ImageManager[_0x5be85d(0x8b1)](_0x291299[_0x5be85d(0x3ea)]()),_0x291299[_0x5be85d(0x228)]&&ImageManager[_0x5be85d(0x664)](_0x291299[_0x5be85d(0x228)]());}},Window_InBattleStatus['prototype']['createEnemySprite']=function(){const _0x19cdd0=_0x45d586;this['_enemySprite']=new Sprite(),this['_enemySprite'][_0x19cdd0(0x9ea)]['x']=0.5,this[_0x19cdd0(0x439)]['anchor']['y']=0x1,this['addChild'](this[_0x19cdd0(0x439)]);},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x5bd)]=function(){const _0x32af5a=_0x45d586,_0x50b928=this[_0x32af5a(0x51f)](),_0x31fcc3=new Window_InBattleStatusStates(_0x50b928);this['addChild'](_0x31fcc3),_0x31fcc3[_0x32af5a(0x4e3)](SceneManager['_scene'][_0x32af5a(0x8b3)]),this[_0x32af5a(0x602)]=_0x31fcc3;},Window_InBattleStatus[_0x45d586(0x19f)]['statesWindowRect']=function(){const _0x566fee=_0x45d586,_0x184990=Window_InBattleStatusStates['SETTINGS'][_0x566fee(0xb1e)],_0x43f1db=Math['min'](_0x184990,Math['floor'](this[_0x566fee(0x7ea)]/0x2)),_0x5429b5=Graphics[_0x566fee(0x6ae)]>0x44c?this[_0x566fee(0x6ac)]:this[_0x566fee(0x7fb)]()*0x4+this[_0x566fee(0x330)]*0x2,_0x2e5108=this[_0x566fee(0x7ea)]-_0x43f1db,_0x41e354=this[_0x566fee(0x6ac)]-_0x5429b5;return new Rectangle(_0x2e5108,_0x41e354,_0x43f1db,_0x5429b5);},Window_InBattleStatus['prototype'][_0x45d586(0x12b)]=function(){const _0x259456=_0x45d586;if(!ConfigManager[_0x259456(0x510)])return;if(!Window_InBattleStatus['SETTINGS'][_0x259456(0x39c)])return;this['_pageupButton']=new Sprite_Button(_0x259456(0xa76)),this['_pageupButton']['x']=this[_0x259456(0x818)]()+Window_InBattleStatus[_0x259456(0x905)][_0x259456(0x494)],this['_pageupButton']['y']=this['pageButtonY']()+Window_InBattleStatus[_0x259456(0x905)][_0x259456(0x34c)];const _0x5bded4=this[_0x259456(0x214)]['x']+this[_0x259456(0x214)][_0x259456(0x7ea)];this[_0x259456(0x51c)]=new Sprite_Button(_0x259456(0xb59)),this[_0x259456(0x51c)]['x']=_0x5bded4+0x4,this[_0x259456(0x51c)]['y']=this[_0x259456(0x214)]['y'],this[_0x259456(0x34e)](this[_0x259456(0x214)]),this[_0x259456(0x34e)](this[_0x259456(0x51c)]),this['_pageupButton'][_0x259456(0x132)](this[_0x259456(0x803)][_0x259456(0x856)](this)),this['_pagedownButton']['setClickHandler'](this[_0x259456(0x45c)][_0x259456(0x856)](this));},Window_InBattleStatus['prototype'][_0x45d586(0x818)]=function(){const _0x5ce865=_0x45d586;if(Graphics[_0x5ce865(0x6ae)]>0x44c&&Graphics[_0x5ce865(0x56c)]>0x2bc){if(Window_InBattleStatus[_0x5ce865(0x905)][_0x5ce865(0x86a)]===_0x5ce865(0x717)){let _0x59c01f=Math['ceil']((-this['x']-0x64)/0x2);if(_0x59c01f>=-0x64)_0x59c01f=this['padding'];return _0x59c01f;}else{const _0x86a79c=Graphics['boxWidth']-this['x']-this['width'];let _0x39f7f7=Math[_0x5ce865(0x85a)]((_0x86a79c-0x64)/0x2)+this['width'];return _0x39f7f7;}}else return this[_0x5ce865(0x7ea)]-0x64-this['padding']/0x2;},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x6a4)]=function(){const _0x5d88aa=_0x45d586;return Graphics[_0x5d88aa(0x6ae)]>0x44c&&Graphics[_0x5d88aa(0x56c)]>0x2bc?this[_0x5d88aa(0x6ac)]-0x30-this['padding']:0x30+this['padding'];},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x803)]=function(){const _0x4ecd89=_0x45d586;let _0xae6325=this[_0x4ecd89(0x4d4)]();if(_0xae6325[_0x4ecd89(0x1c9)]<=0x1&&!Window_InBattleStatus['SETTINGS'][_0x4ecd89(0x8a8)])return;let _0x1b6418=_0xae6325[_0x4ecd89(0xa63)](this[_0x4ecd89(0x86c)]);_0x1b6418--;_0x1b6418<0x0&&(Window_InBattleStatus['SETTINGS'][_0x4ecd89(0x8a8)]&&(_0xae6325=this[_0x4ecd89(0x4d4)](!![])),_0x1b6418=_0xae6325[_0x4ecd89(0x1c9)]-0x1);const _0xe1ed40=_0xae6325[_0x1b6418];this[_0x4ecd89(0x63f)](_0xe1ed40),SoundManager[_0x4ecd89(0x909)]();},Window_InBattleStatus['prototype'][_0x45d586(0x45c)]=function(){const _0x44beec=_0x45d586;let _0x5bd509=this[_0x44beec(0x4d4)]();if(_0x5bd509[_0x44beec(0x1c9)]<=0x1&&!Window_InBattleStatus[_0x44beec(0x905)][_0x44beec(0x8a8)])return;let _0x4be136=_0x5bd509[_0x44beec(0xa63)](this[_0x44beec(0x86c)]);_0x4be136++;_0x4be136>=_0x5bd509[_0x44beec(0x1c9)]&&(Window_InBattleStatus['SETTINGS'][_0x44beec(0x8a8)]&&(_0x5bd509=this[_0x44beec(0x4d4)](!![])),_0x4be136=0x0);const _0x168b06=_0x5bd509[_0x4be136];this[_0x44beec(0x63f)](_0x168b06),SoundManager[_0x44beec(0x909)]();},Window_InBattleStatus[_0x45d586(0x19f)]['getBattleMembers']=function(_0x2a7b9f){const _0x4e0b88=_0x45d586;let _0x310eca=[];const _0xfeac12=_0x2a7b9f?this[_0x4e0b88(0x86c)]['opponentsUnit']():this[_0x4e0b88(0x86c)][_0x4e0b88(0x904)]();return _0xfeac12===$gameParty?_0x310eca=$gameParty['battleMembers']():_0x310eca=$gameTroop['aliveMembers'](),_0x310eca[_0x4e0b88(0x4e7)](null);},Window_InBattleStatus['prototype'][_0x45d586(0xae1)]=function(){const _0x2fca12=_0x45d586;Window_Base['prototype'][_0x2fca12(0xae1)][_0x2fca12(0x1b5)](this),this['processHandling']();},Window_InBattleStatus['prototype'][_0x45d586(0x21e)]=function(){const _0x425afd=_0x45d586;if(this[_0x425afd(0x78b)]()){if(this[_0x425afd(0x317)]())return this[_0x425afd(0xbae)]();if(Input['isRepeated']('right'))return this[_0x425afd(0x45c)]();if(Input['isRepeated']('left'))return this[_0x425afd(0x803)]();}},SoundManager[_0x45d586(0x909)]=function(){const _0x380a86=_0x45d586;this[_0x380a86(0x5e4)](0x0);},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x78b)]=function(){const _0x126026=_0x45d586;return this[_0x126026(0x983)]()&&this['visible'];},Window_InBattleStatus[_0x45d586(0x19f)]['isCancelTriggered']=function(){const _0x254ebc=_0x45d586;if(Input[_0x254ebc(0x155)](_0x254ebc(0x144)))return!![];if(TouchInput[_0x254ebc(0x2a6)]())return!![];return![];},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0xbae)]=function(){const _0x85d434=_0x45d586;SoundManager[_0x85d434(0x4ac)](),this['deactivate'](),this[_0x85d434(0x602)]&&(this[_0x85d434(0x602)][_0x85d434(0x65b)](),this['_statesWindow'][_0x85d434(0x683)]()),SceneManager['_scene'][_0x85d434(0x91a)]();},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x810)]=function(){const _0x4059bf=_0x45d586;if(!this[_0x4059bf(0x214)])return;if(!this[_0x4059bf(0x51c)])return;const _0x1c8c7d=$gameParty[_0x4059bf(0xb5c)]()[_0x4059bf(0x1c9)]>0x0||Window_InBattleStatus[_0x4059bf(0x905)][_0x4059bf(0x8a8)];this['_pageupButton'][_0x4059bf(0x3d1)]=_0x1c8c7d,this[_0x4059bf(0x51c)][_0x4059bf(0x3d1)]=_0x1c8c7d;},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x291)]=function(){const _0x5545e2=_0x45d586;Window_StatusBase['prototype']['refresh'][_0x5545e2(0x1b5)](this);if(this[_0x5545e2(0x439)])this['_enemySprite'][_0x5545e2(0xb6c)]();this[_0x5545e2(0x394)][_0x5545e2(0xb8d)](),this[_0x5545e2(0xea)]['clear']();if(!this[_0x5545e2(0x86c)])return;this[_0x5545e2(0x51b)]();},Window_InBattleStatus[_0x45d586(0x19f)]['drawBattlerData']=function(){const _0x44bc54=_0x45d586;if(VisuMZ[_0x44bc54(0x6fe)][_0x44bc54(0xa41)]['InBattleStatus'][_0x44bc54(0x762)])return VisuMZ[_0x44bc54(0x6fe)]['Settings'][_0x44bc54(0x373)][_0x44bc54(0x762)][_0x44bc54(0x1b5)](this);{const _0x495b9a=this[_0x44bc54(0xbea)]()/0x2,_0x312d84=ImageManager['faceHeight'],_0x438401=_0x312d84/0x2-this[_0x44bc54(0x7fb)]()*1.5;this[_0x44bc54(0x358)](this[_0x44bc54(0x86c)],_0x495b9a+0x1,0x0,ImageManager[_0x44bc54(0x91b)],_0x312d84),this['drawActorSimpleStatus'](this['_battler'],_0x495b9a+0xb4,_0x438401);}{let _0x303c4=this['drawingAreaWidth'](),_0x4a255f=0x0,_0x14b648=Math[_0x44bc54(0xb32)](this[_0x44bc54(0x385)]()/0x2),_0x367f00=0x0;const _0x488113=this[_0x44bc54(0xba8)]();let _0x36a91b=_0x4a255f;const _0x8777e7=this[_0x44bc54(0xb54)]-ImageManager[_0x44bc54(0x637)],_0x27595b=Math[_0x44bc54(0xb32)](_0x488113['length']/0x2)*this[_0x44bc54(0x7fb)]();let _0x505f5e=Math[_0x44bc54(0xb32)]((_0x8777e7-_0x27595b)/0x2)+ImageManager[_0x44bc54(0x637)],_0x308a3f=Math[_0x44bc54(0x85a)](_0x303c4/0x2);this['_statesWindow']['y']!==0x0&&(this[_0x44bc54(0x602)]['y']=_0x505f5e);for(const _0x3b6bdb of _0x488113){this[_0x44bc54(0x576)](_0x36a91b,_0x505f5e,_0x308a3f,this[_0x44bc54(0x7fb)]()),this[_0x44bc54(0x6d8)](_0x3b6bdb,_0x36a91b,_0x505f5e,_0x308a3f),_0x367f00++,_0x367f00%0x2===0x0?(_0x36a91b=_0x4a255f,_0x505f5e+=this[_0x44bc54(0x7fb)]()):_0x36a91b=_0x14b648;}}},Window_InBattleStatus['prototype']['graphicType']=function(){const _0x313368=_0x45d586;return VisuMZ['BattleCore'][_0x313368(0xa41)][_0x313368(0x373)]['StatusGraphic'];},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x358)]=function(_0x140d77,_0x302117,_0x46eabc,_0x17a624,_0x2faa28){const _0x66faa5=_0x45d586;if(_0x140d77['isActor']())switch(this['graphicType']()){case'none':break;case _0x66faa5(0x2c9):this[_0x66faa5(0x7e4)](_0x140d77,_0x302117,_0x46eabc+0x1,_0x17a624,_0x2faa28-0x2);break;case'svbattler':this[_0x66faa5(0xa60)](_0x140d77,_0x302117,_0x46eabc+0x1,_0x17a624,_0x2faa28-0x2);break;default:this['drawItemActorFace'](_0x140d77,_0x302117,_0x46eabc,_0x17a624,_0x2faa28);break;}else this['drawEnemyBattler'](_0x140d77,_0x302117,_0x46eabc,_0x17a624,_0x2faa28);},Window_InBattleStatus[_0x45d586(0x19f)]['drawItemActorFace']=function(_0x5cb30d,_0x2a4928,_0x50e144,_0x345a5,_0x3179f0){const _0x3ce3f9=_0x45d586;_0x345a5=_0x345a5||ImageManager[_0x3ce3f9(0x91b)],_0x3179f0=_0x3179f0||ImageManager['faceHeight'];const _0x5c08a2=ImageManager[_0x3ce3f9(0x91b)],_0x69a6c1=_0x3179f0-0x2,_0x1022a6=_0x2a4928+Math[_0x3ce3f9(0x85a)]((_0x345a5-_0x5c08a2)/0x2);this[_0x3ce3f9(0xb62)]===Window_MenuStatus&&this[_0x3ce3f9(0x8e4)](_0x5cb30d['isBattleMember']()),this['drawActorFace'](_0x5cb30d,_0x1022a6,_0x50e144,_0x5c08a2,_0x69a6c1),this[_0x3ce3f9(0x8e4)](!![]);},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x7e4)]=function(_0x2009cc,_0x265bbb,_0x34f4e7,_0x1489da,_0x5de8c2){const _0x4d104e=_0x45d586;_0x1489da=_0x1489da||ImageManager[_0x4d104e(0x91b)],_0x5de8c2=_0x5de8c2||ImageManager[_0x4d104e(0x637)];const _0x42fd50=_0x2009cc[_0x4d104e(0x103)](),_0x4b0821=_0x2009cc['characterIndex'](),_0x4b813a=ImageManager[_0x4d104e(0xbce)](_0x42fd50),_0xbe5956=ImageManager[_0x4d104e(0x2ef)](_0x42fd50),_0x437db3=_0x4b813a[_0x4d104e(0x7ea)]/(_0xbe5956?0x3:0xc),_0x25326d=_0x4b813a[_0x4d104e(0x6ac)]/(_0xbe5956?0x4:0x8),_0x4490e9=_0x1489da,_0x3f4083=_0x5de8c2-0x2,_0xa32451=_0x265bbb+Math[_0x4d104e(0x85a)](_0x4490e9/0x2),_0x31eef6=_0x34f4e7+Math['ceil']((_0x5de8c2+_0x25326d)/0x2);this[_0x4d104e(0xb62)]===Window_MenuStatus&&this[_0x4d104e(0x8e4)](_0x2009cc[_0x4d104e(0x77b)]());const _0x4306dc=Math[_0x4d104e(0xb4b)](_0x1489da,_0x437db3),_0xfb50cf=Math[_0x4d104e(0xb4b)](_0x5de8c2,_0x25326d),_0x4854dd=Math[_0x4d104e(0x85a)](_0x265bbb+Math['max'](_0x1489da-_0x437db3,0x0)/0x2),_0x46adf1=Math[_0x4d104e(0x85a)](_0x34f4e7+Math[_0x4d104e(0x61a)](_0x5de8c2-_0x25326d,0x0)/0x2),_0x16dda7=_0xbe5956?0x0:_0x4b0821,_0x1bec63=(_0x16dda7%0x4*0x3+0x1)*_0x437db3,_0x35a795=Math[_0x4d104e(0x85a)](_0x16dda7/0x4)*0x4*_0x25326d;this[_0x4d104e(0x394)][_0x4d104e(0xadb)](_0x4b813a,_0x1bec63,_0x35a795,_0x4306dc,_0xfb50cf,_0x4854dd,_0x46adf1),this[_0x4d104e(0x8e4)](!![]);},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0xa60)]=function(_0x3f8242,_0x5ee131,_0x4e2856,_0x24c3f0,_0x4d728c,_0x1e7903){const _0x56e6ef=_0x45d586;_0x24c3f0=_0x24c3f0||ImageManager['faceWidth'],_0x4d728c=_0x4d728c||ImageManager[_0x56e6ef(0x637)];const _0x552fcf=ImageManager[_0x56e6ef(0x8b1)](_0x1e7903?_0x3f8242[_0x56e6ef(0xb90)]():_0x3f8242[_0x56e6ef(0x3ea)]()),_0x53ff27=_0x552fcf[_0x56e6ef(0x7ea)]/ImageManager[_0x56e6ef(0x280)],_0xbb09f2=_0x552fcf[_0x56e6ef(0x6ac)]/ImageManager[_0x56e6ef(0x398)],_0x1bafc2=_0x24c3f0,_0x2f0b9b=_0x4d728c-0x2,_0x20aeb3=_0x5ee131+Math[_0x56e6ef(0x85a)](_0x1bafc2/0x2),_0x3914bf=_0x4e2856+Math[_0x56e6ef(0xb32)]((_0x4d728c+_0xbb09f2)/0x2);this[_0x56e6ef(0xb62)]===Window_MenuStatus&&this['changePaintOpacity'](_0x3f8242['isBattleMember']());const _0x1d888b=_0x3f8242[_0x56e6ef(0xb4d)]&&_0x3f8242[_0x56e6ef(0xb4d)](),_0x42ab50=0x0,_0x19f8e5=0x0,_0xf14864=_0x1d888b?_0x552fcf[_0x56e6ef(0x7ea)]:_0x53ff27,_0x5a195f=_0x1d888b?_0x552fcf[_0x56e6ef(0x6ac)]:_0xbb09f2,_0x42f90d=Math[_0x56e6ef(0xb4b)](0x1,_0x24c3f0/_0xf14864,_0x4d728c/_0x5a195f),_0x2d8fb0=_0x42f90d*_0xf14864,_0x5235db=_0x42f90d*_0x5a195f,_0x2a98aa=Math[_0x56e6ef(0x85a)](_0x5ee131+Math['max'](_0x24c3f0-_0x2d8fb0,0x0)/0x2),_0x547008=Math[_0x56e6ef(0x85a)](_0x4e2856+Math[_0x56e6ef(0x61a)](_0x4d728c-_0x5235db,0x0)/0x2);this[_0x56e6ef(0x394)][_0x56e6ef(0xadb)](_0x552fcf,_0x42ab50,_0x19f8e5,_0xf14864,_0x5a195f,_0x2a98aa,_0x547008,_0x2d8fb0,_0x5235db),this[_0x56e6ef(0x8e4)](!![]);},Window_InBattleStatus['prototype'][_0x45d586(0x104)]=function(_0x4c6bee,_0x1ea1ea,_0x568685,_0x2e9d25,_0x461a30){const _0x43354d=_0x45d586;if(_0x4c6bee[_0x43354d(0x199)]()){this[_0x43354d(0xa60)](_0x4c6bee,_0x1ea1ea,_0x568685+0x1,_0x2e9d25,_0x461a30-0x2,!![]);return;}const _0xcc4e33=_0x4c6bee[_0x43354d(0x3ea)](),_0x21b261=$gameSystem[_0x43354d(0x138)]()?ImageManager[_0x43354d(0xa5b)](_0xcc4e33):ImageManager['loadEnemy'](_0xcc4e33);_0x21b261[_0x43354d(0x6d7)](this[_0x43354d(0x79e)][_0x43354d(0x856)](this,_0x4c6bee,_0x21b261,_0x1ea1ea,_0x568685,_0x2e9d25,_0x461a30));},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x79e)]=function(_0x5460cf,_0x431fad,_0x3bba16,_0x103395,_0x1126c3,_0x2a0809){const _0x419617=_0x45d586;if(this['_battler']!==_0x5460cf)return;this[_0x419617(0x439)]['show'](),this[_0x419617(0x439)][_0x419617(0x46a)]=new Bitmap(_0x1126c3,_0x2a0809);const _0x228c62=_0x1126c3,_0x205b57=_0x2a0809,_0x58b975=Math['min'](_0x228c62,_0x205b57),_0x2859a2=this[_0x419617(0x439)][_0x419617(0x46a)],_0x39533a=Math[_0x419617(0xb4b)](0x1,_0x58b975/_0x431fad[_0x419617(0x7ea)],_0x58b975/_0x431fad['height']),_0x2040d1=_0x431fad[_0x419617(0x7ea)]*_0x39533a,_0x2e6e44=_0x431fad[_0x419617(0x6ac)]*_0x39533a,_0x3d956f=Math['round']((_0x228c62-_0x2040d1)/0x2),_0x3918be=Math[_0x419617(0x31d)]((_0x205b57-_0x2e6e44)/0x2);_0x2859a2[_0x419617(0xadb)](_0x431fad,0x0,0x0,_0x431fad[_0x419617(0x7ea)],_0x431fad[_0x419617(0x6ac)],_0x3d956f,_0x3918be,_0x2040d1,_0x2e6e44),this['_enemySprite'][_0x419617(0x9ea)]['x']=0.5,this[_0x419617(0x439)][_0x419617(0x9ea)]['y']=0x1,this[_0x419617(0x439)]['x']=_0x3bba16+_0x1126c3/0x2+this[_0x419617(0x330)],this[_0x419617(0x439)]['y']=_0x103395+_0x2a0809+this['padding'],this['_enemySprite'][_0x419617(0x69b)](this['_battler']['battlerHue']());},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x3ad)]=function(_0xca0572,_0x4b9ca,_0x30b34c,_0x4b262b){const _0x6f7fb2=_0x45d586;if(_0xca0572['isEnemy']())_0x4b262b=this[_0x6f7fb2(0x48a)]-_0x4b9ca;Window_StatusBase[_0x6f7fb2(0x19f)][_0x6f7fb2(0x3ad)][_0x6f7fb2(0x1b5)](this,_0xca0572,_0x4b9ca,_0x30b34c,_0x4b262b);},Window_InBattleStatus[_0x45d586(0x19f)]['drawActorClass']=function(_0x2a51ca,_0x3fed13,_0x36df8c,_0x312203){const _0x266581=_0x45d586;if(!_0x2a51ca[_0x266581(0x7f0)]())return;Window_StatusBase[_0x266581(0x19f)][_0x266581(0x837)][_0x266581(0x1b5)](this,_0x2a51ca,_0x3fed13,_0x36df8c,_0x312203);},Window_InBattleStatus[_0x45d586(0x19f)]['drawActorLevel']=function(_0x262476,_0x5ade7e,_0x460b78){const _0x3df2e7=_0x45d586;if(_0x262476[_0x3df2e7(0x690)]()&&!Window_InBattleStatus[_0x3df2e7(0x905)]['enemyShowLevel'])return;Window_StatusBase[_0x3df2e7(0x19f)][_0x3df2e7(0x695)]['call'](this,_0x262476,_0x5ade7e,_0x460b78);},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x2a7)]=function(_0x5a4f49,_0x46caac,_0xd867f6,_0x390bd0){const _0x5595d0=_0x45d586;_0x5a4f49[_0x5595d0(0x8c6)]=!![],Window_StatusBase[_0x5595d0(0x19f)]['drawActorIcons']['call'](this,_0x5a4f49,_0x46caac,_0xd867f6,_0x390bd0),_0x5a4f49[_0x5595d0(0x8c6)]=undefined;},VisuMZ['BattleCore']['Game_BattlerBase_allIconsIBS']=Game_BattlerBase[_0x45d586(0x19f)]['allIcons'],Game_BattlerBase[_0x45d586(0x19f)]['allIcons']=function(){const _0x44d100=_0x45d586;if(this[_0x44d100(0x8c6)])return[];return VisuMZ[_0x44d100(0x6fe)][_0x44d100(0x33f)]['call'](this);},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x6ff)]=function(_0x5d2e77,_0x38e14f,_0x26f5d2,_0x3e51a5){const _0x590d8f=_0x45d586,_0x1b293d=_0x590d8f(0x75b)[_0x590d8f(0x534)](_0x5d2e77[_0x590d8f(0x8da)](),_0x38e14f);let _0x1fcc48=![];if(_0x5d2e77['isEnemy']()){const _0x3d3f78=Window_InBattleStatus[_0x590d8f(0x905)];if(_0x38e14f==='hp'&&_0x3d3f78[_0x590d8f(0xbf2)])_0x1fcc48=!![];if(_0x38e14f==='mp'&&_0x3d3f78['enemyMpGaugeRate'])_0x1fcc48=!![];if(_0x38e14f==='tp'&&_0x3d3f78[_0x590d8f(0x4f7)])_0x1fcc48=!![];}const _0x3a24da=this[_0x590d8f(0x81c)](_0x1b293d,_0x1fcc48?Sprite_GaugeRate:Sprite_Gauge);_0x3a24da[_0x590d8f(0x846)](_0x5d2e77,_0x38e14f),_0x3a24da['move'](_0x26f5d2,_0x3e51a5),_0x3a24da['show']();},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x385)]=function(){const _0x21a9d0=_0x45d586,_0x3ffd01=this[_0x21a9d0(0x602)]?this[_0x21a9d0(0x602)]['width']:0x0;return this['innerWidth']-_0x3ffd01+this[_0x21a9d0(0x330)]*0x2;},Window_InBattleStatus['prototype']['displayedParams']=function(){const _0x4f5f18=_0x45d586;return Imported['VisuMZ_0_CoreEngine']?VisuMZ['CoreEngine'][_0x4f5f18(0xa41)][_0x4f5f18(0xbf4)]['ExtDisplayedParams']:[_0x4f5f18(0x8f4),_0x4f5f18(0x6d4),_0x4f5f18(0x7cc),_0x4f5f18(0x96f),_0x4f5f18(0x7b0),'MDF',_0x4f5f18(0x152),_0x4f5f18(0x3d2)];},Window_InBattleStatus[_0x45d586(0x19f)][_0x45d586(0x6d8)]=function(_0x5d272d,_0x27b520,_0x522b0a,_0x508449){const _0x412b8e=_0x45d586,_0x5cf051=Window_InBattleStatus[_0x412b8e(0x905)],_0x4fa751=Imported[_0x412b8e(0xbc5)];this[_0x412b8e(0x773)]();let _0x44a4e4='',_0x9aa770=0x0,_0x1357f0=[_0x412b8e(0x791),'MAXMP',_0x412b8e(0x7cc),_0x412b8e(0x96f),_0x412b8e(0x7b0),'MDF','AGI',_0x412b8e(0x3d2)]['indexOf'](String(_0x5d272d)['toUpperCase']()['trim']());if(_0x4fa751)_0x44a4e4=TextManager[_0x412b8e(0xabf)](_0x5d272d),_0x9aa770=VisuMZ[_0x412b8e(0xa8f)](_0x5d272d);else{if(_0x1357f0>=0x0&&_0x1357f0<0x8)_0x44a4e4=TextManager['param'](_0x1357f0);}if(_0x1357f0>=0x0&&_0x1357f0<0x8){const _0xe924ae=this[_0x412b8e(0x86c)][_0x412b8e(0x606)][_0x1357f0];this[_0x412b8e(0x86c)][_0x412b8e(0x57b)](_0xe924ae,_0x1357f0)!==0x0&&(_0x9aa770=this['_battler']['buffIconIndex'](_0xe924ae,_0x1357f0));}if(_0x44a4e4){let _0x2eb6ec=_0x412b8e(0x1cd)[_0x412b8e(0x534)](_0x44a4e4,_0x9aa770);_0x508449<=0xd4&&(_0x2eb6ec=_0x412b8e(0x6f2)[_0x412b8e(0x534)](_0x44a4e4));const _0x121050=_0x508449<=0xd4?'\x20':'\x20\x20';this[_0x412b8e(0x55c)](_0x121050+_0x2eb6ec,_0x27b520,_0x522b0a);}this['resetTextColor']();let _0x3a0a88='';_0x4fa751?_0x3a0a88=this[_0x412b8e(0x86c)][_0x412b8e(0x416)](_0x5d272d,!![]):_0x3a0a88=String(this[_0x412b8e(0x86c)]['param'](_0x1357f0));if(this['_battler'][_0x412b8e(0x690)]()){let _0xe784b7=!![];if(_0x5cf051['enemyShowParametersAlways'])_0xe784b7=![];if(_0x5cf051['enemyShowParametersIfBattleTest']&&BattleManager[_0x412b8e(0xb40)]())_0xe784b7=![];if(_0x5cf051[_0x412b8e(0x1f2)]&&$gameSystem[_0x412b8e(0x672)]()[_0x412b8e(0x840)](this[_0x412b8e(0x86c)][_0x412b8e(0x4a5)]()))_0xe784b7=![];_0xe784b7&&(_0x3a0a88=_0x5cf051[_0x412b8e(0x90e)]);}if(_0x1357f0>=0x0&&_0x1357f0<0x8){if(this[_0x412b8e(0x86c)]['getParamBuffAndStateRate'](_0x1357f0)>0x1)_0x3a0a88=_0x5cf051['buffValueFmt']['format'](_0x3a0a88),Imported[_0x412b8e(0x903)]?this[_0x412b8e(0x240)](ColorManager[_0x412b8e(0x5fd)]()):this[_0x412b8e(0x240)](ColorManager[_0x412b8e(0xa5f)]());else this['_battler'][_0x412b8e(0x1f9)](_0x1357f0)<0x1&&(_0x3a0a88=_0x5cf051[_0x412b8e(0x96d)]['format'](_0x3a0a88),Imported[_0x412b8e(0x903)]?this[_0x412b8e(0x240)](ColorManager[_0x412b8e(0x1e2)]()):this[_0x412b8e(0x240)](ColorManager[_0x412b8e(0xd7)]()));}if(String(_0x3a0a88)){const _0x2803e5=_0x508449<=0xd4?'\x20':'\x20\x20';this['drawText'](_0x3a0a88+_0x2803e5,_0x27b520,_0x522b0a,_0x508449,_0x412b8e(0xae5));}},Window_InBattleStatus[_0x45d586(0x19f)]['drawDarkRect']=function(_0x154d64,_0x2a39df,_0x38e762,_0x4e59fd){const _0x3550fc=_0x45d586;_0x4e59fd=_0x4e59fd||this['lineHeight'](),this[_0x3550fc(0xea)][_0x3550fc(0x3da)]=0xa0;const _0x17d4a7=ColorManager[_0x3550fc(0xbc7)]();this['contentsBack'][_0x3550fc(0x692)](_0x154d64+0x1,_0x2a39df+0x1,_0x38e762-0x2,_0x4e59fd-0x2,_0x17d4a7),this['contentsBack'][_0x3550fc(0x3da)]=0xff;},Game_BattlerBase[_0x45d586(0x19f)][_0x45d586(0x1f9)]=function(_0x29722a){const _0x333de2=_0x45d586;let _0x41a6e7=0x1;_0x41a6e7*=this[_0x333de2(0xb8c)](_0x29722a);for(const _0x273a4a of this[_0x333de2(0xb26)]()){if(!_0x273a4a)continue;for(const _0x378f79 of _0x273a4a[_0x333de2(0xa05)]){if(!_0x378f79)continue;if(_0x378f79[_0x333de2(0xa27)]!==Game_BattlerBase[_0x333de2(0x8a3)])continue;if(_0x378f79[_0x333de2(0x70b)]!==_0x29722a)continue;_0x41a6e7*=_0x378f79['value'];}}return _0x41a6e7;};function _0x442c(_0x210824,_0x259217){const _0x455f36=_0x455f();return _0x442c=function(_0x442cdc,_0x37b0a4){_0x442cdc=_0x442cdc-0xce;let _0x3a8468=_0x455f36[_0x442cdc];return _0x3a8468;},_0x442c(_0x210824,_0x259217);}function Window_InBattleStatusStates(){this['initialize'](...arguments);}Window_InBattleStatusStates[_0x45d586(0x19f)]=Object[_0x45d586(0x838)](Window_Command['prototype']),Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0xb62)]=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x45d586(0x905)]={'maxWidth':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)]['InBattleStatus'][_0x45d586(0xb9b)]??0x180,'drawStates':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)]['InBattleStatus']['drawStates']??!![],'drawBuffs':VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x2fd)]??!![],'drawDebuffs':VisuMZ['BattleCore'][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0xa72)]??!![],'normalIcon':VisuMZ[_0x45d586(0x6fe)]['Settings'][_0x45d586(0x373)][_0x45d586(0x33d)]??0x54,'normalText':VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0x45d586(0xa89)]??_0x45d586(0xb64),'normalHelp':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0xa0b)]??_0x45d586(0xaf0),'stateHelpFmt':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x2d6)]??_0x45d586(0x343),'buffNameFmt':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0xbf8)]??_0x45d586(0x6b5),'buffHelpFmt':VisuMZ[_0x45d586(0x6fe)]['Settings'][_0x45d586(0x373)][_0x45d586(0x41a)]??_0x45d586(0x531),'debuffNameFmt':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)]['InBattleStatus'][_0x45d586(0x6ee)]??_0x45d586(0x25d),'debuffHelpFmt':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)]['debuffHelpFmt']??_0x45d586(0xb1b),'actionsFmt':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x629)]??_0x45d586(0xaa5),'turnsFmt':VisuMZ[_0x45d586(0x6fe)]['Settings'][_0x45d586(0x373)][_0x45d586(0x8f7)]??_0x45d586(0xabb),'passiveText':VisuMZ[_0x45d586(0x6fe)][_0x45d586(0xa41)][_0x45d586(0x373)][_0x45d586(0x241)]??'\x5cC[4](Passive)'},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x6d1)]=function(_0x529968){const _0x418ebe=_0x45d586;this[_0x418ebe(0x86c)]=null,Window_Command[_0x418ebe(0x19f)][_0x418ebe(0x6d1)]['call'](this,_0x529968),this[_0x418ebe(0x683)](),this[_0x418ebe(0x65b)](),this[_0x418ebe(0x250)](0x2);},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x63f)]=function(_0x7a7074){const _0x1c451c=_0x45d586;this[_0x1c451c(0x86c)]=_0x7a7074||null,this[_0x1c451c(0x291)](),this[_0x1c451c(0x391)](0x0),this[_0x1c451c(0xb2b)](0x0,0x0),this[_0x1c451c(0x69e)]();},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x879)]=function(){},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x277)]=function(){const _0x35e7c9=_0x45d586;if(!this[_0x35e7c9(0x86c)])return;this[_0x35e7c9(0x313)](),this[_0x35e7c9(0x4d6)](),this[_0x35e7c9(0x9be)](),this[_0x35e7c9(0x4a9)]();},Window_InBattleStatusStates['prototype'][_0x45d586(0x313)]=function(){const _0x577baa=_0x45d586;if(!this[_0x577baa(0x86c)][_0x577baa(0x690)]())return;if(!this[_0x577baa(0x86c)][_0x577baa(0x82a)]())return;const _0x50a7ce=this[_0x577baa(0x86c)]['getAspectData']()[_0x577baa(0x5c2)],_0x5f1a2f=this['_battler'][_0x577baa(0x753)]()[_0x577baa(0x49b)],_0x4d3767=this[_0x577baa(0x86c)][_0x577baa(0x753)]()['nameColor'];let _0xdfec9b='';_0x4d3767[_0x577baa(0x95f)](/#(.*?)/gi)&&Imported['VisuMZ_1_MessageCore']?_0xdfec9b=_0x577baa(0xa6f)[_0x577baa(0x534)](_0x5f1a2f,_0x50a7ce,_0x4d3767):_0xdfec9b=_0x577baa(0x499)[_0x577baa(0x534)](_0x5f1a2f,_0x50a7ce,_0x4d3767),this['addCommand'](_0xdfec9b,_0x577baa(0xa92),!![]);},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x4d6)]=function(){const _0x4ac01b=_0x45d586;if(!Window_InBattleStatusStates[_0x4ac01b(0x905)][_0x4ac01b(0x7cb)])return;for(const _0x29b2c5 of this['_battler']['states']()){if(!this[_0x4ac01b(0x7ee)](_0x29b2c5))continue;const _0x460c80=this['makeStateName'](_0x29b2c5);this[_0x4ac01b(0x956)](_0x460c80,'state',!![],_0x29b2c5['id']);}},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x7ee)]=function(_0x38340c){const _0xf9c0e0=_0x45d586;if(!_0x38340c)return![];if(_0x38340c['name'][_0xf9c0e0(0x379)]()==='')return![];if(_0x38340c[_0xf9c0e0(0x5c2)]['includes'](_0xf9c0e0(0x506)))return![];if(_0x38340c['iconIndex']<=0x0)return![];if(_0x38340c['excludeListing'])return![];return!![];},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x7c9)]=function(_0x52be94){const _0x30c2ed=_0x45d586;let _0x4ad84d=_0x52be94[_0x30c2ed(0x49b)],_0x24f3b1=_0x52be94[_0x30c2ed(0x5c2)],_0x150941='0';return Imported['VisuMZ_1_SkillsStatesCore']&&Imported['VisuMZ_1_MessageCore']&&(_0x150941=String(ColorManager['stateColor'](_0x52be94))),_0x150941['match'](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x30c2ed(0x534)](_0x4ad84d,_0x24f3b1,_0x150941):_0x30c2ed(0x499)[_0x30c2ed(0x534)](_0x4ad84d,_0x24f3b1,_0x150941);},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x9be)]=function(){for(let _0x3e9c94=0x0;_0x3e9c94<0x8;_0x3e9c94++){const _0x1544f9=this['makeBuffName'](_0x3e9c94);if(!_0x1544f9)continue;this['addCommand'](_0x1544f9,'buff',!![],_0x3e9c94);}},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x6af)]=function(_0x2b9fc3){const _0x4457d3=_0x45d586;if(!this['_battler'][_0x4457d3(0xa83)](_0x2b9fc3)&&!this[_0x4457d3(0x86c)][_0x4457d3(0x5a4)](_0x2b9fc3))return'';const _0x1336cd=Window_InBattleStatusStates[_0x4457d3(0x905)];if(this[_0x4457d3(0x86c)][_0x4457d3(0xa83)](_0x2b9fc3)&&!_0x1336cd[_0x4457d3(0x2fd)])return'';if(this[_0x4457d3(0x86c)][_0x4457d3(0x5a4)](_0x2b9fc3)&&!_0x1336cd[_0x4457d3(0xa72)])return'';const _0x3cc8e9=this[_0x4457d3(0x86c)][_0x4457d3(0x606)][_0x2b9fc3];let _0x3e3548=this[_0x4457d3(0x86c)]['buffIconIndex'](_0x3cc8e9,_0x2b9fc3),_0xfbf791=TextManager[_0x4457d3(0x1fa)](_0x2b9fc3);_0x3cc8e9>0x0?_0xfbf791=_0x1336cd[_0x4457d3(0xbf8)][_0x4457d3(0x534)](_0xfbf791):_0xfbf791=_0x1336cd[_0x4457d3(0x6ee)][_0x4457d3(0x534)](_0xfbf791);let _0x5034e2=0x0;return Imported[_0x4457d3(0x903)]&&(_0x5034e2=_0x3cc8e9>0x0?ColorManager[_0x4457d3(0x5fd)]():ColorManager[_0x4457d3(0x1e2)]()),_0x5034e2[_0x4457d3(0x95f)](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x4457d3(0x534)](_0x3e3548,_0xfbf791,_0x5034e2):_0x4457d3(0x499)[_0x4457d3(0x534)](_0x3e3548,_0xfbf791,_0x5034e2);},Window_InBattleStatusStates['prototype']['addNormalStatus']=function(){const _0x563c34=_0x45d586;if(this[_0x563c34(0x203)][_0x563c34(0x1c9)]>0x0)return;const _0x3b5c86=Window_InBattleStatusStates[_0x563c34(0x905)],_0x36ae95=_0x3b5c86[_0x563c34(0x33d)],_0x1c8fd1=_0x3b5c86['normalText'],_0x2e7ef5=_0x563c34(0x4cc)['format'](_0x36ae95,_0x1c8fd1);this[_0x563c34(0x956)](_0x2e7ef5,_0x563c34(0x5ff));},Window_InBattleStatusStates[_0x45d586(0x19f)]['drawItem']=function(_0xe22970){const _0x3e1c22=_0x45d586,_0x3f8b3b=this['itemLineRect'](_0xe22970);this[_0x3e1c22(0x8e4)](0xff),this['drawTextEx'](this[_0x3e1c22(0x2fb)](_0xe22970),_0x3f8b3b['x'],_0x3f8b3b['y']),this[_0x3e1c22(0x271)](_0xe22970,_0x3f8b3b);},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x271)]=function(_0x454da,_0x1bb080){const _0x38f476=_0x45d586;if(!Imported[_0x38f476(0x903)])return;const _0x2e1368=this['commandSymbol'](_0x454da),_0x1f9194=_0x1bb080['x']+0x2;if(_0x2e1368==='state'){const _0x32bedd=$dataStates[this[_0x38f476(0x203)][_0x454da][_0x38f476(0x3eb)]||0x0];this[_0x38f476(0x4ee)](this[_0x38f476(0x86c)],_0x32bedd,_0x1f9194,_0x1bb080['y']),this['drawActorStateData'](this[_0x38f476(0x86c)],_0x32bedd,_0x1f9194,_0x1bb080['y']);}else{if(_0x2e1368===_0x38f476(0x156)){const _0x4e1968=this[_0x38f476(0x203)][_0x454da][_0x38f476(0x3eb)];this[_0x38f476(0xa94)](this[_0x38f476(0x86c)],_0x4e1968,_0x1f9194,_0x1bb080['y']),this[_0x38f476(0xb7d)](this[_0x38f476(0x86c)],_0x4e1968,_0x1f9194,_0x1bb080['y']);}}},Window_InBattleStatusStates[_0x45d586(0x19f)]['updateHelp']=function(){const _0x433b15=_0x45d586,_0x54b659=this['currentSymbol']();let _0x3fe713='';if(_0x54b659===_0x433b15(0xa92))_0x3fe713=this['_battler']['getAspectData']()[_0x433b15(0x30c)];else{if(_0x54b659===_0x433b15(0x8fb))_0x3fe713=this[_0x433b15(0x3c2)]();else{if(_0x54b659===_0x433b15(0x156))_0x3fe713=this[_0x433b15(0x951)]();else _0x54b659===_0x433b15(0x5ff)&&(_0x3fe713=Window_InBattleStatusStates['SETTINGS']['normalHelp']);}}_0x3fe713?this[_0x433b15(0x8b3)][_0x433b15(0xa25)](_0x3fe713):this['_helpWindow'][_0x433b15(0xb8d)]();},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x3c2)]=function(){const _0x5816c6=_0x45d586,_0x4ca217=Window_InBattleStatusStates[_0x5816c6(0x905)],_0x382d0f=this[_0x5816c6(0x17f)]();let _0x6b46a2='';const _0x41d0ab=$dataStates[_0x382d0f]||null;if(_0x41d0ab){const _0x355c90=_0x4ca217[_0x5816c6(0x2d6)];let _0x579fc4=_0x41d0ab['statusDescription']||_0x41d0ab[_0x5816c6(0x30c)]||'';Imported[_0x5816c6(0x903)]&&(_0x579fc4=_0x579fc4[_0x5816c6(0x534)](this[_0x5816c6(0x86c)]['getStateDisplay'](_0x382d0f)));let _0x294837=_0x5816c6(0x5fe);if(this['_battler'][_0x5816c6(0x610)](_0x382d0f)){if(_0x41d0ab['autoRemovalTiming']===0x0)_0x294837=_0x5816c6(0x9dc);if(_0x41d0ab[_0x5816c6(0x2a8)]===0x1)_0x294837='actions';if(_0x41d0ab[_0x5816c6(0x2a8)]===0x2)_0x294837=_0x5816c6(0x2a4);}const _0x35b067=this[_0x5816c6(0x86c)][_0x5816c6(0x92e)][_0x382d0f]||0x0;let _0x4b1f6e='\x5cC[0]';Imported[_0x5816c6(0x903)]&&Imported[_0x5816c6(0x70c)]&&(_0x4b1f6e=ColorManager['stateColor'](_0x41d0ab),_0x4b1f6e['match'](/#(.*?)/gi)?_0x4b1f6e=_0x5816c6(0xabc)['format'](_0x4b1f6e):_0x4b1f6e='\x5cC[%1]'[_0x5816c6(0x534)](_0x4b1f6e)),_0x6b46a2=_0x355c90['format'](_0x579fc4,this[_0x5816c6(0x33a)](_0x294837,_0x35b067,_0x4b1f6e));}return _0x6b46a2;},Window_InBattleStatusStates[_0x45d586(0x19f)]['makeBuffHelpText']=function(){const _0x15e461=_0x45d586,_0x190977=Window_InBattleStatusStates[_0x15e461(0x905)],_0x2c5a9f=this[_0x15e461(0x17f)]();let _0x32d2fc='';const _0x2baf55=this[_0x15e461(0x86c)][_0x15e461(0xa83)](_0x2c5a9f),_0x122c91=_0x2baf55?_0x15e461(0x41a):_0x15e461(0xb6e),_0x6615fa=_0x190977[_0x122c91];let _0x31c5fc='\x5cC[0]';Imported[_0x15e461(0x903)]&&Imported[_0x15e461(0x70c)]&&(_0x31c5fc=_0x2baf55?ColorManager[_0x15e461(0x5fd)]():ColorManager[_0x15e461(0x1e2)](),_0x31c5fc[_0x15e461(0x95f)](/#(.*?)/gi)?_0x31c5fc=_0x15e461(0xabc)['format'](_0x31c5fc):_0x31c5fc='\x5cC[%1]'[_0x15e461(0x534)](_0x31c5fc));const _0x5dd715=this[_0x15e461(0x86c)][_0x15e461(0xa18)][_0x2c5a9f]||0x0;return _0x32d2fc=_0x6615fa[_0x15e461(0x534)](TextManager[_0x15e461(0x1fa)](_0x2c5a9f),Math[_0x15e461(0x85a)](this[_0x15e461(0x86c)][_0x15e461(0xb8c)](_0x2c5a9f)*0x64)+'%',_0x31c5fc,this[_0x15e461(0x33a)]('turns',_0x5dd715,_0x31c5fc)),_0x32d2fc;},Window_InBattleStatusStates[_0x45d586(0x19f)][_0x45d586(0x33a)]=function(_0x16a3a4,_0x4f5f6e,_0x50c5ae){const _0xcedc5d=_0x45d586,_0x50bcef=Window_InBattleStatusStates['SETTINGS'];let _0x318605=_0x50bcef['passiveText'];if(_0x16a3a4===_0xcedc5d(0x920))_0x318605=_0x50bcef['actionsFmt'];if(_0x16a3a4===_0xcedc5d(0x2a4))_0x318605=_0x50bcef['turnsFmt'];if(_0x16a3a4==='none')return'';return _0x318605['format'](_0x4f5f6e,_0x50c5ae);};